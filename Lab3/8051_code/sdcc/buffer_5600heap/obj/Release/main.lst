                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl __sdcc_external_startup
                                     13 	.globl _free
                                     14 	.globl _malloc
                                     15 	.globl _printf_tiny
                                     16 	.globl _printf
                                     17 	.globl _TF1
                                     18 	.globl _TR1
                                     19 	.globl _TF0
                                     20 	.globl _TR0
                                     21 	.globl _IE1
                                     22 	.globl _IT1
                                     23 	.globl _IE0
                                     24 	.globl _IT0
                                     25 	.globl _SM0
                                     26 	.globl _SM1
                                     27 	.globl _SM2
                                     28 	.globl _REN
                                     29 	.globl _TB8
                                     30 	.globl _RB8
                                     31 	.globl _TI
                                     32 	.globl _RI
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD0
                                     48 	.globl _TXD
                                     49 	.globl _RXD0
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _P0_7
                                     76 	.globl _P0_6
                                     77 	.globl _P0_5
                                     78 	.globl _P0_4
                                     79 	.globl _P0_3
                                     80 	.globl _P0_2
                                     81 	.globl _P0_1
                                     82 	.globl _P0_0
                                     83 	.globl _PS
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _EA
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _BREG_F7
                                     95 	.globl _BREG_F6
                                     96 	.globl _BREG_F5
                                     97 	.globl _BREG_F4
                                     98 	.globl _BREG_F3
                                     99 	.globl _BREG_F2
                                    100 	.globl _BREG_F1
                                    101 	.globl _BREG_F0
                                    102 	.globl _P5_7
                                    103 	.globl _P5_6
                                    104 	.globl _P5_5
                                    105 	.globl _P5_4
                                    106 	.globl _P5_3
                                    107 	.globl _P5_2
                                    108 	.globl _P5_1
                                    109 	.globl _P5_0
                                    110 	.globl _P4_7
                                    111 	.globl _P4_6
                                    112 	.globl _P4_5
                                    113 	.globl _P4_4
                                    114 	.globl _P4_3
                                    115 	.globl _P4_2
                                    116 	.globl _P4_1
                                    117 	.globl _P4_0
                                    118 	.globl _PX0L
                                    119 	.globl _PT0L
                                    120 	.globl _PX1L
                                    121 	.globl _PT1L
                                    122 	.globl _PSL
                                    123 	.globl _PT2L
                                    124 	.globl _PPCL
                                    125 	.globl _EC
                                    126 	.globl _CCF0
                                    127 	.globl _CCF1
                                    128 	.globl _CCF2
                                    129 	.globl _CCF3
                                    130 	.globl _CCF4
                                    131 	.globl _CR
                                    132 	.globl _CF
                                    133 	.globl _TF2
                                    134 	.globl _EXF2
                                    135 	.globl _RCLK
                                    136 	.globl _TCLK
                                    137 	.globl _EXEN2
                                    138 	.globl _TR2
                                    139 	.globl _C_T2
                                    140 	.globl _CP_RL2
                                    141 	.globl _T2CON_7
                                    142 	.globl _T2CON_6
                                    143 	.globl _T2CON_5
                                    144 	.globl _T2CON_4
                                    145 	.globl _T2CON_3
                                    146 	.globl _T2CON_2
                                    147 	.globl _T2CON_1
                                    148 	.globl _T2CON_0
                                    149 	.globl _PT2
                                    150 	.globl _ET2
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _dataout
                                    227 	.globl _putchar
                                    228 	.globl _getchar
                                    229 	.globl _get_input
                                    230 	.globl _get_num1
                                    231 ;--------------------------------------------------------
                                    232 ; special function registers
                                    233 ;--------------------------------------------------------
                                    234 	.area RSEG    (ABS,DATA)
      000000                        235 	.org 0x0000
                           0000C8   236 _T2CON	=	0x00c8
                           0000CA   237 _RCAP2L	=	0x00ca
                           0000CB   238 _RCAP2H	=	0x00cb
                           0000CC   239 _TL2	=	0x00cc
                           0000CD   240 _TH2	=	0x00cd
                           00008E   241 _AUXR	=	0x008e
                           0000A2   242 _AUXR1	=	0x00a2
                           000097   243 _CKRL	=	0x0097
                           00008F   244 _CKCON0	=	0x008f
                           0000AF   245 _CKCON1	=	0x00af
                           0000FA   246 _CCAP0H	=	0x00fa
                           0000FB   247 _CCAP1H	=	0x00fb
                           0000FC   248 _CCAP2H	=	0x00fc
                           0000FD   249 _CCAP3H	=	0x00fd
                           0000FE   250 _CCAP4H	=	0x00fe
                           0000EA   251 _CCAP0L	=	0x00ea
                           0000EB   252 _CCAP1L	=	0x00eb
                           0000EC   253 _CCAP2L	=	0x00ec
                           0000ED   254 _CCAP3L	=	0x00ed
                           0000EE   255 _CCAP4L	=	0x00ee
                           0000DA   256 _CCAPM0	=	0x00da
                           0000DB   257 _CCAPM1	=	0x00db
                           0000DC   258 _CCAPM2	=	0x00dc
                           0000DD   259 _CCAPM3	=	0x00dd
                           0000DE   260 _CCAPM4	=	0x00de
                           0000D8   261 _CCON	=	0x00d8
                           0000F9   262 _CH	=	0x00f9
                           0000E9   263 _CL	=	0x00e9
                           0000D9   264 _CMOD	=	0x00d9
                           0000A8   265 _IEN0	=	0x00a8
                           0000B1   266 _IEN1	=	0x00b1
                           0000B8   267 _IPL0	=	0x00b8
                           0000B7   268 _IPH0	=	0x00b7
                           0000B2   269 _IPL1	=	0x00b2
                           0000B3   270 _IPH1	=	0x00b3
                           0000C0   271 _P4	=	0x00c0
                           0000E8   272 _P5	=	0x00e8
                           0000A6   273 _WDTRST	=	0x00a6
                           0000A7   274 _WDTPRG	=	0x00a7
                           0000A9   275 _SADDR	=	0x00a9
                           0000B9   276 _SADEN	=	0x00b9
                           0000C3   277 _SPCON	=	0x00c3
                           0000C4   278 _SPSTA	=	0x00c4
                           0000C5   279 _SPDAT	=	0x00c5
                           0000C9   280 _T2MOD	=	0x00c9
                           00009B   281 _BDRCON	=	0x009b
                           00009A   282 _BRL	=	0x009a
                           00009C   283 _KBLS	=	0x009c
                           00009D   284 _KBE	=	0x009d
                           00009E   285 _KBF	=	0x009e
                           0000D2   286 _EECON	=	0x00d2
                           0000E0   287 _ACC	=	0x00e0
                           0000F0   288 _B	=	0x00f0
                           000083   289 _DPH	=	0x0083
                           000083   290 _DP0H	=	0x0083
                           000082   291 _DPL	=	0x0082
                           000082   292 _DP0L	=	0x0082
                           0000A8   293 _IE	=	0x00a8
                           0000B8   294 _IP	=	0x00b8
                           000080   295 _P0	=	0x0080
                           000090   296 _P1	=	0x0090
                           0000A0   297 _P2	=	0x00a0
                           0000B0   298 _P3	=	0x00b0
                           000087   299 _PCON	=	0x0087
                           0000D0   300 _PSW	=	0x00d0
                           000099   301 _SBUF	=	0x0099
                           000099   302 _SBUF0	=	0x0099
                           000098   303 _SCON	=	0x0098
                           000081   304 _SP	=	0x0081
                           000088   305 _TCON	=	0x0088
                           00008C   306 _TH0	=	0x008c
                           00008D   307 _TH1	=	0x008d
                           00008A   308 _TL0	=	0x008a
                           00008B   309 _TL1	=	0x008b
                           000089   310 _TMOD	=	0x0089
                                    311 ;--------------------------------------------------------
                                    312 ; special function bits
                                    313 ;--------------------------------------------------------
                                    314 	.area RSEG    (ABS,DATA)
      000000                        315 	.org 0x0000
                           0000AD   316 _ET2	=	0x00ad
                           0000BD   317 _PT2	=	0x00bd
                           0000C8   318 _T2CON_0	=	0x00c8
                           0000C9   319 _T2CON_1	=	0x00c9
                           0000CA   320 _T2CON_2	=	0x00ca
                           0000CB   321 _T2CON_3	=	0x00cb
                           0000CC   322 _T2CON_4	=	0x00cc
                           0000CD   323 _T2CON_5	=	0x00cd
                           0000CE   324 _T2CON_6	=	0x00ce
                           0000CF   325 _T2CON_7	=	0x00cf
                           0000C8   326 _CP_RL2	=	0x00c8
                           0000C9   327 _C_T2	=	0x00c9
                           0000CA   328 _TR2	=	0x00ca
                           0000CB   329 _EXEN2	=	0x00cb
                           0000CC   330 _TCLK	=	0x00cc
                           0000CD   331 _RCLK	=	0x00cd
                           0000CE   332 _EXF2	=	0x00ce
                           0000CF   333 _TF2	=	0x00cf
                           0000DF   334 _CF	=	0x00df
                           0000DE   335 _CR	=	0x00de
                           0000DC   336 _CCF4	=	0x00dc
                           0000DB   337 _CCF3	=	0x00db
                           0000DA   338 _CCF2	=	0x00da
                           0000D9   339 _CCF1	=	0x00d9
                           0000D8   340 _CCF0	=	0x00d8
                           0000AE   341 _EC	=	0x00ae
                           0000BE   342 _PPCL	=	0x00be
                           0000BD   343 _PT2L	=	0x00bd
                           0000BC   344 _PSL	=	0x00bc
                           0000BB   345 _PT1L	=	0x00bb
                           0000BA   346 _PX1L	=	0x00ba
                           0000B9   347 _PT0L	=	0x00b9
                           0000B8   348 _PX0L	=	0x00b8
                           0000C0   349 _P4_0	=	0x00c0
                           0000C1   350 _P4_1	=	0x00c1
                           0000C2   351 _P4_2	=	0x00c2
                           0000C3   352 _P4_3	=	0x00c3
                           0000C4   353 _P4_4	=	0x00c4
                           0000C5   354 _P4_5	=	0x00c5
                           0000C6   355 _P4_6	=	0x00c6
                           0000C7   356 _P4_7	=	0x00c7
                           0000E8   357 _P5_0	=	0x00e8
                           0000E9   358 _P5_1	=	0x00e9
                           0000EA   359 _P5_2	=	0x00ea
                           0000EB   360 _P5_3	=	0x00eb
                           0000EC   361 _P5_4	=	0x00ec
                           0000ED   362 _P5_5	=	0x00ed
                           0000EE   363 _P5_6	=	0x00ee
                           0000EF   364 _P5_7	=	0x00ef
                           0000F0   365 _BREG_F0	=	0x00f0
                           0000F1   366 _BREG_F1	=	0x00f1
                           0000F2   367 _BREG_F2	=	0x00f2
                           0000F3   368 _BREG_F3	=	0x00f3
                           0000F4   369 _BREG_F4	=	0x00f4
                           0000F5   370 _BREG_F5	=	0x00f5
                           0000F6   371 _BREG_F6	=	0x00f6
                           0000F7   372 _BREG_F7	=	0x00f7
                           0000A8   373 _EX0	=	0x00a8
                           0000A9   374 _ET0	=	0x00a9
                           0000AA   375 _EX1	=	0x00aa
                           0000AB   376 _ET1	=	0x00ab
                           0000AC   377 _ES	=	0x00ac
                           0000AF   378 _EA	=	0x00af
                           0000B8   379 _PX0	=	0x00b8
                           0000B9   380 _PT0	=	0x00b9
                           0000BA   381 _PX1	=	0x00ba
                           0000BB   382 _PT1	=	0x00bb
                           0000BC   383 _PS	=	0x00bc
                           000080   384 _P0_0	=	0x0080
                           000081   385 _P0_1	=	0x0081
                           000082   386 _P0_2	=	0x0082
                           000083   387 _P0_3	=	0x0083
                           000084   388 _P0_4	=	0x0084
                           000085   389 _P0_5	=	0x0085
                           000086   390 _P0_6	=	0x0086
                           000087   391 _P0_7	=	0x0087
                           000090   392 _P1_0	=	0x0090
                           000091   393 _P1_1	=	0x0091
                           000092   394 _P1_2	=	0x0092
                           000093   395 _P1_3	=	0x0093
                           000094   396 _P1_4	=	0x0094
                           000095   397 _P1_5	=	0x0095
                           000096   398 _P1_6	=	0x0096
                           000097   399 _P1_7	=	0x0097
                           0000A0   400 _P2_0	=	0x00a0
                           0000A1   401 _P2_1	=	0x00a1
                           0000A2   402 _P2_2	=	0x00a2
                           0000A3   403 _P2_3	=	0x00a3
                           0000A4   404 _P2_4	=	0x00a4
                           0000A5   405 _P2_5	=	0x00a5
                           0000A6   406 _P2_6	=	0x00a6
                           0000A7   407 _P2_7	=	0x00a7
                           0000B0   408 _P3_0	=	0x00b0
                           0000B1   409 _P3_1	=	0x00b1
                           0000B2   410 _P3_2	=	0x00b2
                           0000B3   411 _P3_3	=	0x00b3
                           0000B4   412 _P3_4	=	0x00b4
                           0000B5   413 _P3_5	=	0x00b5
                           0000B6   414 _P3_6	=	0x00b6
                           0000B7   415 _P3_7	=	0x00b7
                           0000B0   416 _RXD	=	0x00b0
                           0000B0   417 _RXD0	=	0x00b0
                           0000B1   418 _TXD	=	0x00b1
                           0000B1   419 _TXD0	=	0x00b1
                           0000B2   420 _INT0	=	0x00b2
                           0000B3   421 _INT1	=	0x00b3
                           0000B4   422 _T0	=	0x00b4
                           0000B5   423 _T1	=	0x00b5
                           0000B6   424 _WR	=	0x00b6
                           0000B7   425 _RD	=	0x00b7
                           0000D0   426 _P	=	0x00d0
                           0000D1   427 _F1	=	0x00d1
                           0000D2   428 _OV	=	0x00d2
                           0000D3   429 _RS0	=	0x00d3
                           0000D4   430 _RS1	=	0x00d4
                           0000D5   431 _F0	=	0x00d5
                           0000D6   432 _AC	=	0x00d6
                           0000D7   433 _CY	=	0x00d7
                           000098   434 _RI	=	0x0098
                           000099   435 _TI	=	0x0099
                           00009A   436 _RB8	=	0x009a
                           00009B   437 _TB8	=	0x009b
                           00009C   438 _REN	=	0x009c
                           00009D   439 _SM2	=	0x009d
                           00009E   440 _SM1	=	0x009e
                           00009F   441 _SM0	=	0x009f
                           000088   442 _IT0	=	0x0088
                           000089   443 _IE0	=	0x0089
                           00008A   444 _IT1	=	0x008a
                           00008B   445 _IE1	=	0x008b
                           00008C   446 _TR0	=	0x008c
                           00008D   447 _TF0	=	0x008d
                           00008E   448 _TR1	=	0x008e
                           00008F   449 _TF1	=	0x008f
                                    450 ;--------------------------------------------------------
                                    451 ; overlayable register banks
                                    452 ;--------------------------------------------------------
                                    453 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        454 	.ds 8
                                    455 ;--------------------------------------------------------
                                    456 ; internal ram data
                                    457 ;--------------------------------------------------------
                                    458 	.area DSEG    (DATA)
      000000                        459 _main_sloc0_1_0:
      000000                        460 	.ds 2
      000002                        461 _main_sloc1_1_0:
      000002                        462 	.ds 2
      000004                        463 _main_sloc2_1_0:
      000004                        464 	.ds 2
      000006                        465 _main_sloc3_1_0:
      000006                        466 	.ds 1
      000007                        467 _main_sloc4_1_0:
      000007                        468 	.ds 2
      000009                        469 _main_sloc5_1_0:
      000009                        470 	.ds 2
      00000B                        471 _main_sloc6_1_0:
      00000B                        472 	.ds 2
      00000D                        473 _main_sloc7_1_0:
      00000D                        474 	.ds 2
      00000F                        475 _main_sloc8_1_0:
      00000F                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; Stack segment in internal ram
                                    482 ;--------------------------------------------------------
                                    483 	.area	SSEG
      000000                        484 __start__stack:
      000000                        485 	.ds	1
                                    486 
                                    487 ;--------------------------------------------------------
                                    488 ; indirectly addressable internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area ISEG    (DATA)
                                    491 ;--------------------------------------------------------
                                    492 ; absolute internal ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area IABS    (ABS,DATA)
                                    495 	.area IABS    (ABS,DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; bit data
                                    498 ;--------------------------------------------------------
                                    499 	.area BSEG    (BIT)
                                    500 ;--------------------------------------------------------
                                    501 ; paged external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area PSEG    (PAG,XDATA)
                                    504 ;--------------------------------------------------------
                                    505 ; external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XSEG    (XDATA)
      000000                        508 _dataout_v_65536_47:
      000000                        509 	.ds 1
      000001                        510 _putchar_ch_65536_49:
      000001                        511 	.ds 2
      000003                        512 _get_input_num_65536_56:
      000003                        513 	.ds 2
      000005                        514 _get_input_count_65536_56:
      000005                        515 	.ds 1
      000006                        516 _get_input_input_arr_65536_56:
      000006                        517 	.ds 16
      000016                        518 _get_num1_num_65536_63:
      000016                        519 	.ds 2
      000018                        520 _get_num1_var_65536_63:
      000018                        521 	.ds 2
      00001A                        522 _main_symbol_stored_65536_69:
      00001A                        523 	.ds 2
      00001C                        524 _main_counter_65536_69:
      00001C                        525 	.ds 2
      00001E                        526 _main_buffer1_65536_69:
      00001E                        527 	.ds 2
      000020                        528 _main_buffern_65536_69:
      000020                        529 	.ds 90
      00007A                        530 _main_buffer_size_65536_69:
      00007A                        531 	.ds 94
      0000D8                        532 _main_num2_65536_69:
      0000D8                        533 	.ds 2
                                    534 ;--------------------------------------------------------
                                    535 ; absolute external ram data
                                    536 ;--------------------------------------------------------
                                    537 	.area XABS    (ABS,XDATA)
                                    538 ;--------------------------------------------------------
                                    539 ; external initialized ram data
                                    540 ;--------------------------------------------------------
                                    541 	.area XISEG   (XDATA)
                                    542 	.area HOME    (CODE)
                                    543 	.area GSINIT0 (CODE)
                                    544 	.area GSINIT1 (CODE)
                                    545 	.area GSINIT2 (CODE)
                                    546 	.area GSINIT3 (CODE)
                                    547 	.area GSINIT4 (CODE)
                                    548 	.area GSINIT5 (CODE)
                                    549 	.area GSINIT  (CODE)
                                    550 	.area GSFINAL (CODE)
                                    551 	.area CSEG    (CODE)
                                    552 ;--------------------------------------------------------
                                    553 ; interrupt vector
                                    554 ;--------------------------------------------------------
                                    555 	.area HOME    (CODE)
      000000                        556 __interrupt_vect:
      000000 02r00r00         [24]  557 	ljmp	__sdcc_gsinit_startup
                                    558 ;--------------------------------------------------------
                                    559 ; global & static initialisations
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.area GSFINAL (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 	.globl __sdcc_gsinit_startup
                                    566 	.globl __sdcc_program_startup
                                    567 	.globl __start__stack
                                    568 	.globl __mcs51_genXINIT
                                    569 	.globl __mcs51_genXRAMCLEAR
                                    570 	.globl __mcs51_genRAMCLEAR
                                    571 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  572 	ljmp	__sdcc_program_startup
                                    573 ;--------------------------------------------------------
                                    574 ; Home
                                    575 ;--------------------------------------------------------
                                    576 	.area HOME    (CODE)
                                    577 	.area HOME    (CODE)
      000003                        578 __sdcc_program_startup:
      000003 02r02r4C         [24]  579 	ljmp	_main
                                    580 ;	return from main will return to caller
                                    581 ;--------------------------------------------------------
                                    582 ; code
                                    583 ;--------------------------------------------------------
                                    584 	.area CSEG    (CODE)
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    587 ;------------------------------------------------------------
                                    588 ;	main.c:21: _sdcc_external_startup()
                                    589 ;	-----------------------------------------
                                    590 ;	 function _sdcc_external_startup
                                    591 ;	-----------------------------------------
      000000                        592 __sdcc_external_startup:
                           000007   593 	ar7 = 0x07
                           000006   594 	ar6 = 0x06
                           000005   595 	ar5 = 0x05
                           000004   596 	ar4 = 0x04
                           000003   597 	ar3 = 0x03
                           000002   598 	ar2 = 0x02
                           000001   599 	ar1 = 0x01
                           000000   600 	ar0 = 0x00
                                    601 ;	main.c:23: AUXR |= 0X0C;
      000000 43 8E 0C         [24]  602 	orl	_AUXR,#0x0c
                                    603 ;	main.c:24: return 0;
      000003 90 00 00         [24]  604 	mov	dptr,#0x0000
                                    605 ;	main.c:25: }
      000006 22               [24]  606 	ret
                                    607 ;------------------------------------------------------------
                                    608 ;Allocation info for local variables in function 'dataout'
                                    609 ;------------------------------------------------------------
                                    610 ;v                         Allocated with name '_dataout_v_65536_47'
                                    611 ;ptr                       Allocated with name '_dataout_ptr_65536_48'
                                    612 ;------------------------------------------------------------
                                    613 ;	main.c:36: void dataout(uint8_t v)
                                    614 ;	-----------------------------------------
                                    615 ;	 function dataout
                                    616 ;	-----------------------------------------
      000007                        617 _dataout:
      000007 E5 82            [12]  618 	mov	a,dpl
      000009 90r00r00         [24]  619 	mov	dptr,#_dataout_v_65536_47
      00000C F0               [24]  620 	movx	@dptr,a
                                    621 ;	main.c:39: *ptr=v;
      00000D E0               [24]  622 	movx	a,@dptr
      00000E FF               [12]  623 	mov	r7,a
      00000F 7E 00            [12]  624 	mov	r6,#0x00
      000011 90 70 05         [24]  625 	mov	dptr,#0x7005
      000014 EF               [12]  626 	mov	a,r7
      000015 F0               [24]  627 	movx	@dptr,a
      000016 EE               [12]  628 	mov	a,r6
      000017 A3               [24]  629 	inc	dptr
      000018 F0               [24]  630 	movx	@dptr,a
                                    631 ;	main.c:40: }
      000019 22               [24]  632 	ret
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'putchar'
                                    635 ;------------------------------------------------------------
                                    636 ;ch                        Allocated with name '_putchar_ch_65536_49'
                                    637 ;------------------------------------------------------------
                                    638 ;	main.c:42: int putchar (int ch)
                                    639 ;	-----------------------------------------
                                    640 ;	 function putchar
                                    641 ;	-----------------------------------------
      00001A                        642 _putchar:
      00001A AF 83            [24]  643 	mov	r7,dph
      00001C E5 82            [12]  644 	mov	a,dpl
      00001E 90r00r01         [24]  645 	mov	dptr,#_putchar_ch_65536_49
      000021 F0               [24]  646 	movx	@dptr,a
      000022 EF               [12]  647 	mov	a,r7
      000023 A3               [24]  648 	inc	dptr
      000024 F0               [24]  649 	movx	@dptr,a
                                    650 ;	main.c:44: while (TI==0)
      000025                        651 00101$:
      000025 30 99 FD         [24]  652 	jnb	_TI,00101$
                                    653 ;	main.c:49: SBUF = ch;
      000028 90r00r01         [24]  654 	mov	dptr,#_putchar_ch_65536_49
      00002B E0               [24]  655 	movx	a,@dptr
      00002C FE               [12]  656 	mov	r6,a
      00002D A3               [24]  657 	inc	dptr
      00002E E0               [24]  658 	movx	a,@dptr
      00002F FF               [12]  659 	mov	r7,a
      000030 8E 99            [24]  660 	mov	_SBUF,r6
                                    661 ;	main.c:50: TI = 0;
                                    662 ;	assignBit
      000032 C2 99            [12]  663 	clr	_TI
                                    664 ;	main.c:52: return ch;
      000034 8E 82            [24]  665 	mov	dpl,r6
      000036 8F 83            [24]  666 	mov	dph,r7
                                    667 ;	main.c:53: }
      000038 22               [24]  668 	ret
                                    669 ;------------------------------------------------------------
                                    670 ;Allocation info for local variables in function 'getchar'
                                    671 ;------------------------------------------------------------
                                    672 ;	main.c:55: int getchar (void)
                                    673 ;	-----------------------------------------
                                    674 ;	 function getchar
                                    675 ;	-----------------------------------------
      000039                        676 _getchar:
                                    677 ;	main.c:57: while (RI==0)
      000039                        678 00101$:
                                    679 ;	main.c:62: RI = 0;
                                    680 ;	assignBit
      000039 10 98 02         [24]  681 	jbc	_RI,00114$
      00003C 80 FB            [24]  682 	sjmp	00101$
      00003E                        683 00114$:
                                    684 ;	main.c:63: return SBUF;
      00003E AE 99            [24]  685 	mov	r6,_SBUF
      000040 7F 00            [12]  686 	mov	r7,#0x00
      000042 8E 82            [24]  687 	mov	dpl,r6
      000044 8F 83            [24]  688 	mov	dph,r7
                                    689 ;	main.c:64: }
      000046 22               [24]  690 	ret
                                    691 ;------------------------------------------------------------
                                    692 ;Allocation info for local variables in function 'get_input'
                                    693 ;------------------------------------------------------------
                                    694 ;num                       Allocated with name '_get_input_num_65536_56'
                                    695 ;count                     Allocated with name '_get_input_count_65536_56'
                                    696 ;input_arr                 Allocated with name '_get_input_input_arr_65536_56'
                                    697 ;i                         Allocated with name '_get_input_i_131072_61'
                                    698 ;------------------------------------------------------------
                                    699 ;	main.c:66: uint16_t get_input(void)
                                    700 ;	-----------------------------------------
                                    701 ;	 function get_input
                                    702 ;	-----------------------------------------
      000047                        703 _get_input:
                                    704 ;	main.c:68: __xdata uint16_t num =0;
      000047 90r00r03         [24]  705 	mov	dptr,#_get_input_num_65536_56
      00004A E4               [12]  706 	clr	a
      00004B F0               [24]  707 	movx	@dptr,a
      00004C A3               [24]  708 	inc	dptr
      00004D F0               [24]  709 	movx	@dptr,a
                                    710 ;	main.c:69: __xdata uint8_t count = 0;
      00004E 90r00r05         [24]  711 	mov	dptr,#_get_input_count_65536_56
      000051 F0               [24]  712 	movx	@dptr,a
                                    713 ;	main.c:73: while(input_arr[count] = getchar())
      000052                        714 00108$:
      000052 90r00r05         [24]  715 	mov	dptr,#_get_input_count_65536_56
      000055 E0               [24]  716 	movx	a,@dptr
      000056 FF               [12]  717 	mov	r7,a
      000057 24r06            [12]  718 	add	a,#_get_input_input_arr_65536_56
      000059 FD               [12]  719 	mov	r5,a
      00005A E4               [12]  720 	clr	a
      00005B 34s00            [12]  721 	addc	a,#(_get_input_input_arr_65536_56 >> 8)
      00005D FE               [12]  722 	mov	r6,a
      00005E C0 07            [24]  723 	push	ar7
      000060 C0 06            [24]  724 	push	ar6
      000062 C0 05            [24]  725 	push	ar5
      000064 12r00r39         [24]  726 	lcall	_getchar
      000067 AB 82            [24]  727 	mov	r3,dpl
      000069 AC 83            [24]  728 	mov	r4,dph
      00006B D0 05            [24]  729 	pop	ar5
      00006D D0 06            [24]  730 	pop	ar6
      00006F D0 07            [24]  731 	pop	ar7
      000071 8D 82            [24]  732 	mov	dpl,r5
      000073 8E 83            [24]  733 	mov	dph,r6
      000075 EB               [12]  734 	mov	a,r3
      000076 F0               [24]  735 	movx	@dptr,a
      000077 EB               [12]  736 	mov	a,r3
      000078 70 03            [24]  737 	jnz	00150$
      00007A 02r00rF4         [24]  738 	ljmp	00124$
      00007D                        739 00150$:
                                    740 ;	main.c:75: if(input_arr[count] == 13)
      00007D 8D 82            [24]  741 	mov	dpl,r5
      00007F 8E 83            [24]  742 	mov	dph,r6
      000081 E0               [24]  743 	movx	a,@dptr
      000082 FC               [12]  744 	mov	r4,a
      000083 BC 0D 02         [24]  745 	cjne	r4,#0x0d,00151$
      000086 80 6C            [24]  746 	sjmp	00124$
      000088                        747 00151$:
                                    748 ;	main.c:80: if(input_arr[count]==8)
      000088 8D 82            [24]  749 	mov	dpl,r5
      00008A 8E 83            [24]  750 	mov	dph,r6
      00008C E0               [24]  751 	movx	a,@dptr
      00008D FD               [12]  752 	mov	r5,a
      00008E BD 08 1C         [24]  753 	cjne	r5,#0x08,00104$
                                    754 ;	main.c:82: putchar(8);
      000091 90 00 08         [24]  755 	mov	dptr,#0x0008
      000094 C0 07            [24]  756 	push	ar7
      000096 12r00r1A         [24]  757 	lcall	_putchar
                                    758 ;	main.c:83: putchar(32);
      000099 90 00 20         [24]  759 	mov	dptr,#0x0020
      00009C 12r00r1A         [24]  760 	lcall	_putchar
                                    761 ;	main.c:84: putchar(8);
      00009F 90 00 08         [24]  762 	mov	dptr,#0x0008
      0000A2 12r00r1A         [24]  763 	lcall	_putchar
      0000A5 D0 07            [24]  764 	pop	ar7
                                    765 ;	main.c:86: count--;
      0000A7 EF               [12]  766 	mov	a,r7
      0000A8 14               [12]  767 	dec	a
      0000A9 90r00r05         [24]  768 	mov	dptr,#_get_input_count_65536_56
      0000AC F0               [24]  769 	movx	@dptr,a
      0000AD                        770 00104$:
                                    771 ;	main.c:89: if((input_arr[count] >= '0') && (input_arr[count] <= '9'))
      0000AD 90r00r05         [24]  772 	mov	dptr,#_get_input_count_65536_56
      0000B0 E0               [24]  773 	movx	a,@dptr
      0000B1 FF               [12]  774 	mov	r7,a
      0000B2 24r06            [12]  775 	add	a,#_get_input_input_arr_65536_56
      0000B4 FD               [12]  776 	mov	r5,a
      0000B5 E4               [12]  777 	clr	a
      0000B6 34s00            [12]  778 	addc	a,#(_get_input_input_arr_65536_56 >> 8)
      0000B8 FE               [12]  779 	mov	r6,a
      0000B9 8D 82            [24]  780 	mov	dpl,r5
      0000BB 8E 83            [24]  781 	mov	dph,r6
      0000BD E0               [24]  782 	movx	a,@dptr
      0000BE FC               [12]  783 	mov	r4,a
      0000BF BC 30 00         [24]  784 	cjne	r4,#0x30,00154$
      0000C2                        785 00154$:
      0000C2 40 8E            [24]  786 	jc	00108$
      0000C4 EC               [12]  787 	mov	a,r4
      0000C5 24 C6            [12]  788 	add	a,#0xff - 0x39
      0000C7 40 89            [24]  789 	jc	00108$
                                    790 ;	main.c:91: putchar(input_arr[count]);
      0000C9 7B 00            [12]  791 	mov	r3,#0x00
      0000CB 8C 82            [24]  792 	mov	dpl,r4
      0000CD 8B 83            [24]  793 	mov	dph,r3
      0000CF C0 07            [24]  794 	push	ar7
      0000D1 C0 06            [24]  795 	push	ar6
      0000D3 C0 05            [24]  796 	push	ar5
      0000D5 12r00r1A         [24]  797 	lcall	_putchar
      0000D8 D0 05            [24]  798 	pop	ar5
      0000DA D0 06            [24]  799 	pop	ar6
      0000DC D0 07            [24]  800 	pop	ar7
                                    801 ;	main.c:92: input_arr[count]=input_arr[count]-'0';
      0000DE 8D 82            [24]  802 	mov	dpl,r5
      0000E0 8E 83            [24]  803 	mov	dph,r6
      0000E2 E0               [24]  804 	movx	a,@dptr
      0000E3 24 D0            [12]  805 	add	a,#0xd0
      0000E5 FC               [12]  806 	mov	r4,a
      0000E6 8D 82            [24]  807 	mov	dpl,r5
      0000E8 8E 83            [24]  808 	mov	dph,r6
      0000EA F0               [24]  809 	movx	@dptr,a
                                    810 ;	main.c:93: count++;
      0000EB 90r00r05         [24]  811 	mov	dptr,#_get_input_count_65536_56
      0000EE EF               [12]  812 	mov	a,r7
      0000EF 04               [12]  813 	inc	a
      0000F0 F0               [24]  814 	movx	@dptr,a
      0000F1 02r00r52         [24]  815 	ljmp	00108$
                                    816 ;	main.c:97: for(int i=0;i<count;i++)
      0000F4                        817 00124$:
      0000F4 90r00r05         [24]  818 	mov	dptr,#_get_input_count_65536_56
      0000F7 E0               [24]  819 	movx	a,@dptr
      0000F8 FF               [12]  820 	mov	r7,a
      0000F9 7D 00            [12]  821 	mov	r5,#0x00
      0000FB 7E 00            [12]  822 	mov	r6,#0x00
      0000FD                        823 00113$:
      0000FD 8F 03            [24]  824 	mov	ar3,r7
      0000FF 7C 00            [12]  825 	mov	r4,#0x00
      000101 C3               [12]  826 	clr	c
      000102 ED               [12]  827 	mov	a,r5
      000103 9B               [12]  828 	subb	a,r3
      000104 EE               [12]  829 	mov	a,r6
      000105 64 80            [12]  830 	xrl	a,#0x80
      000107 8C F0            [24]  831 	mov	b,r4
      000109 63 F0 80         [24]  832 	xrl	b,#0x80
      00010C 95 F0            [12]  833 	subb	a,b
      00010E 50 59            [24]  834 	jnc	00111$
                                    835 ;	main.c:99: num = num * 10;
      000110 90r00r03         [24]  836 	mov	dptr,#_get_input_num_65536_56
      000113 E0               [24]  837 	movx	a,@dptr
      000114 FB               [12]  838 	mov	r3,a
      000115 A3               [24]  839 	inc	dptr
      000116 E0               [24]  840 	movx	a,@dptr
      000117 FC               [12]  841 	mov	r4,a
      000118 90r00r00         [24]  842 	mov	dptr,#__mulint_PARM_2
      00011B EB               [12]  843 	mov	a,r3
      00011C F0               [24]  844 	movx	@dptr,a
      00011D EC               [12]  845 	mov	a,r4
      00011E A3               [24]  846 	inc	dptr
      00011F F0               [24]  847 	movx	@dptr,a
      000120 90 00 0A         [24]  848 	mov	dptr,#0x000a
      000123 C0 07            [24]  849 	push	ar7
      000125 C0 06            [24]  850 	push	ar6
      000127 C0 05            [24]  851 	push	ar5
      000129 12r00r00         [24]  852 	lcall	__mulint
      00012C AB 82            [24]  853 	mov	r3,dpl
      00012E AC 83            [24]  854 	mov	r4,dph
      000130 D0 05            [24]  855 	pop	ar5
      000132 D0 06            [24]  856 	pop	ar6
      000134 D0 07            [24]  857 	pop	ar7
      000136 90r00r03         [24]  858 	mov	dptr,#_get_input_num_65536_56
      000139 EB               [12]  859 	mov	a,r3
      00013A F0               [24]  860 	movx	@dptr,a
      00013B EC               [12]  861 	mov	a,r4
      00013C A3               [24]  862 	inc	dptr
      00013D F0               [24]  863 	movx	@dptr,a
                                    864 ;	main.c:100: num = num + input_arr[i];
      00013E ED               [12]  865 	mov	a,r5
      00013F 24r06            [12]  866 	add	a,#_get_input_input_arr_65536_56
      000141 F5 82            [12]  867 	mov	dpl,a
      000143 EE               [12]  868 	mov	a,r6
      000144 34s00            [12]  869 	addc	a,#(_get_input_input_arr_65536_56 >> 8)
      000146 F5 83            [12]  870 	mov	dph,a
      000148 E0               [24]  871 	movx	a,@dptr
      000149 FC               [12]  872 	mov	r4,a
      00014A 7B 00            [12]  873 	mov	r3,#0x00
      00014C 90r00r03         [24]  874 	mov	dptr,#_get_input_num_65536_56
      00014F E0               [24]  875 	movx	a,@dptr
      000150 F9               [12]  876 	mov	r1,a
      000151 A3               [24]  877 	inc	dptr
      000152 E0               [24]  878 	movx	a,@dptr
      000153 FA               [12]  879 	mov	r2,a
      000154 EC               [12]  880 	mov	a,r4
      000155 29               [12]  881 	add	a,r1
      000156 F9               [12]  882 	mov	r1,a
      000157 EB               [12]  883 	mov	a,r3
      000158 3A               [12]  884 	addc	a,r2
      000159 FA               [12]  885 	mov	r2,a
      00015A 90r00r03         [24]  886 	mov	dptr,#_get_input_num_65536_56
      00015D E9               [12]  887 	mov	a,r1
      00015E F0               [24]  888 	movx	@dptr,a
      00015F EA               [12]  889 	mov	a,r2
      000160 A3               [24]  890 	inc	dptr
      000161 F0               [24]  891 	movx	@dptr,a
                                    892 ;	main.c:97: for(int i=0;i<count;i++)
      000162 0D               [12]  893 	inc	r5
      000163 BD 00 97         [24]  894 	cjne	r5,#0x00,00113$
      000166 0E               [12]  895 	inc	r6
      000167 80 94            [24]  896 	sjmp	00113$
      000169                        897 00111$:
                                    898 ;	main.c:103: return num;
      000169 90r00r03         [24]  899 	mov	dptr,#_get_input_num_65536_56
      00016C E0               [24]  900 	movx	a,@dptr
      00016D FE               [12]  901 	mov	r6,a
      00016E A3               [24]  902 	inc	dptr
      00016F E0               [24]  903 	movx	a,@dptr
                                    904 ;	main.c:104: }
      000170 8E 82            [24]  905 	mov	dpl,r6
      000172 F5 83            [12]  906 	mov	dph,a
      000174 22               [24]  907 	ret
                                    908 ;------------------------------------------------------------
                                    909 ;Allocation info for local variables in function 'get_num1'
                                    910 ;------------------------------------------------------------
                                    911 ;num                       Allocated with name '_get_num1_num_65536_63'
                                    912 ;var                       Allocated with name '_get_num1_var_65536_63'
                                    913 ;------------------------------------------------------------
                                    914 ;	main.c:106: int get_num1()
                                    915 ;	-----------------------------------------
                                    916 ;	 function get_num1
                                    917 ;	-----------------------------------------
      000175                        918 _get_num1:
                                    919 ;	main.c:108: int num=0;
      000175 90r00r16         [24]  920 	mov	dptr,#_get_num1_num_65536_63
      000178 E4               [12]  921 	clr	a
      000179 F0               [24]  922 	movx	@dptr,a
      00017A A3               [24]  923 	inc	dptr
      00017B F0               [24]  924 	movx	@dptr,a
                                    925 ;	main.c:109: int var=0;
      00017C 90r00r18         [24]  926 	mov	dptr,#_get_num1_var_65536_63
      00017F F0               [24]  927 	movx	@dptr,a
      000180 A3               [24]  928 	inc	dptr
      000181 F0               [24]  929 	movx	@dptr,a
                                    930 ;	main.c:110: while(var==0)
      000182                        931 00108$:
      000182 90r00r18         [24]  932 	mov	dptr,#_get_num1_var_65536_63
      000185 E0               [24]  933 	movx	a,@dptr
      000186 F5 F0            [12]  934 	mov	b,a
      000188 A3               [24]  935 	inc	dptr
      000189 E0               [24]  936 	movx	a,@dptr
      00018A 45 F0            [12]  937 	orl	a,b
      00018C 60 03            [24]  938 	jz	00129$
      00018E 02r02r40         [24]  939 	ljmp	00110$
      000191                        940 00129$:
                                    941 ;	main.c:112: num = get_input();
      000191 12r00r47         [24]  942 	lcall	_get_input
      000194 AE 82            [24]  943 	mov	r6,dpl
      000196 AF 83            [24]  944 	mov	r7,dph
                                    945 ;	main.c:113: printf_tiny("\n \r The input number is:%d \n \r",num);
      000198 C0 07            [24]  946 	push	ar7
      00019A C0 06            [24]  947 	push	ar6
      00019C C0 06            [24]  948 	push	ar6
      00019E C0 07            [24]  949 	push	ar7
      0001A0 74r00            [12]  950 	mov	a,#___str_0
      0001A2 C0 E0            [24]  951 	push	acc
      0001A4 74s00            [12]  952 	mov	a,#(___str_0 >> 8)
      0001A6 C0 E0            [24]  953 	push	acc
      0001A8 12r00r00         [24]  954 	lcall	_printf_tiny
      0001AB E5 81            [12]  955 	mov	a,sp
      0001AD 24 FC            [12]  956 	add	a,#0xfc
      0001AF F5 81            [12]  957 	mov	sp,a
      0001B1 D0 06            [24]  958 	pop	ar6
      0001B3 D0 07            [24]  959 	pop	ar7
                                    960 ;	main.c:115: if ((num < 32 || num > 4800))
      0001B5 C3               [12]  961 	clr	c
      0001B6 EE               [12]  962 	mov	a,r6
      0001B7 94 20            [12]  963 	subb	a,#0x20
      0001B9 EF               [12]  964 	mov	a,r7
      0001BA 64 80            [12]  965 	xrl	a,#0x80
      0001BC 94 80            [12]  966 	subb	a,#0x80
      0001BE 40 0E            [24]  967 	jc	00104$
      0001C0 74 C0            [12]  968 	mov	a,#0xc0
      0001C2 9E               [12]  969 	subb	a,r6
      0001C3 74 92            [12]  970 	mov	a,#(0x12 ^ 0x80)
      0001C5 8F F0            [24]  971 	mov	b,r7
      0001C7 63 F0 80         [24]  972 	xrl	b,#0x80
      0001CA 95 F0            [12]  973 	subb	a,b
      0001CC 50 1E            [24]  974 	jnc	00105$
      0001CE                        975 00104$:
                                    976 ;	main.c:117: printf_tiny("Invalid number! Please try again.\n \r");
      0001CE 74r1F            [12]  977 	mov	a,#___str_1
      0001D0 C0 E0            [24]  978 	push	acc
      0001D2 74s00            [12]  979 	mov	a,#(___str_1 >> 8)
      0001D4 C0 E0            [24]  980 	push	acc
      0001D6 12r00r00         [24]  981 	lcall	_printf_tiny
      0001D9 15 81            [12]  982 	dec	sp
      0001DB 15 81            [12]  983 	dec	sp
                                    984 ;	main.c:118: var = 0;
      0001DD 90r00r18         [24]  985 	mov	dptr,#_get_num1_var_65536_63
      0001E0 E4               [12]  986 	clr	a
      0001E1 F0               [24]  987 	movx	@dptr,a
      0001E2 A3               [24]  988 	inc	dptr
      0001E3 F0               [24]  989 	movx	@dptr,a
                                    990 ;	main.c:119: num=0;
      0001E4 90r00r16         [24]  991 	mov	dptr,#_get_num1_num_65536_63
      0001E7 F0               [24]  992 	movx	@dptr,a
      0001E8 A3               [24]  993 	inc	dptr
      0001E9 F0               [24]  994 	movx	@dptr,a
      0001EA 80 96            [24]  995 	sjmp	00108$
      0001EC                        996 00105$:
                                    997 ;	main.c:121: else if(num % 16 == 0)
      0001EC 90r00r00         [24]  998 	mov	dptr,#__modsint_PARM_2
      0001EF 74 10            [12]  999 	mov	a,#0x10
      0001F1 F0               [24] 1000 	movx	@dptr,a
      0001F2 E4               [12] 1001 	clr	a
      0001F3 A3               [24] 1002 	inc	dptr
      0001F4 F0               [24] 1003 	movx	@dptr,a
      0001F5 8E 82            [24] 1004 	mov	dpl,r6
      0001F7 8F 83            [24] 1005 	mov	dph,r7
      0001F9 C0 07            [24] 1006 	push	ar7
      0001FB C0 06            [24] 1007 	push	ar6
      0001FD 12r00r00         [24] 1008 	lcall	__modsint
      000200 E5 82            [12] 1009 	mov	a,dpl
      000202 85 83 F0         [24] 1010 	mov	b,dph
      000205 D0 06            [24] 1011 	pop	ar6
      000207 D0 07            [24] 1012 	pop	ar7
      000209 45 F0            [12] 1013 	orl	a,b
      00020B 70 14            [24] 1014 	jnz	00102$
                                   1015 ;	main.c:123: var = 1;
      00020D 90r00r18         [24] 1016 	mov	dptr,#_get_num1_var_65536_63
      000210 74 01            [12] 1017 	mov	a,#0x01
      000212 F0               [24] 1018 	movx	@dptr,a
      000213 E4               [12] 1019 	clr	a
      000214 A3               [24] 1020 	inc	dptr
      000215 F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	main.c:124: num=num;
      000216 90r00r16         [24] 1023 	mov	dptr,#_get_num1_num_65536_63
      000219 EE               [12] 1024 	mov	a,r6
      00021A F0               [24] 1025 	movx	@dptr,a
      00021B EF               [12] 1026 	mov	a,r7
      00021C A3               [24] 1027 	inc	dptr
      00021D F0               [24] 1028 	movx	@dptr,a
      00021E 02r01r82         [24] 1029 	ljmp	00108$
      000221                       1030 00102$:
                                   1031 ;	main.c:128: printf_tiny("Invalid number! Please try again.\n \r");
      000221 74r1F            [12] 1032 	mov	a,#___str_1
      000223 C0 E0            [24] 1033 	push	acc
      000225 74s00            [12] 1034 	mov	a,#(___str_1 >> 8)
      000227 C0 E0            [24] 1035 	push	acc
      000229 12r00r00         [24] 1036 	lcall	_printf_tiny
      00022C 15 81            [12] 1037 	dec	sp
      00022E 15 81            [12] 1038 	dec	sp
                                   1039 ;	main.c:129: num=0;
      000230 90r00r16         [24] 1040 	mov	dptr,#_get_num1_num_65536_63
      000233 E4               [12] 1041 	clr	a
      000234 F0               [24] 1042 	movx	@dptr,a
      000235 A3               [24] 1043 	inc	dptr
      000236 F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	main.c:130: var=0;
      000237 90r00r18         [24] 1046 	mov	dptr,#_get_num1_var_65536_63
      00023A F0               [24] 1047 	movx	@dptr,a
      00023B A3               [24] 1048 	inc	dptr
      00023C F0               [24] 1049 	movx	@dptr,a
      00023D 02r01r82         [24] 1050 	ljmp	00108$
      000240                       1051 00110$:
                                   1052 ;	main.c:133: return num;
      000240 90r00r16         [24] 1053 	mov	dptr,#_get_num1_num_65536_63
      000243 E0               [24] 1054 	movx	a,@dptr
      000244 FE               [12] 1055 	mov	r6,a
      000245 A3               [24] 1056 	inc	dptr
      000246 E0               [24] 1057 	movx	a,@dptr
                                   1058 ;	main.c:134: }
      000247 8E 82            [24] 1059 	mov	dpl,r6
      000249 F5 83            [12] 1060 	mov	dph,a
      00024B 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'main'
                                   1064 ;------------------------------------------------------------
                                   1065 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1066 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1067 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1068 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1069 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1070 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1071 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                                   1072 ;sloc7                     Allocated with name '_main_sloc7_1_0'
                                   1073 ;sloc8                     Allocated with name '_main_sloc8_1_0'
                                   1074 ;input_symbol              Allocated with name '_main_input_symbol_65536_69'
                                   1075 ;total_symbol              Allocated with name '_main_total_symbol_65536_69'
                                   1076 ;symbol_stored             Allocated with name '_main_symbol_stored_65536_69'
                                   1077 ;counter                   Allocated with name '_main_counter_65536_69'
                                   1078 ;buffer0                   Allocated with name '_main_buffer0_65536_69'
                                   1079 ;buffer1                   Allocated with name '_main_buffer1_65536_69'
                                   1080 ;buffern                   Allocated with name '_main_buffern_65536_69'
                                   1081 ;buffer_size               Allocated with name '_main_buffer_size_65536_69'
                                   1082 ;buffer0_temper            Allocated with name '_main_buffer0_temper_65536_69'
                                   1083 ;buffer1_temper            Allocated with name '_main_buffer1_temper_65536_69'
                                   1084 ;num1                      Allocated with name '_main_num1_65536_69'
                                   1085 ;num2                      Allocated with name '_main_num2_65536_69'
                                   1086 ;deleted                   Allocated with name '_main_deleted_65536_69'
                                   1087 ;i                         Allocated with name '_main_i_65536_69'
                                   1088 ;j                         Allocated with name '_main_j_65536_69'
                                   1089 ;n                         Allocated with name '_main_n_65536_69'
                                   1090 ;buff0_char_count          Allocated with name '_main_buff0_char_count_65536_69'
                                   1091 ;total_buffer              Allocated with name '_main_total_buffer_65536_69'
                                   1092 ;var                       Allocated with name '_main_var_65537_70'
                                   1093 ;index                     Allocated with name '_main_index_262145_100'
                                   1094 ;a                         Allocated with name '_main_a_393217_102'
                                   1095 ;------------------------------------------------------------
                                   1096 ;	main.c:137: void main(void)
                                   1097 ;	-----------------------------------------
                                   1098 ;	 function main
                                   1099 ;	-----------------------------------------
      00024C                       1100 _main:
                                   1101 ;	main.c:141: unsigned int symbol_stored=0;
      00024C 90r00r1A         [24] 1102 	mov	dptr,#_main_symbol_stored_65536_69
      00024F E4               [12] 1103 	clr	a
      000250 F0               [24] 1104 	movx	@dptr,a
      000251 A3               [24] 1105 	inc	dptr
      000252 F0               [24] 1106 	movx	@dptr,a
                                   1107 ;	main.c:142: unsigned int counter=0;
      000253 90r00r1C         [24] 1108 	mov	dptr,#_main_counter_65536_69
      000256 F0               [24] 1109 	movx	@dptr,a
      000257 A3               [24] 1110 	inc	dptr
      000258 F0               [24] 1111 	movx	@dptr,a
                                   1112 ;	main.c:162: printf_tiny("\n\r********* HELLO :) ********\n\r");
      000259 74r44            [12] 1113 	mov	a,#___str_2
      00025B C0 E0            [24] 1114 	push	acc
      00025D 74s00            [12] 1115 	mov	a,#(___str_2 >> 8)
      00025F C0 E0            [24] 1116 	push	acc
      000261 12r00r00         [24] 1117 	lcall	_printf_tiny
      000264 15 81            [12] 1118 	dec	sp
      000266 15 81            [12] 1119 	dec	sp
                                   1120 ;	main.c:163: printf("\n\rEnter a number between 32 & 4800 for buffer size\n\r");
      000268 74r64            [12] 1121 	mov	a,#___str_3
      00026A C0 E0            [24] 1122 	push	acc
      00026C 74s00            [12] 1123 	mov	a,#(___str_3 >> 8)
      00026E C0 E0            [24] 1124 	push	acc
      000270 74 80            [12] 1125 	mov	a,#0x80
      000272 C0 E0            [24] 1126 	push	acc
      000274 12r00r00         [24] 1127 	lcall	_printf
      000277 15 81            [12] 1128 	dec	sp
      000279 15 81            [12] 1129 	dec	sp
      00027B 15 81            [12] 1130 	dec	sp
                                   1131 ;	main.c:167: do
      00027D                       1132 00106$:
                                   1133 ;	main.c:169: num1= get_num1();
      00027D 12r01r75         [24] 1134 	lcall	_get_num1
                                   1135 ;	main.c:170: if ((buffer0 = malloc(num1)) == 0)
      000280 85 82*0F         [24] 1136 	mov	_main_sloc8_1_0,dpl
      000283 85 83*10         [24] 1137 	mov  (_main_sloc8_1_0 + 1),dph
      000286 12r00r00         [24] 1138 	lcall	_malloc
      000289 AC 82            [24] 1139 	mov	r4,dpl
      00028B AD 83            [24] 1140 	mov	r5,dph
      00028D EC               [12] 1141 	mov	a,r4
      00028E 4D               [12] 1142 	orl	a,r5
      00028F 70 17            [24] 1143 	jnz	00102$
                                   1144 ;	main.c:173: printf_tiny("buffer 0 creation is failed\n\r");
      000291 C0 05            [24] 1145 	push	ar5
      000293 C0 04            [24] 1146 	push	ar4
      000295 74r99            [12] 1147 	mov	a,#___str_4
      000297 C0 E0            [24] 1148 	push	acc
      000299 74s00            [12] 1149 	mov	a,#(___str_4 >> 8)
      00029B C0 E0            [24] 1150 	push	acc
      00029D 12r00r00         [24] 1151 	lcall	_printf_tiny
      0002A0 15 81            [12] 1152 	dec	sp
      0002A2 15 81            [12] 1153 	dec	sp
      0002A4 D0 04            [24] 1154 	pop	ar4
      0002A6 D0 05            [24] 1155 	pop	ar5
      0002A8                       1156 00102$:
                                   1157 ;	main.c:177: if ((buffer1 = malloc(num1)) == 0)
      0002A8 85*0F 82         [24] 1158 	mov	dpl,_main_sloc8_1_0
      0002AB 85*10 83         [24] 1159 	mov	dph,(_main_sloc8_1_0 + 1)
      0002AE C0 05            [24] 1160 	push	ar5
      0002B0 C0 04            [24] 1161 	push	ar4
      0002B2 12r00r00         [24] 1162 	lcall	_malloc
      0002B5 AA 82            [24] 1163 	mov	r2,dpl
      0002B7 AB 83            [24] 1164 	mov	r3,dph
      0002B9 D0 04            [24] 1165 	pop	ar4
      0002BB D0 05            [24] 1166 	pop	ar5
      0002BD 90r00r1E         [24] 1167 	mov	dptr,#_main_buffer1_65536_69
      0002C0 EA               [12] 1168 	mov	a,r2
      0002C1 F0               [24] 1169 	movx	@dptr,a
      0002C2 EB               [12] 1170 	mov	a,r3
      0002C3 A3               [24] 1171 	inc	dptr
      0002C4 F0               [24] 1172 	movx	@dptr,a
      0002C5 EA               [12] 1173 	mov	a,r2
      0002C6 4B               [12] 1174 	orl	a,r3
      0002C7 70 3E            [24] 1175 	jnz	00107$
                                   1176 ;	main.c:179: printf_tiny("buffer 1 creation is failed\n\r");
      0002C9 C0 05            [24] 1177 	push	ar5
      0002CB C0 04            [24] 1178 	push	ar4
      0002CD C0 03            [24] 1179 	push	ar3
      0002CF C0 02            [24] 1180 	push	ar2
      0002D1 74rB7            [12] 1181 	mov	a,#___str_5
      0002D3 C0 E0            [24] 1182 	push	acc
      0002D5 74s00            [12] 1183 	mov	a,#(___str_5 >> 8)
      0002D7 C0 E0            [24] 1184 	push	acc
      0002D9 12r00r00         [24] 1185 	lcall	_printf_tiny
      0002DC 15 81            [12] 1186 	dec	sp
      0002DE 15 81            [12] 1187 	dec	sp
      0002E0 D0 02            [24] 1188 	pop	ar2
      0002E2 D0 03            [24] 1189 	pop	ar3
      0002E4 D0 04            [24] 1190 	pop	ar4
      0002E6 D0 05            [24] 1191 	pop	ar5
                                   1192 ;	main.c:181: free (buffer0);
      0002E8 8C 00            [24] 1193 	mov	ar0,r4
      0002EA 8D 01            [24] 1194 	mov	ar1,r5
      0002EC 7F 00            [12] 1195 	mov	r7,#0x00
      0002EE 88 82            [24] 1196 	mov	dpl,r0
      0002F0 89 83            [24] 1197 	mov	dph,r1
      0002F2 8F F0            [24] 1198 	mov	b,r7
      0002F4 C0 05            [24] 1199 	push	ar5
      0002F6 C0 04            [24] 1200 	push	ar4
      0002F8 C0 03            [24] 1201 	push	ar3
      0002FA C0 02            [24] 1202 	push	ar2
      0002FC 12r00r00         [24] 1203 	lcall	_free
      0002FF D0 02            [24] 1204 	pop	ar2
      000301 D0 03            [24] 1205 	pop	ar3
      000303 D0 04            [24] 1206 	pop	ar4
      000305 D0 05            [24] 1207 	pop	ar5
                                   1208 ;	main.c:399: counter=0;
                                   1209 ;	main.c:182: continue;
      000307                       1210 00107$:
                                   1211 ;	main.c:185: } while ((buffer0 == 0) || (buffer1 == 0));
      000307 EC               [12] 1212 	mov	a,r4
      000308 4D               [12] 1213 	orl	a,r5
      000309 70 03            [24] 1214 	jnz	00353$
      00030B 02r02r7D         [24] 1215 	ljmp	00106$
      00030E                       1216 00353$:
      00030E EA               [12] 1217 	mov	a,r2
      00030F 4B               [12] 1218 	orl	a,r3
      000310 70 03            [24] 1219 	jnz	00354$
      000312 02r02r7D         [24] 1220 	ljmp	00106$
      000315                       1221 00354$:
                                   1222 ;	main.c:187: buffer0_temper = (uint16_t)buffer0;
      000315 8C 00            [24] 1223 	mov	ar0,r4
      000317 8D 01            [24] 1224 	mov	ar1,r5
      000319 88*0D            [24] 1225 	mov	_main_sloc7_1_0,r0
      00031B 89*0E            [24] 1226 	mov	(_main_sloc7_1_0 + 1),r1
                                   1227 ;	main.c:188: buffer1_temper = (uint16_t)buffer1;
                                   1228 ;	main.c:189: printf_tiny("Start Address of buffer0 = 0x%x\n\r",buffer0_temper);
      00031D C0 05            [24] 1229 	push	ar5
      00031F C0 04            [24] 1230 	push	ar4
      000321 C0 03            [24] 1231 	push	ar3
      000323 C0 02            [24] 1232 	push	ar2
      000325 C0*0D            [24] 1233 	push	_main_sloc7_1_0
      000327 C0*0E            [24] 1234 	push	(_main_sloc7_1_0 + 1)
      000329 74rD5            [12] 1235 	mov	a,#___str_6
      00032B C0 E0            [24] 1236 	push	acc
      00032D 74s00            [12] 1237 	mov	a,#(___str_6 >> 8)
      00032F C0 E0            [24] 1238 	push	acc
      000331 12r00r00         [24] 1239 	lcall	_printf_tiny
      000334 E5 81            [12] 1240 	mov	a,sp
      000336 24 FC            [12] 1241 	add	a,#0xfc
      000338 F5 81            [12] 1242 	mov	sp,a
      00033A D0 02            [24] 1243 	pop	ar2
      00033C D0 03            [24] 1244 	pop	ar3
                                   1245 ;	main.c:190: printf_tiny("Start Address of buffer1 = 0x%x\n\r",buffer1_temper);
      00033E C0 03            [24] 1246 	push	ar3
      000340 C0 02            [24] 1247 	push	ar2
      000342 C0 02            [24] 1248 	push	ar2
      000344 C0 03            [24] 1249 	push	ar3
      000346 74rF7            [12] 1250 	mov	a,#___str_7
      000348 C0 E0            [24] 1251 	push	acc
      00034A 74s00            [12] 1252 	mov	a,#(___str_7 >> 8)
      00034C C0 E0            [24] 1253 	push	acc
      00034E 12r00r00         [24] 1254 	lcall	_printf_tiny
      000351 E5 81            [12] 1255 	mov	a,sp
      000353 24 FC            [12] 1256 	add	a,#0xfc
      000355 F5 81            [12] 1257 	mov	sp,a
                                   1258 ;	main.c:191: printf_tiny("Buffer_0 and Buffer_1 successfully created\n\r");
      000357 74r19            [12] 1259 	mov	a,#___str_8
      000359 C0 E0            [24] 1260 	push	acc
      00035B 74s01            [12] 1261 	mov	a,#(___str_8 >> 8)
      00035D C0 E0            [24] 1262 	push	acc
      00035F 12r00r00         [24] 1263 	lcall	_printf_tiny
      000362 15 81            [12] 1264 	dec	sp
      000364 15 81            [12] 1265 	dec	sp
                                   1266 ;	main.c:192: printf_tiny("\n\r OPTIONS TO CHOOSE \n\r");
      000366 74r46            [12] 1267 	mov	a,#___str_9
      000368 C0 E0            [24] 1268 	push	acc
      00036A 74s01            [12] 1269 	mov	a,#(___str_9 >> 8)
      00036C C0 E0            [24] 1270 	push	acc
      00036E 12r00r00         [24] 1271 	lcall	_printf_tiny
      000371 15 81            [12] 1272 	dec	sp
      000373 15 81            [12] 1273 	dec	sp
                                   1274 ;	main.c:193: printf_tiny("You can enter characters to be stored in buffer 0\n\r");
      000375 74r5E            [12] 1275 	mov	a,#___str_10
      000377 C0 E0            [24] 1276 	push	acc
      000379 74s01            [12] 1277 	mov	a,#(___str_10 >> 8)
      00037B C0 E0            [24] 1278 	push	acc
      00037D 12r00r00         [24] 1279 	lcall	_printf_tiny
      000380 15 81            [12] 1280 	dec	sp
      000382 15 81            [12] 1281 	dec	sp
                                   1282 ;	main.c:194: printf_tiny("Enter + to create a new buffer of size between 20 and 400 bytes\n\r");
      000384 74r92            [12] 1283 	mov	a,#___str_11
      000386 C0 E0            [24] 1284 	push	acc
      000388 74s01            [12] 1285 	mov	a,#(___str_11 >> 8)
      00038A C0 E0            [24] 1286 	push	acc
      00038C 12r00r00         [24] 1287 	lcall	_printf_tiny
      00038F 15 81            [12] 1288 	dec	sp
      000391 15 81            [12] 1289 	dec	sp
                                   1290 ;	main.c:195: printf_tiny("Enter - to delete a buffer.\n\r");
      000393 74rD4            [12] 1291 	mov	a,#___str_12
      000395 C0 E0            [24] 1292 	push	acc
      000397 74s01            [12] 1293 	mov	a,#(___str_12 >> 8)
      000399 C0 E0            [24] 1294 	push	acc
      00039B 12r00r00         [24] 1295 	lcall	_printf_tiny
      00039E 15 81            [12] 1296 	dec	sp
      0003A0 15 81            [12] 1297 	dec	sp
                                   1298 ;	main.c:196: printf_tiny("Enter ? to generate a heap report.\n\r");
      0003A2 74rF2            [12] 1299 	mov	a,#___str_13
      0003A4 C0 E0            [24] 1300 	push	acc
      0003A6 74s01            [12] 1301 	mov	a,#(___str_13 >> 8)
      0003A8 C0 E0            [24] 1302 	push	acc
      0003AA 12r00r00         [24] 1303 	lcall	_printf_tiny
      0003AD 15 81            [12] 1304 	dec	sp
      0003AF 15 81            [12] 1305 	dec	sp
                                   1306 ;	main.c:197: printf_tiny("Enter = to display current contents of buffer 0.\n\r");
      0003B1 74r17            [12] 1307 	mov	a,#___str_14
      0003B3 C0 E0            [24] 1308 	push	acc
      0003B5 74s02            [12] 1309 	mov	a,#(___str_14 >> 8)
      0003B7 C0 E0            [24] 1310 	push	acc
      0003B9 12r00r00         [24] 1311 	lcall	_printf_tiny
      0003BC 15 81            [12] 1312 	dec	sp
      0003BE 15 81            [12] 1313 	dec	sp
                                   1314 ;	main.c:198: printf_tiny("Enter @ to free all buffers and start program again.\n\r");
      0003C0 74r4A            [12] 1315 	mov	a,#___str_15
      0003C2 C0 E0            [24] 1316 	push	acc
      0003C4 74s02            [12] 1317 	mov	a,#(___str_15 >> 8)
      0003C6 C0 E0            [24] 1318 	push	acc
      0003C8 12r00r00         [24] 1319 	lcall	_printf_tiny
      0003CB 15 81            [12] 1320 	dec	sp
      0003CD 15 81            [12] 1321 	dec	sp
                                   1322 ;	main.c:199: printf_tiny("\n\r****************************THANK YOU****************************\n\r");
      0003CF 74r81            [12] 1323 	mov	a,#___str_16
      0003D1 C0 E0            [24] 1324 	push	acc
      0003D3 74s02            [12] 1325 	mov	a,#(___str_16 >> 8)
      0003D5 C0 E0            [24] 1326 	push	acc
      0003D7 12r00r00         [24] 1327 	lcall	_printf_tiny
      0003DA 15 81            [12] 1328 	dec	sp
      0003DC 15 81            [12] 1329 	dec	sp
      0003DE D0 02            [24] 1330 	pop	ar2
      0003E0 D0 03            [24] 1331 	pop	ar3
      0003E2 D0 04            [24] 1332 	pop	ar4
      0003E4 D0 05            [24] 1333 	pop	ar5
                                   1334 ;	main.c:202: while (1)
      0003E6 E4               [12] 1335 	clr	a
      0003E7 F5*00            [12] 1336 	mov	_main_sloc0_1_0,a
      0003E9 F5*01            [12] 1337 	mov	(_main_sloc0_1_0 + 1),a
      0003EB 75*02 02         [24] 1338 	mov	_main_sloc1_1_0,#0x02
                                   1339 ;	1-genFromRTrack replaced	mov	(_main_sloc1_1_0 + 1),#0x00
      0003EE F5*03            [12] 1340 	mov	(_main_sloc1_1_0 + 1),a
      0003F0 F5*04            [12] 1341 	mov	_main_sloc2_1_0,a
      0003F2 F5*05            [12] 1342 	mov	(_main_sloc2_1_0 + 1),a
      0003F4                       1343 00172$:
                                   1344 ;	main.c:204: input_symbol = getchar();
      0003F4 C0 02            [24] 1345 	push	ar2
      0003F6 C0 03            [24] 1346 	push	ar3
      0003F8 C0 05            [24] 1347 	push	ar5
      0003FA C0 04            [24] 1348 	push	ar4
      0003FC 12r00r39         [24] 1349 	lcall	_getchar
      0003FF AA 82            [24] 1350 	mov	r2,dpl
      000401 AB 83            [24] 1351 	mov	r3,dph
      000403 D0 04            [24] 1352 	pop	ar4
      000405 D0 05            [24] 1353 	pop	ar5
      000407 8A*06            [24] 1354 	mov	_main_sloc3_1_0,r2
                                   1355 ;	main.c:205: total_symbol++;
      000409 05*00            [12] 1356 	inc	_main_sloc0_1_0
      00040B E4               [12] 1357 	clr	a
      00040C B5*00 02         [24] 1358 	cjne	a,_main_sloc0_1_0,00355$
      00040F 05*01            [12] 1359 	inc	(_main_sloc0_1_0 + 1)
      000411                       1360 00355$:
                                   1361 ;	main.c:206: putchar(input_symbol);
      000411 85*06*07         [24] 1362 	mov	_main_sloc4_1_0,_main_sloc3_1_0
      000414 75*08 00         [24] 1363 	mov	(_main_sloc4_1_0 + 1),#0x00
      000417 85*07 82         [24] 1364 	mov	dpl,_main_sloc4_1_0
      00041A 85*08 83         [24] 1365 	mov	dph,(_main_sloc4_1_0 + 1)
      00041D C0 05            [24] 1366 	push	ar5
      00041F C0 04            [24] 1367 	push	ar4
      000421 C0 03            [24] 1368 	push	ar3
      000423 C0 02            [24] 1369 	push	ar2
      000425 12r00r1A         [24] 1370 	lcall	_putchar
                                   1371 ;	main.c:207: printf_tiny("\n\r");
      000428 74rC7            [12] 1372 	mov	a,#___str_17
      00042A C0 E0            [24] 1373 	push	acc
      00042C 74s02            [12] 1374 	mov	a,#(___str_17 >> 8)
      00042E C0 E0            [24] 1375 	push	acc
      000430 12r00r00         [24] 1376 	lcall	_printf_tiny
      000433 15 81            [12] 1377 	dec	sp
      000435 15 81            [12] 1378 	dec	sp
      000437 D0 02            [24] 1379 	pop	ar2
      000439 D0 03            [24] 1380 	pop	ar3
      00043B D0 04            [24] 1381 	pop	ar4
      00043D D0 05            [24] 1382 	pop	ar5
                                   1383 ;	main.c:209: if(((input_symbol)>='A') && (((input_symbol)<='Z') && (counter<num1)))
      00043F C3               [12] 1384 	clr	c
      000440 E5*06            [12] 1385 	mov	a,_main_sloc3_1_0
      000442 94 41            [12] 1386 	subb	a,#0x41
      000444 D0 03            [24] 1387 	pop	ar3
      000446 D0 02            [24] 1388 	pop	ar2
      000448 40 64            [24] 1389 	jc	00167$
      00044A E5*06            [12] 1390 	mov	a,_main_sloc3_1_0
      00044C 24 A5            [12] 1391 	add	a,#0xff - 0x5a
      00044E 40 5E            [24] 1392 	jc	00167$
      000450 C0 02            [24] 1393 	push	ar2
      000452 C0 03            [24] 1394 	push	ar3
      000454 90r00r1C         [24] 1395 	mov	dptr,#_main_counter_65536_69
      000457 E0               [24] 1396 	movx	a,@dptr
      000458 F5*09            [12] 1397 	mov	_main_sloc5_1_0,a
      00045A A3               [24] 1398 	inc	dptr
      00045B E0               [24] 1399 	movx	a,@dptr
      00045C F5*0A            [12] 1400 	mov	(_main_sloc5_1_0 + 1),a
      00045E AA*0F            [24] 1401 	mov	r2,_main_sloc8_1_0
      000460 AB*10            [24] 1402 	mov	r3,(_main_sloc8_1_0 + 1)
      000462 C3               [12] 1403 	clr	c
      000463 E5*09            [12] 1404 	mov	a,_main_sloc5_1_0
      000465 9A               [12] 1405 	subb	a,r2
      000466 E5*0A            [12] 1406 	mov	a,(_main_sloc5_1_0 + 1)
      000468 9B               [12] 1407 	subb	a,r3
      000469 D0 03            [24] 1408 	pop	ar3
      00046B D0 02            [24] 1409 	pop	ar2
      00046D 50 3F            [24] 1410 	jnc	00167$
                                   1411 ;	main.c:211: DEBUGPORT(0);
      00046F 75 82 00         [24] 1412 	mov	dpl,#0x00
      000472 C0 05            [24] 1413 	push	ar5
      000474 C0 04            [24] 1414 	push	ar4
      000476 C0 03            [24] 1415 	push	ar3
      000478 C0 02            [24] 1416 	push	ar2
      00047A 12r00r07         [24] 1417 	lcall	_dataout
      00047D D0 02            [24] 1418 	pop	ar2
      00047F D0 03            [24] 1419 	pop	ar3
      000481 D0 04            [24] 1420 	pop	ar4
      000483 D0 05            [24] 1421 	pop	ar5
                                   1422 ;	main.c:212: symbol_stored++;
      000485 90r00r1A         [24] 1423 	mov	dptr,#_main_symbol_stored_65536_69
      000488 E0               [24] 1424 	movx	a,@dptr
      000489 24 01            [12] 1425 	add	a,#0x01
      00048B F0               [24] 1426 	movx	@dptr,a
      00048C A3               [24] 1427 	inc	dptr
      00048D E0               [24] 1428 	movx	a,@dptr
      00048E 34 00            [12] 1429 	addc	a,#0x00
      000490 F0               [24] 1430 	movx	@dptr,a
                                   1431 ;	main.c:213: *((buffer0)+counter)=input_symbol;
      000491 E5*09            [12] 1432 	mov	a,_main_sloc5_1_0
      000493 2C               [12] 1433 	add	a,r4
      000494 F5 82            [12] 1434 	mov	dpl,a
      000496 E5*0A            [12] 1435 	mov	a,(_main_sloc5_1_0 + 1)
      000498 3D               [12] 1436 	addc	a,r5
      000499 F5 83            [12] 1437 	mov	dph,a
      00049B E5*06            [12] 1438 	mov	a,_main_sloc3_1_0
      00049D F0               [24] 1439 	movx	@dptr,a
                                   1440 ;	main.c:214: counter++;
      00049E 90r00r1C         [24] 1441 	mov	dptr,#_main_counter_65536_69
      0004A1 74 01            [12] 1442 	mov	a,#0x01
      0004A3 25*09            [12] 1443 	add	a,_main_sloc5_1_0
      0004A5 F0               [24] 1444 	movx	@dptr,a
      0004A6 E4               [12] 1445 	clr	a
      0004A7 35*0A            [12] 1446 	addc	a,(_main_sloc5_1_0 + 1)
      0004A9 A3               [24] 1447 	inc	dptr
      0004AA F0               [24] 1448 	movx	@dptr,a
      0004AB 02r03rF4         [24] 1449 	ljmp	00172$
      0004AE                       1450 00167$:
                                   1451 ;	main.c:218: else if ((counter == num1) && (input_symbol != '+') && (input_symbol != '-') && (input_symbol != '?') && (input_symbol != '=') && (input_symbol != '@'))
      0004AE C0 02            [24] 1452 	push	ar2
      0004B0 C0 03            [24] 1453 	push	ar3
      0004B2 90r00r1C         [24] 1454 	mov	dptr,#_main_counter_65536_69
      0004B5 E0               [24] 1455 	movx	a,@dptr
      0004B6 FA               [12] 1456 	mov	r2,a
      0004B7 A3               [24] 1457 	inc	dptr
      0004B8 E0               [24] 1458 	movx	a,@dptr
      0004B9 FB               [12] 1459 	mov	r3,a
      0004BA 85*0F*09         [24] 1460 	mov	_main_sloc5_1_0,_main_sloc8_1_0
      0004BD 85*10*0A         [24] 1461 	mov	(_main_sloc5_1_0 + 1),(_main_sloc8_1_0 + 1)
      0004C0 EA               [12] 1462 	mov	a,r2
      0004C1 B5*09 06         [24] 1463 	cjne	a,_main_sloc5_1_0,00359$
      0004C4 EB               [12] 1464 	mov	a,r3
      0004C5 B5*0A 02         [24] 1465 	cjne	a,(_main_sloc5_1_0 + 1),00359$
      0004C8 80 06            [24] 1466 	sjmp	00360$
      0004CA                       1467 00359$:
      0004CA D0 03            [24] 1468 	pop	ar3
      0004CC D0 02            [24] 1469 	pop	ar2
      0004CE 80 52            [24] 1470 	sjmp	00159$
      0004D0                       1471 00360$:
      0004D0 D0 03            [24] 1472 	pop	ar3
      0004D2 D0 02            [24] 1473 	pop	ar2
      0004D4 74 2B            [12] 1474 	mov	a,#0x2b
      0004D6 B5*06 02         [24] 1475 	cjne	a,_main_sloc3_1_0,00361$
      0004D9 80 47            [24] 1476 	sjmp	00159$
      0004DB                       1477 00361$:
      0004DB 74 2D            [12] 1478 	mov	a,#0x2d
      0004DD B5*06 02         [24] 1479 	cjne	a,_main_sloc3_1_0,00362$
      0004E0 80 40            [24] 1480 	sjmp	00159$
      0004E2                       1481 00362$:
      0004E2 74 3F            [12] 1482 	mov	a,#0x3f
      0004E4 B5*06 02         [24] 1483 	cjne	a,_main_sloc3_1_0,00363$
      0004E7 80 39            [24] 1484 	sjmp	00159$
      0004E9                       1485 00363$:
      0004E9 74 3D            [12] 1486 	mov	a,#0x3d
      0004EB B5*06 02         [24] 1487 	cjne	a,_main_sloc3_1_0,00364$
      0004EE 80 32            [24] 1488 	sjmp	00159$
      0004F0                       1489 00364$:
      0004F0 74 40            [12] 1490 	mov	a,#0x40
      0004F2 B5*06 02         [24] 1491 	cjne	a,_main_sloc3_1_0,00365$
      0004F5 80 2B            [24] 1492 	sjmp	00159$
      0004F7                       1493 00365$:
                                   1494 ;	main.c:220: putchar(input_symbol);
      0004F7 85*07 82         [24] 1495 	mov	dpl,_main_sloc4_1_0
      0004FA 85*08 83         [24] 1496 	mov	dph,(_main_sloc4_1_0 + 1)
      0004FD C0 05            [24] 1497 	push	ar5
      0004FF C0 04            [24] 1498 	push	ar4
      000501 C0 03            [24] 1499 	push	ar3
      000503 C0 02            [24] 1500 	push	ar2
      000505 12r00r1A         [24] 1501 	lcall	_putchar
                                   1502 ;	main.c:221: printf_tiny("\n\rbuffer 0 is full.\n\r");
      000508 74rCA            [12] 1503 	mov	a,#___str_18
      00050A C0 E0            [24] 1504 	push	acc
      00050C 74s02            [12] 1505 	mov	a,#(___str_18 >> 8)
      00050E C0 E0            [24] 1506 	push	acc
      000510 12r00r00         [24] 1507 	lcall	_printf_tiny
      000513 15 81            [12] 1508 	dec	sp
      000515 15 81            [12] 1509 	dec	sp
      000517 D0 02            [24] 1510 	pop	ar2
      000519 D0 03            [24] 1511 	pop	ar3
      00051B D0 04            [24] 1512 	pop	ar4
      00051D D0 05            [24] 1513 	pop	ar5
      00051F 02r03rF4         [24] 1514 	ljmp	00172$
      000522                       1515 00159$:
                                   1516 ;	main.c:223: else if(input_symbol == '+')
      000522 74 2B            [12] 1517 	mov	a,#0x2b
      000524 B5*06 02         [24] 1518 	cjne	a,_main_sloc3_1_0,00366$
      000527 80 03            [24] 1519 	sjmp	00367$
      000529                       1520 00366$:
      000529 02r06rFE         [24] 1521 	ljmp	00156$
      00052C                       1522 00367$:
                                   1523 ;	main.c:225: DEBUGPORT(1);
      00052C C0 02            [24] 1524 	push	ar2
      00052E C0 03            [24] 1525 	push	ar3
      000530 75 82 01         [24] 1526 	mov	dpl,#0x01
      000533 C0 05            [24] 1527 	push	ar5
      000535 C0 04            [24] 1528 	push	ar4
      000537 C0 03            [24] 1529 	push	ar3
      000539 C0 02            [24] 1530 	push	ar2
      00053B 12r00r07         [24] 1531 	lcall	_dataout
                                   1532 ;	main.c:226: printf_tiny("\n\r Creates a new buffer \n\r");
      00053E 74rE0            [12] 1533 	mov	a,#___str_19
      000540 C0 E0            [24] 1534 	push	acc
      000542 74s02            [12] 1535 	mov	a,#(___str_19 >> 8)
      000544 C0 E0            [24] 1536 	push	acc
      000546 12r00r00         [24] 1537 	lcall	_printf_tiny
      000549 15 81            [12] 1538 	dec	sp
      00054B 15 81            [12] 1539 	dec	sp
                                   1540 ;	main.c:227: printf_tiny("\n\rEnter the new buffer size between 20 and 400\n\r");
      00054D 74rFB            [12] 1541 	mov	a,#___str_20
      00054F C0 E0            [24] 1542 	push	acc
      000551 74s02            [12] 1543 	mov	a,#(___str_20 >> 8)
      000553 C0 E0            [24] 1544 	push	acc
      000555 12r00r00         [24] 1545 	lcall	_printf_tiny
      000558 15 81            [12] 1546 	dec	sp
      00055A 15 81            [12] 1547 	dec	sp
      00055C D0 02            [24] 1548 	pop	ar2
      00055E D0 03            [24] 1549 	pop	ar3
                                   1550 ;	main.c:229: num2=get_input();
      000560 12r00r47         [24] 1551 	lcall	_get_input
      000563 AA 82            [24] 1552 	mov	r2,dpl
      000565 AB 83            [24] 1553 	mov	r3,dph
      000567 D0 04            [24] 1554 	pop	ar4
      000569 D0 05            [24] 1555 	pop	ar5
      00056B 8A*07            [24] 1556 	mov	_main_sloc4_1_0,r2
      00056D 8B*08            [24] 1557 	mov	(_main_sloc4_1_0 + 1),r3
      00056F 90r00rD8         [24] 1558 	mov	dptr,#_main_num2_65536_69
      000572 E5*07            [12] 1559 	mov	a,_main_sloc4_1_0
      000574 F0               [24] 1560 	movx	@dptr,a
      000575 E5*08            [12] 1561 	mov	a,(_main_sloc4_1_0 + 1)
      000577 A3               [24] 1562 	inc	dptr
      000578 F0               [24] 1563 	movx	@dptr,a
                                   1564 ;	main.c:232: if (num2 < 20 || num2 > 400)
      000579 C3               [12] 1565 	clr	c
      00057A E5*07            [12] 1566 	mov	a,_main_sloc4_1_0
      00057C 94 14            [12] 1567 	subb	a,#0x14
      00057E E5*08            [12] 1568 	mov	a,(_main_sloc4_1_0 + 1)
      000580 64 80            [12] 1569 	xrl	a,#0x80
      000582 94 80            [12] 1570 	subb	a,#0x80
      000584 D0 03            [24] 1571 	pop	ar3
      000586 D0 02            [24] 1572 	pop	ar2
      000588 40 10            [24] 1573 	jc	00109$
      00058A 74 90            [12] 1574 	mov	a,#0x90
      00058C 95*07            [12] 1575 	subb	a,_main_sloc4_1_0
      00058E 74 81            [12] 1576 	mov	a,#(0x01 ^ 0x80)
      000590 85*08 F0         [24] 1577 	mov	b,(_main_sloc4_1_0 + 1)
      000593 63 F0 80         [24] 1578 	xrl	b,#0x80
      000596 95 F0            [12] 1579 	subb	a,b
      000598 50 07            [24] 1580 	jnc	00110$
      00059A                       1581 00109$:
                                   1582 ;	main.c:235: num2 = 0;
      00059A 90r00rD8         [24] 1583 	mov	dptr,#_main_num2_65536_69
      00059D E4               [12] 1584 	clr	a
      00059E F0               [24] 1585 	movx	@dptr,a
      00059F A3               [24] 1586 	inc	dptr
      0005A0 F0               [24] 1587 	movx	@dptr,a
      0005A1                       1588 00110$:
                                   1589 ;	main.c:239: buffern[i] = malloc(num2);
      0005A1 C0 02            [24] 1590 	push	ar2
      0005A3 C0 03            [24] 1591 	push	ar3
      0005A5 E5*04            [12] 1592 	mov	a,_main_sloc2_1_0
      0005A7 25*04            [12] 1593 	add	a,_main_sloc2_1_0
      0005A9 FA               [12] 1594 	mov	r2,a
      0005AA E5*05            [12] 1595 	mov	a,(_main_sloc2_1_0 + 1)
      0005AC 33               [12] 1596 	rlc	a
      0005AD FB               [12] 1597 	mov	r3,a
      0005AE EA               [12] 1598 	mov	a,r2
      0005AF 24r20            [12] 1599 	add	a,#_main_buffern_65536_69
      0005B1 F5*0B            [12] 1600 	mov	_main_sloc6_1_0,a
      0005B3 EB               [12] 1601 	mov	a,r3
      0005B4 34s00            [12] 1602 	addc	a,#(_main_buffern_65536_69 >> 8)
      0005B6 F5*0C            [12] 1603 	mov	(_main_sloc6_1_0 + 1),a
      0005B8 90r00rD8         [24] 1604 	mov	dptr,#_main_num2_65536_69
      0005BB E0               [24] 1605 	movx	a,@dptr
      0005BC F5*07            [12] 1606 	mov	_main_sloc4_1_0,a
      0005BE A3               [24] 1607 	inc	dptr
      0005BF E0               [24] 1608 	movx	a,@dptr
      0005C0 F5*08            [12] 1609 	mov	(_main_sloc4_1_0 + 1),a
      0005C2 85*07 82         [24] 1610 	mov	dpl,_main_sloc4_1_0
      0005C5 85*08 83         [24] 1611 	mov	dph,(_main_sloc4_1_0 + 1)
      0005C8 C0 05            [24] 1612 	push	ar5
      0005CA C0 04            [24] 1613 	push	ar4
      0005CC 12r00r00         [24] 1614 	lcall	_malloc
      0005CF AA 82            [24] 1615 	mov	r2,dpl
      0005D1 AB 83            [24] 1616 	mov	r3,dph
      0005D3 D0 04            [24] 1617 	pop	ar4
      0005D5 D0 05            [24] 1618 	pop	ar5
      0005D7 85*0B 82         [24] 1619 	mov	dpl,_main_sloc6_1_0
      0005DA 85*0C 83         [24] 1620 	mov	dph,(_main_sloc6_1_0 + 1)
      0005DD EA               [12] 1621 	mov	a,r2
      0005DE F0               [24] 1622 	movx	@dptr,a
      0005DF EB               [12] 1623 	mov	a,r3
      0005E0 A3               [24] 1624 	inc	dptr
      0005E1 F0               [24] 1625 	movx	@dptr,a
                                   1626 ;	main.c:242: if (buffern[i] == NULL)
      0005E2 EA               [12] 1627 	mov	a,r2
      0005E3 4B               [12] 1628 	orl	a,r3
      0005E4 D0 03            [24] 1629 	pop	ar3
      0005E6 D0 02            [24] 1630 	pop	ar2
      0005E8 70 39            [24] 1631 	jnz	00113$
                                   1632 ;	main.c:245: printf_tiny("\n\rMemory Allocation for Buffer_%d Failed\n\rPress '+' to Try again\n\r", i+2);
      0005EA C0 02            [24] 1633 	push	ar2
      0005EC C0 03            [24] 1634 	push	ar3
      0005EE 74 02            [12] 1635 	mov	a,#0x02
      0005F0 25*04            [12] 1636 	add	a,_main_sloc2_1_0
      0005F2 FA               [12] 1637 	mov	r2,a
      0005F3 E4               [12] 1638 	clr	a
      0005F4 35*05            [12] 1639 	addc	a,(_main_sloc2_1_0 + 1)
      0005F6 FB               [12] 1640 	mov	r3,a
      0005F7 C0 05            [24] 1641 	push	ar5
      0005F9 C0 04            [24] 1642 	push	ar4
      0005FB C0 03            [24] 1643 	push	ar3
      0005FD C0 02            [24] 1644 	push	ar2
      0005FF C0 02            [24] 1645 	push	ar2
      000601 C0 03            [24] 1646 	push	ar3
      000603 74r2C            [12] 1647 	mov	a,#___str_21
      000605 C0 E0            [24] 1648 	push	acc
      000607 74s03            [12] 1649 	mov	a,#(___str_21 >> 8)
      000609 C0 E0            [24] 1650 	push	acc
      00060B 12r00r00         [24] 1651 	lcall	_printf_tiny
      00060E E5 81            [12] 1652 	mov	a,sp
      000610 24 FC            [12] 1653 	add	a,#0xfc
      000612 F5 81            [12] 1654 	mov	sp,a
      000614 D0 02            [24] 1655 	pop	ar2
      000616 D0 03            [24] 1656 	pop	ar3
      000618 D0 04            [24] 1657 	pop	ar4
      00061A D0 05            [24] 1658 	pop	ar5
      00061C D0 03            [24] 1659 	pop	ar3
      00061E D0 02            [24] 1660 	pop	ar2
      000620 02r03rF4         [24] 1661 	ljmp	00172$
      000623                       1662 00113$:
                                   1663 ;	main.c:250: printf_tiny("\n\r Successful allocated memory for Buffer_%d\n\r",(i+2));
      000623 C0 02            [24] 1664 	push	ar2
      000625 C0 03            [24] 1665 	push	ar3
      000627 74 02            [12] 1666 	mov	a,#0x02
      000629 25*04            [12] 1667 	add	a,_main_sloc2_1_0
      00062B FA               [12] 1668 	mov	r2,a
      00062C E4               [12] 1669 	clr	a
      00062D 35*05            [12] 1670 	addc	a,(_main_sloc2_1_0 + 1)
      00062F FB               [12] 1671 	mov	r3,a
      000630 C0 05            [24] 1672 	push	ar5
      000632 C0 04            [24] 1673 	push	ar4
      000634 C0 03            [24] 1674 	push	ar3
      000636 C0 02            [24] 1675 	push	ar2
      000638 C0 02            [24] 1676 	push	ar2
      00063A C0 03            [24] 1677 	push	ar3
      00063C 74r6F            [12] 1678 	mov	a,#___str_22
      00063E C0 E0            [24] 1679 	push	acc
      000640 74s03            [12] 1680 	mov	a,#(___str_22 >> 8)
      000642 C0 E0            [24] 1681 	push	acc
      000644 12r00r00         [24] 1682 	lcall	_printf_tiny
      000647 E5 81            [12] 1683 	mov	a,sp
      000649 24 FC            [12] 1684 	add	a,#0xfc
      00064B F5 81            [12] 1685 	mov	sp,a
      00064D D0 02            [24] 1686 	pop	ar2
      00064F D0 03            [24] 1687 	pop	ar3
                                   1688 ;	main.c:251: printf_tiny("\n\rBuffer_%d has allocated a size of %d\n\r",(i+2),num2);
      000651 C0 03            [24] 1689 	push	ar3
      000653 C0 02            [24] 1690 	push	ar2
      000655 C0*07            [24] 1691 	push	_main_sloc4_1_0
      000657 C0*08            [24] 1692 	push	(_main_sloc4_1_0 + 1)
      000659 C0 02            [24] 1693 	push	ar2
      00065B C0 03            [24] 1694 	push	ar3
      00065D 74r9E            [12] 1695 	mov	a,#___str_23
      00065F C0 E0            [24] 1696 	push	acc
      000661 74s03            [12] 1697 	mov	a,#(___str_23 >> 8)
      000663 C0 E0            [24] 1698 	push	acc
      000665 12r00r00         [24] 1699 	lcall	_printf_tiny
      000668 E5 81            [12] 1700 	mov	a,sp
      00066A 24 FA            [12] 1701 	add	a,#0xfa
      00066C F5 81            [12] 1702 	mov	sp,a
      00066E D0 02            [24] 1703 	pop	ar2
      000670 D0 03            [24] 1704 	pop	ar3
      000672 D0 04            [24] 1705 	pop	ar4
      000674 D0 05            [24] 1706 	pop	ar5
                                   1707 ;	main.c:252: printf_tiny("\n\rStart Address of buffer_%d = 0x%x\n\r",(i+2),(uint16_t)(buffern[i+2]));
      000676 A9*04            [24] 1708 	mov	r1,_main_sloc2_1_0
      000678 09               [12] 1709 	inc	r1
      000679 09               [12] 1710 	inc	r1
      00067A C2 D5            [12] 1711 	clr	F0
      00067C 75 F0 02         [24] 1712 	mov	b,#0x02
      00067F E9               [12] 1713 	mov	a,r1
      000680 30 E7 04         [24] 1714 	jnb	acc.7,00371$
      000683 B2 D5            [12] 1715 	cpl	F0
      000685 F4               [12] 1716 	cpl	a
      000686 04               [12] 1717 	inc	a
      000687                       1718 00371$:
      000687 A4               [48] 1719 	mul	ab
      000688 30 D5 0A         [24] 1720 	jnb	F0,00372$
      00068B F4               [12] 1721 	cpl	a
      00068C 24 01            [12] 1722 	add	a,#0x01
      00068E C5 F0            [12] 1723 	xch	a,b
      000690 F4               [12] 1724 	cpl	a
      000691 34 00            [12] 1725 	addc	a,#0x00
      000693 C5 F0            [12] 1726 	xch	a,b
      000695                       1727 00372$:
      000695 24r20            [12] 1728 	add	a,#_main_buffern_65536_69
      000697 F5 82            [12] 1729 	mov	dpl,a
      000699 74s00            [12] 1730 	mov	a,#(_main_buffern_65536_69 >> 8)
      00069B 35 F0            [12] 1731 	addc	a,b
      00069D F5 83            [12] 1732 	mov	dph,a
      00069F E0               [24] 1733 	movx	a,@dptr
      0006A0 F8               [12] 1734 	mov	r0,a
      0006A1 A3               [24] 1735 	inc	dptr
      0006A2 E0               [24] 1736 	movx	a,@dptr
      0006A3 F9               [12] 1737 	mov	r1,a
      0006A4 C0 05            [24] 1738 	push	ar5
      0006A6 C0 04            [24] 1739 	push	ar4
      0006A8 C0 03            [24] 1740 	push	ar3
      0006AA C0 02            [24] 1741 	push	ar2
      0006AC C0 00            [24] 1742 	push	ar0
      0006AE C0 01            [24] 1743 	push	ar1
      0006B0 C0 02            [24] 1744 	push	ar2
      0006B2 C0 03            [24] 1745 	push	ar3
      0006B4 74rC7            [12] 1746 	mov	a,#___str_24
      0006B6 C0 E0            [24] 1747 	push	acc
      0006B8 74s03            [12] 1748 	mov	a,#(___str_24 >> 8)
      0006BA C0 E0            [24] 1749 	push	acc
      0006BC 12r00r00         [24] 1750 	lcall	_printf_tiny
      0006BF E5 81            [12] 1751 	mov	a,sp
      0006C1 24 FA            [12] 1752 	add	a,#0xfa
      0006C3 F5 81            [12] 1753 	mov	sp,a
      0006C5 D0 02            [24] 1754 	pop	ar2
      0006C7 D0 03            [24] 1755 	pop	ar3
      0006C9 D0 04            [24] 1756 	pop	ar4
      0006CB D0 05            [24] 1757 	pop	ar5
                                   1758 ;	main.c:255: buffer_size[j]=num2;
      0006CD E5*02            [12] 1759 	mov	a,_main_sloc1_1_0
      0006CF 25*02            [12] 1760 	add	a,_main_sloc1_1_0
      0006D1 FA               [12] 1761 	mov	r2,a
      0006D2 E5*03            [12] 1762 	mov	a,(_main_sloc1_1_0 + 1)
      0006D4 33               [12] 1763 	rlc	a
      0006D5 FB               [12] 1764 	mov	r3,a
      0006D6 EA               [12] 1765 	mov	a,r2
      0006D7 24r7A            [12] 1766 	add	a,#_main_buffer_size_65536_69
      0006D9 F5 82            [12] 1767 	mov	dpl,a
      0006DB EB               [12] 1768 	mov	a,r3
      0006DC 34s00            [12] 1769 	addc	a,#(_main_buffer_size_65536_69 >> 8)
      0006DE F5 83            [12] 1770 	mov	dph,a
      0006E0 E5*07            [12] 1771 	mov	a,_main_sloc4_1_0
      0006E2 F0               [24] 1772 	movx	@dptr,a
      0006E3 E5*08            [12] 1773 	mov	a,(_main_sloc4_1_0 + 1)
      0006E5 A3               [24] 1774 	inc	dptr
      0006E6 F0               [24] 1775 	movx	@dptr,a
                                   1776 ;	main.c:256: j++;
      0006E7 05*02            [12] 1777 	inc	_main_sloc1_1_0
      0006E9 E4               [12] 1778 	clr	a
      0006EA B5*02 02         [24] 1779 	cjne	a,_main_sloc1_1_0,00373$
      0006ED 05*03            [12] 1780 	inc	(_main_sloc1_1_0 + 1)
      0006EF                       1781 00373$:
                                   1782 ;	main.c:257: i++;
      0006EF 05*04            [12] 1783 	inc	_main_sloc2_1_0
      0006F1 E4               [12] 1784 	clr	a
      0006F2 B5*04 02         [24] 1785 	cjne	a,_main_sloc2_1_0,00374$
      0006F5 05*05            [12] 1786 	inc	(_main_sloc2_1_0 + 1)
      0006F7                       1787 00374$:
      0006F7 D0 03            [24] 1788 	pop	ar3
      0006F9 D0 02            [24] 1789 	pop	ar2
      0006FB 02r03rF4         [24] 1790 	ljmp	00172$
      0006FE                       1791 00156$:
                                   1792 ;	main.c:260: else if(input_symbol == '-')
      0006FE 74 2D            [12] 1793 	mov	a,#0x2d
      000700 B5*06 02         [24] 1794 	cjne	a,_main_sloc3_1_0,00375$
      000703 80 03            [24] 1795 	sjmp	00376$
      000705                       1796 00375$:
      000705 02r08rA1         [24] 1797 	ljmp	00153$
      000708                       1798 00376$:
                                   1799 ;	main.c:262: DEBUGPORT(2);
      000708 75 82 02         [24] 1800 	mov	dpl,#0x02
      00070B C0 05            [24] 1801 	push	ar5
      00070D C0 04            [24] 1802 	push	ar4
      00070F C0 03            [24] 1803 	push	ar3
      000711 C0 02            [24] 1804 	push	ar2
      000713 12r00r07         [24] 1805 	lcall	_dataout
                                   1806 ;	main.c:263: printf_tiny("\n\rEnter a valid buffer number\n\r");
      000716 74rED            [12] 1807 	mov	a,#___str_25
      000718 C0 E0            [24] 1808 	push	acc
      00071A 74s03            [12] 1809 	mov	a,#(___str_25 >> 8)
      00071C C0 E0            [24] 1810 	push	acc
      00071E 12r00r00         [24] 1811 	lcall	_printf_tiny
      000721 15 81            [12] 1812 	dec	sp
      000723 15 81            [12] 1813 	dec	sp
                                   1814 ;	main.c:266: deleted=get_input();
      000725 12r00r47         [24] 1815 	lcall	_get_input
      000728 A8 82            [24] 1816 	mov	r0,dpl
      00072A A9 83            [24] 1817 	mov	r1,dph
      00072C D0 02            [24] 1818 	pop	ar2
      00072E D0 03            [24] 1819 	pop	ar3
      000730 D0 04            [24] 1820 	pop	ar4
      000732 D0 05            [24] 1821 	pop	ar5
                                   1822 ;	main.c:268: if(deleted == 0)
      000734 E8               [12] 1823 	mov	a,r0
      000735 49               [12] 1824 	orl	a,r1
      000736 70 22            [24] 1825 	jnz	00123$
                                   1826 ;	main.c:270: printf_tiny("\n\rBuffer 0 cannot be deleted!\n\r");
      000738 C0 05            [24] 1827 	push	ar5
      00073A C0 04            [24] 1828 	push	ar4
      00073C C0 03            [24] 1829 	push	ar3
      00073E C0 02            [24] 1830 	push	ar2
      000740 74r0D            [12] 1831 	mov	a,#___str_26
      000742 C0 E0            [24] 1832 	push	acc
      000744 74s04            [12] 1833 	mov	a,#(___str_26 >> 8)
      000746 C0 E0            [24] 1834 	push	acc
      000748 12r00r00         [24] 1835 	lcall	_printf_tiny
      00074B 15 81            [12] 1836 	dec	sp
      00074D 15 81            [12] 1837 	dec	sp
      00074F D0 02            [24] 1838 	pop	ar2
      000751 D0 03            [24] 1839 	pop	ar3
      000753 D0 04            [24] 1840 	pop	ar4
      000755 D0 05            [24] 1841 	pop	ar5
      000757 02r03rF4         [24] 1842 	ljmp	00172$
      00075A                       1843 00123$:
                                   1844 ;	main.c:272: else if(deleted == 1)
      00075A B8 01 56         [24] 1845 	cjne	r0,#0x01,00120$
      00075D B9 00 53         [24] 1846 	cjne	r1,#0x00,00120$
                                   1847 ;	main.c:274: free(buffer1);
      000760 C0 02            [24] 1848 	push	ar2
      000762 C0 03            [24] 1849 	push	ar3
      000764 90r00r1E         [24] 1850 	mov	dptr,#_main_buffer1_65536_69
      000767 E0               [24] 1851 	movx	a,@dptr
      000768 FA               [12] 1852 	mov	r2,a
      000769 A3               [24] 1853 	inc	dptr
      00076A E0               [24] 1854 	movx	a,@dptr
      00076B FB               [12] 1855 	mov	r3,a
      00076C 7F 00            [12] 1856 	mov	r7,#0x00
      00076E 8A 82            [24] 1857 	mov	dpl,r2
      000770 8B 83            [24] 1858 	mov	dph,r3
      000772 8F F0            [24] 1859 	mov	b,r7
      000774 C0 05            [24] 1860 	push	ar5
      000776 C0 04            [24] 1861 	push	ar4
      000778 C0 03            [24] 1862 	push	ar3
      00077A C0 02            [24] 1863 	push	ar2
      00077C 12r00r00         [24] 1864 	lcall	_free
                                   1865 ;	main.c:275: printf_tiny("\n\rDeleting buffer 1\n\r");
      00077F 74r2D            [12] 1866 	mov	a,#___str_27
      000781 C0 E0            [24] 1867 	push	acc
      000783 74s04            [12] 1868 	mov	a,#(___str_27 >> 8)
      000785 C0 E0            [24] 1869 	push	acc
      000787 12r00r00         [24] 1870 	lcall	_printf_tiny
      00078A 15 81            [12] 1871 	dec	sp
      00078C 15 81            [12] 1872 	dec	sp
                                   1873 ;	main.c:276: buffer1 = 0;
      00078E 90r00r1E         [24] 1874 	mov	dptr,#_main_buffer1_65536_69
      000791 E4               [12] 1875 	clr	a
      000792 F0               [24] 1876 	movx	@dptr,a
      000793 A3               [24] 1877 	inc	dptr
      000794 F0               [24] 1878 	movx	@dptr,a
                                   1879 ;	main.c:277: printf_tiny("Buffer 1 is free");
      000795 74r43            [12] 1880 	mov	a,#___str_28
      000797 C0 E0            [24] 1881 	push	acc
      000799 74s04            [12] 1882 	mov	a,#(___str_28 >> 8)
      00079B C0 E0            [24] 1883 	push	acc
      00079D 12r00r00         [24] 1884 	lcall	_printf_tiny
      0007A0 15 81            [12] 1885 	dec	sp
      0007A2 15 81            [12] 1886 	dec	sp
      0007A4 D0 02            [24] 1887 	pop	ar2
      0007A6 D0 03            [24] 1888 	pop	ar3
      0007A8 D0 04            [24] 1889 	pop	ar4
      0007AA D0 05            [24] 1890 	pop	ar5
      0007AC D0 03            [24] 1891 	pop	ar3
      0007AE D0 02            [24] 1892 	pop	ar2
      0007B0 02r03rF4         [24] 1893 	ljmp	00172$
      0007B3                       1894 00120$:
                                   1895 ;	main.c:279: else if(deleted > 1 && deleted < (i+2))
      0007B3 C3               [12] 1896 	clr	c
      0007B4 74 01            [12] 1897 	mov	a,#0x01
      0007B6 98               [12] 1898 	subb	a,r0
      0007B7 E4               [12] 1899 	clr	a
      0007B8 99               [12] 1900 	subb	a,r1
      0007B9 40 03            [24] 1901 	jc	00380$
      0007BB 02r08r7F         [24] 1902 	ljmp	00116$
      0007BE                       1903 00380$:
      0007BE 74 02            [12] 1904 	mov	a,#0x02
      0007C0 25*04            [12] 1905 	add	a,_main_sloc2_1_0
      0007C2 FE               [12] 1906 	mov	r6,a
      0007C3 E4               [12] 1907 	clr	a
      0007C4 35*05            [12] 1908 	addc	a,(_main_sloc2_1_0 + 1)
      0007C6 FF               [12] 1909 	mov	r7,a
      0007C7 C3               [12] 1910 	clr	c
      0007C8 E8               [12] 1911 	mov	a,r0
      0007C9 9E               [12] 1912 	subb	a,r6
      0007CA E9               [12] 1913 	mov	a,r1
      0007CB 9F               [12] 1914 	subb	a,r7
      0007CC 40 03            [24] 1915 	jc	00381$
      0007CE 02r08r7F         [24] 1916 	ljmp	00116$
      0007D1                       1917 00381$:
                                   1918 ;	main.c:281: printf_tiny("\n\rDeleting buffer %d \n\r",deleted);
      0007D1 C0 02            [24] 1919 	push	ar2
      0007D3 C0 03            [24] 1920 	push	ar3
      0007D5 C0 05            [24] 1921 	push	ar5
      0007D7 C0 04            [24] 1922 	push	ar4
      0007D9 C0 03            [24] 1923 	push	ar3
      0007DB C0 02            [24] 1924 	push	ar2
      0007DD C0 01            [24] 1925 	push	ar1
      0007DF C0 00            [24] 1926 	push	ar0
      0007E1 C0 00            [24] 1927 	push	ar0
      0007E3 C0 01            [24] 1928 	push	ar1
      0007E5 74r54            [12] 1929 	mov	a,#___str_29
      0007E7 C0 E0            [24] 1930 	push	acc
      0007E9 74s04            [12] 1931 	mov	a,#(___str_29 >> 8)
      0007EB C0 E0            [24] 1932 	push	acc
      0007ED 12r00r00         [24] 1933 	lcall	_printf_tiny
      0007F0 E5 81            [12] 1934 	mov	a,sp
      0007F2 24 FC            [12] 1935 	add	a,#0xfc
      0007F4 F5 81            [12] 1936 	mov	sp,a
      0007F6 D0 00            [24] 1937 	pop	ar0
      0007F8 D0 01            [24] 1938 	pop	ar1
      0007FA D0 02            [24] 1939 	pop	ar2
      0007FC D0 03            [24] 1940 	pop	ar3
      0007FE D0 04            [24] 1941 	pop	ar4
      000800 D0 05            [24] 1942 	pop	ar5
                                   1943 ;	main.c:282: free(buffern[deleted-2]);
      000802 88 07            [24] 1944 	mov	ar7,r0
      000804 1F               [12] 1945 	dec	r7
      000805 1F               [12] 1946 	dec	r7
      000806 C2 D5            [12] 1947 	clr	F0
      000808 75 F0 02         [24] 1948 	mov	b,#0x02
      00080B EF               [12] 1949 	mov	a,r7
      00080C 30 E7 04         [24] 1950 	jnb	acc.7,00382$
      00080F B2 D5            [12] 1951 	cpl	F0
      000811 F4               [12] 1952 	cpl	a
      000812 04               [12] 1953 	inc	a
      000813                       1954 00382$:
      000813 A4               [48] 1955 	mul	ab
      000814 30 D5 0A         [24] 1956 	jnb	F0,00383$
      000817 F4               [12] 1957 	cpl	a
      000818 24 01            [12] 1958 	add	a,#0x01
      00081A C5 F0            [12] 1959 	xch	a,b
      00081C F4               [12] 1960 	cpl	a
      00081D 34 00            [12] 1961 	addc	a,#0x00
      00081F C5 F0            [12] 1962 	xch	a,b
      000821                       1963 00383$:
      000821 24r20            [12] 1964 	add	a,#_main_buffern_65536_69
      000823 F5*0B            [12] 1965 	mov	_main_sloc6_1_0,a
      000825 74s00            [12] 1966 	mov	a,#(_main_buffern_65536_69 >> 8)
      000827 35 F0            [12] 1967 	addc	a,b
      000829 F5*0C            [12] 1968 	mov	(_main_sloc6_1_0 + 1),a
      00082B 85*0B 82         [24] 1969 	mov	dpl,_main_sloc6_1_0
      00082E 85*0C 83         [24] 1970 	mov	dph,(_main_sloc6_1_0 + 1)
      000831 E0               [24] 1971 	movx	a,@dptr
      000832 FA               [12] 1972 	mov	r2,a
      000833 A3               [24] 1973 	inc	dptr
      000834 E0               [24] 1974 	movx	a,@dptr
      000835 FB               [12] 1975 	mov	r3,a
      000836 7F 00            [12] 1976 	mov	r7,#0x00
      000838 8A 82            [24] 1977 	mov	dpl,r2
      00083A 8B 83            [24] 1978 	mov	dph,r3
      00083C 8F F0            [24] 1979 	mov	b,r7
      00083E C0 05            [24] 1980 	push	ar5
      000840 C0 04            [24] 1981 	push	ar4
      000842 C0 03            [24] 1982 	push	ar3
      000844 C0 02            [24] 1983 	push	ar2
      000846 C0 01            [24] 1984 	push	ar1
      000848 C0 00            [24] 1985 	push	ar0
      00084A 12r00r00         [24] 1986 	lcall	_free
      00084D D0 00            [24] 1987 	pop	ar0
      00084F D0 01            [24] 1988 	pop	ar1
                                   1989 ;	main.c:283: printf_tiny("\n\rBuffer %d is Free\n\r",deleted);
      000851 C0 00            [24] 1990 	push	ar0
      000853 C0 01            [24] 1991 	push	ar1
      000855 74r6C            [12] 1992 	mov	a,#___str_30
      000857 C0 E0            [24] 1993 	push	acc
      000859 74s04            [12] 1994 	mov	a,#(___str_30 >> 8)
      00085B C0 E0            [24] 1995 	push	acc
      00085D 12r00r00         [24] 1996 	lcall	_printf_tiny
      000860 E5 81            [12] 1997 	mov	a,sp
      000862 24 FC            [12] 1998 	add	a,#0xfc
      000864 F5 81            [12] 1999 	mov	sp,a
      000866 D0 02            [24] 2000 	pop	ar2
      000868 D0 03            [24] 2001 	pop	ar3
      00086A D0 04            [24] 2002 	pop	ar4
      00086C D0 05            [24] 2003 	pop	ar5
                                   2004 ;	main.c:284: buffern[deleted-2]=0;
      00086E 85*0B 82         [24] 2005 	mov	dpl,_main_sloc6_1_0
      000871 85*0C 83         [24] 2006 	mov	dph,(_main_sloc6_1_0 + 1)
      000874 E4               [12] 2007 	clr	a
      000875 F0               [24] 2008 	movx	@dptr,a
      000876 A3               [24] 2009 	inc	dptr
      000877 F0               [24] 2010 	movx	@dptr,a
      000878 D0 03            [24] 2011 	pop	ar3
      00087A D0 02            [24] 2012 	pop	ar2
      00087C 02r03rF4         [24] 2013 	ljmp	00172$
      00087F                       2014 00116$:
                                   2015 ;	main.c:288: printf_tiny("\n\rEnter a valid buffer number\n\rPress '-' to delete any valid buffer\n\r");
      00087F C0 05            [24] 2016 	push	ar5
      000881 C0 04            [24] 2017 	push	ar4
      000883 C0 03            [24] 2018 	push	ar3
      000885 C0 02            [24] 2019 	push	ar2
      000887 74r82            [12] 2020 	mov	a,#___str_31
      000889 C0 E0            [24] 2021 	push	acc
      00088B 74s04            [12] 2022 	mov	a,#(___str_31 >> 8)
      00088D C0 E0            [24] 2023 	push	acc
      00088F 12r00r00         [24] 2024 	lcall	_printf_tiny
      000892 15 81            [12] 2025 	dec	sp
      000894 15 81            [12] 2026 	dec	sp
      000896 D0 02            [24] 2027 	pop	ar2
      000898 D0 03            [24] 2028 	pop	ar3
      00089A D0 04            [24] 2029 	pop	ar4
      00089C D0 05            [24] 2030 	pop	ar5
      00089E 02r03rF4         [24] 2031 	ljmp	00172$
      0008A1                       2032 00153$:
                                   2033 ;	main.c:293: else if(input_symbol == '=')
      0008A1 74 3D            [12] 2034 	mov	a,#0x3d
      0008A3 B5*06 02         [24] 2035 	cjne	a,_main_sloc3_1_0,00384$
      0008A6 80 03            [24] 2036 	sjmp	00385$
      0008A8                       2037 00384$:
      0008A8 02r09rD7         [24] 2038 	ljmp	00150$
      0008AB                       2039 00385$:
                                   2040 ;	main.c:295: DEBUGPORT(4);
      0008AB 75 82 04         [24] 2041 	mov	dpl,#0x04
      0008AE C0 05            [24] 2042 	push	ar5
      0008B0 C0 04            [24] 2043 	push	ar4
      0008B2 C0 03            [24] 2044 	push	ar3
      0008B4 C0 02            [24] 2045 	push	ar2
      0008B6 12r00r07         [24] 2046 	lcall	_dataout
                                   2047 ;	main.c:296: printf_tiny("\n\rThe Stored Characters in Buffer 0 are\n\r");
      0008B9 74rC8            [12] 2048 	mov	a,#___str_32
      0008BB C0 E0            [24] 2049 	push	acc
      0008BD 74s04            [12] 2050 	mov	a,#(___str_32 >> 8)
      0008BF C0 E0            [24] 2051 	push	acc
      0008C1 12r00r00         [24] 2052 	lcall	_printf_tiny
      0008C4 15 81            [12] 2053 	dec	sp
      0008C6 15 81            [12] 2054 	dec	sp
      0008C8 D0 02            [24] 2055 	pop	ar2
      0008CA D0 03            [24] 2056 	pop	ar3
      0008CC D0 04            [24] 2057 	pop	ar4
      0008CE D0 05            [24] 2058 	pop	ar5
                                   2059 ;	main.c:298: for((buff0_char_count)=0; (buff0_char_count)<symbol_stored; (buff0_char_count)++)
      0008D0 90r00r1A         [24] 2060 	mov	dptr,#_main_symbol_stored_65536_69
      0008D3 E0               [24] 2061 	movx	a,@dptr
      0008D4 F5*0B            [12] 2062 	mov	_main_sloc6_1_0,a
      0008D6 A3               [24] 2063 	inc	dptr
      0008D7 E0               [24] 2064 	movx	a,@dptr
      0008D8 F5*0C            [12] 2065 	mov	(_main_sloc6_1_0 + 1),a
      0008DA 78 00            [12] 2066 	mov	r0,#0x00
      0008DC 79 00            [12] 2067 	mov	r1,#0x00
      0008DE                       2068 00175$:
      0008DE C3               [12] 2069 	clr	c
      0008DF E8               [12] 2070 	mov	a,r0
      0008E0 95*0B            [12] 2071 	subb	a,_main_sloc6_1_0
      0008E2 E9               [12] 2072 	mov	a,r1
      0008E3 95*0C            [12] 2073 	subb	a,(_main_sloc6_1_0 + 1)
      0008E5 40 03            [24] 2074 	jc	00386$
      0008E7 02r03rF4         [24] 2075 	ljmp	00172$
      0008EA                       2076 00386$:
                                   2077 ;	main.c:301: if(buff0_char_count==0)
      0008EA E8               [12] 2078 	mov	a,r0
      0008EB 49               [12] 2079 	orl	a,r1
      0008EC 70 4A            [24] 2080 	jnz	00131$
                                   2081 ;	main.c:303: printf_tiny("0x%x >> %x",(uint16_t)(buffer0+buff0_char_count),*((buffer0)+(buff0_char_count)));
      0008EE C0 02            [24] 2082 	push	ar2
      0008F0 C0 03            [24] 2083 	push	ar3
      0008F2 E8               [12] 2084 	mov	a,r0
      0008F3 2C               [12] 2085 	add	a,r4
      0008F4 FA               [12] 2086 	mov	r2,a
      0008F5 E9               [12] 2087 	mov	a,r1
      0008F6 3D               [12] 2088 	addc	a,r5
      0008F7 FB               [12] 2089 	mov	r3,a
      0008F8 8A 82            [24] 2090 	mov	dpl,r2
      0008FA 8B 83            [24] 2091 	mov	dph,r3
      0008FC E0               [24] 2092 	movx	a,@dptr
      0008FD FF               [12] 2093 	mov	r7,a
      0008FE 7E 00            [12] 2094 	mov	r6,#0x00
      000900 C0 05            [24] 2095 	push	ar5
      000902 C0 04            [24] 2096 	push	ar4
      000904 C0 03            [24] 2097 	push	ar3
      000906 C0 02            [24] 2098 	push	ar2
      000908 C0 01            [24] 2099 	push	ar1
      00090A C0 00            [24] 2100 	push	ar0
      00090C C0 07            [24] 2101 	push	ar7
      00090E C0 06            [24] 2102 	push	ar6
      000910 C0 02            [24] 2103 	push	ar2
      000912 C0 03            [24] 2104 	push	ar3
      000914 74rF2            [12] 2105 	mov	a,#___str_33
      000916 C0 E0            [24] 2106 	push	acc
      000918 74s04            [12] 2107 	mov	a,#(___str_33 >> 8)
      00091A C0 E0            [24] 2108 	push	acc
      00091C 12r00r00         [24] 2109 	lcall	_printf_tiny
      00091F E5 81            [12] 2110 	mov	a,sp
      000921 24 FA            [12] 2111 	add	a,#0xfa
      000923 F5 81            [12] 2112 	mov	sp,a
      000925 D0 00            [24] 2113 	pop	ar0
      000927 D0 01            [24] 2114 	pop	ar1
      000929 D0 02            [24] 2115 	pop	ar2
      00092B D0 03            [24] 2116 	pop	ar3
      00092D D0 04            [24] 2117 	pop	ar4
      00092F D0 05            [24] 2118 	pop	ar5
      000931 D0 03            [24] 2119 	pop	ar3
      000933 D0 02            [24] 2120 	pop	ar2
      000935 02r09rCF         [24] 2121 	ljmp	00176$
      000938                       2122 00131$:
                                   2123 ;	main.c:305: else if((buff0_char_count%16)!=0)
      000938 74 0F            [12] 2124 	mov	a,#0x0f
      00093A 58               [12] 2125 	anl	a,r0
      00093B FE               [12] 2126 	mov	r6,a
      00093C 7F 00            [12] 2127 	mov	r7,#0x00
      00093E 4F               [12] 2128 	orl	a,r7
      00093F 60 43            [24] 2129 	jz	00128$
                                   2130 ;	main.c:307: printf_tiny(" %x",*((buffer0)+(buff0_char_count)));
      000941 C0 02            [24] 2131 	push	ar2
      000943 C0 03            [24] 2132 	push	ar3
      000945 E8               [12] 2133 	mov	a,r0
      000946 2C               [12] 2134 	add	a,r4
      000947 F5 82            [12] 2135 	mov	dpl,a
      000949 E9               [12] 2136 	mov	a,r1
      00094A 3D               [12] 2137 	addc	a,r5
      00094B F5 83            [12] 2138 	mov	dph,a
      00094D E0               [24] 2139 	movx	a,@dptr
      00094E FB               [12] 2140 	mov	r3,a
      00094F 7A 00            [12] 2141 	mov	r2,#0x00
      000951 C0 05            [24] 2142 	push	ar5
      000953 C0 04            [24] 2143 	push	ar4
      000955 C0 03            [24] 2144 	push	ar3
      000957 C0 02            [24] 2145 	push	ar2
      000959 C0 01            [24] 2146 	push	ar1
      00095B C0 00            [24] 2147 	push	ar0
      00095D C0 03            [24] 2148 	push	ar3
      00095F C0 02            [24] 2149 	push	ar2
      000961 74rFD            [12] 2150 	mov	a,#___str_34
      000963 C0 E0            [24] 2151 	push	acc
      000965 74s04            [12] 2152 	mov	a,#(___str_34 >> 8)
      000967 C0 E0            [24] 2153 	push	acc
      000969 12r00r00         [24] 2154 	lcall	_printf_tiny
      00096C E5 81            [12] 2155 	mov	a,sp
      00096E 24 FC            [12] 2156 	add	a,#0xfc
      000970 F5 81            [12] 2157 	mov	sp,a
      000972 D0 00            [24] 2158 	pop	ar0
      000974 D0 01            [24] 2159 	pop	ar1
      000976 D0 02            [24] 2160 	pop	ar2
      000978 D0 03            [24] 2161 	pop	ar3
      00097A D0 04            [24] 2162 	pop	ar4
      00097C D0 05            [24] 2163 	pop	ar5
      00097E D0 03            [24] 2164 	pop	ar3
      000980 D0 02            [24] 2165 	pop	ar2
      000982 80 4B            [24] 2166 	sjmp	00176$
      000984                       2167 00128$:
                                   2168 ;	main.c:309: else if(buff0_char_count%16==0)
      000984 EE               [12] 2169 	mov	a,r6
      000985 4F               [12] 2170 	orl	a,r7
      000986 70 47            [24] 2171 	jnz	00176$
                                   2172 ;	main.c:311: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer0+buff0_char_count),*((buffer0)+(buff0_char_count)));
      000988 C0 02            [24] 2173 	push	ar2
      00098A C0 03            [24] 2174 	push	ar3
      00098C E8               [12] 2175 	mov	a,r0
      00098D 2C               [12] 2176 	add	a,r4
      00098E FE               [12] 2177 	mov	r6,a
      00098F E9               [12] 2178 	mov	a,r1
      000990 3D               [12] 2179 	addc	a,r5
      000991 FF               [12] 2180 	mov	r7,a
      000992 8E 82            [24] 2181 	mov	dpl,r6
      000994 8F 83            [24] 2182 	mov	dph,r7
      000996 E0               [24] 2183 	movx	a,@dptr
      000997 FB               [12] 2184 	mov	r3,a
      000998 7A 00            [12] 2185 	mov	r2,#0x00
      00099A C0 05            [24] 2186 	push	ar5
      00099C C0 04            [24] 2187 	push	ar4
      00099E C0 03            [24] 2188 	push	ar3
      0009A0 C0 02            [24] 2189 	push	ar2
      0009A2 C0 01            [24] 2190 	push	ar1
      0009A4 C0 00            [24] 2191 	push	ar0
      0009A6 C0 03            [24] 2192 	push	ar3
      0009A8 C0 02            [24] 2193 	push	ar2
      0009AA C0 06            [24] 2194 	push	ar6
      0009AC C0 07            [24] 2195 	push	ar7
      0009AE 74r01            [12] 2196 	mov	a,#___str_35
      0009B0 C0 E0            [24] 2197 	push	acc
      0009B2 74s05            [12] 2198 	mov	a,#(___str_35 >> 8)
      0009B4 C0 E0            [24] 2199 	push	acc
      0009B6 12r00r00         [24] 2200 	lcall	_printf_tiny
      0009B9 E5 81            [12] 2201 	mov	a,sp
      0009BB 24 FA            [12] 2202 	add	a,#0xfa
      0009BD F5 81            [12] 2203 	mov	sp,a
      0009BF D0 00            [24] 2204 	pop	ar0
      0009C1 D0 01            [24] 2205 	pop	ar1
      0009C3 D0 02            [24] 2206 	pop	ar2
      0009C5 D0 03            [24] 2207 	pop	ar3
      0009C7 D0 04            [24] 2208 	pop	ar4
      0009C9 D0 05            [24] 2209 	pop	ar5
                                   2210 ;	main.c:399: counter=0;
      0009CB D0 03            [24] 2211 	pop	ar3
      0009CD D0 02            [24] 2212 	pop	ar2
                                   2213 ;	main.c:311: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer0+buff0_char_count),*((buffer0)+(buff0_char_count)));
      0009CF                       2214 00176$:
                                   2215 ;	main.c:298: for((buff0_char_count)=0; (buff0_char_count)<symbol_stored; (buff0_char_count)++)
      0009CF 08               [12] 2216 	inc	r0
      0009D0 B8 00 01         [24] 2217 	cjne	r0,#0x00,00390$
      0009D3 09               [12] 2218 	inc	r1
      0009D4                       2219 00390$:
      0009D4 02r08rDE         [24] 2220 	ljmp	00175$
      0009D7                       2221 00150$:
                                   2222 ;	main.c:316: else if(input_symbol == '@')
      0009D7 74 40            [12] 2223 	mov	a,#0x40
      0009D9 B5*06 02         [24] 2224 	cjne	a,_main_sloc3_1_0,00391$
      0009DC 80 03            [24] 2225 	sjmp	00392$
      0009DE                       2226 00391$:
      0009DE 02r0Br1D         [24] 2227 	ljmp	00147$
      0009E1                       2228 00392$:
                                   2229 ;	main.c:318: DEBUGPORT(5);
      0009E1 75 82 05         [24] 2230 	mov	dpl,#0x05
      0009E4 C0 05            [24] 2231 	push	ar5
      0009E6 C0 04            [24] 2232 	push	ar4
      0009E8 C0 03            [24] 2233 	push	ar3
      0009EA C0 02            [24] 2234 	push	ar2
      0009EC 12r00r07         [24] 2235 	lcall	_dataout
                                   2236 ;	main.c:319: printf_tiny("\n\rDeleting Buffer 0 \n\r");
      0009EF 74r0D            [12] 2237 	mov	a,#___str_36
      0009F1 C0 E0            [24] 2238 	push	acc
      0009F3 74s05            [12] 2239 	mov	a,#(___str_36 >> 8)
      0009F5 C0 E0            [24] 2240 	push	acc
      0009F7 12r00r00         [24] 2241 	lcall	_printf_tiny
      0009FA 15 81            [12] 2242 	dec	sp
      0009FC 15 81            [12] 2243 	dec	sp
      0009FE D0 02            [24] 2244 	pop	ar2
      000A00 D0 03            [24] 2245 	pop	ar3
      000A02 D0 04            [24] 2246 	pop	ar4
      000A04 D0 05            [24] 2247 	pop	ar5
                                   2248 ;	main.c:320: free(buffer0);
      000A06 8C 06            [24] 2249 	mov	ar6,r4
      000A08 8D 07            [24] 2250 	mov	ar7,r5
      000A0A 8F 01            [24] 2251 	mov	ar1,r7
      000A0C 7F 00            [12] 2252 	mov	r7,#0x00
      000A0E 8E 82            [24] 2253 	mov	dpl,r6
      000A10 89 83            [24] 2254 	mov	dph,r1
      000A12 8F F0            [24] 2255 	mov	b,r7
      000A14 C0 05            [24] 2256 	push	ar5
      000A16 C0 04            [24] 2257 	push	ar4
      000A18 C0 03            [24] 2258 	push	ar3
      000A1A C0 02            [24] 2259 	push	ar2
      000A1C 12r00r00         [24] 2260 	lcall	_free
                                   2261 ;	main.c:321: printf_tiny("\n\rBuffer 0 is free\n\r");
      000A1F 74r24            [12] 2262 	mov	a,#___str_37
      000A21 C0 E0            [24] 2263 	push	acc
      000A23 74s05            [12] 2264 	mov	a,#(___str_37 >> 8)
      000A25 C0 E0            [24] 2265 	push	acc
      000A27 12r00r00         [24] 2266 	lcall	_printf_tiny
      000A2A 15 81            [12] 2267 	dec	sp
      000A2C 15 81            [12] 2268 	dec	sp
                                   2269 ;	main.c:323: printf_tiny("\n\rDeleting Buffer 1 \n\r");
      000A2E 74r39            [12] 2270 	mov	a,#___str_38
      000A30 C0 E0            [24] 2271 	push	acc
      000A32 74s05            [12] 2272 	mov	a,#(___str_38 >> 8)
      000A34 C0 E0            [24] 2273 	push	acc
      000A36 12r00r00         [24] 2274 	lcall	_printf_tiny
      000A39 15 81            [12] 2275 	dec	sp
      000A3B 15 81            [12] 2276 	dec	sp
                                   2277 ;	main.c:324: free(buffer1);
      000A3D 90r00r1E         [24] 2278 	mov	dptr,#_main_buffer1_65536_69
      000A40 E0               [24] 2279 	movx	a,@dptr
      000A41 FE               [12] 2280 	mov	r6,a
      000A42 A3               [24] 2281 	inc	dptr
      000A43 E0               [24] 2282 	movx	a,@dptr
      000A44 F9               [12] 2283 	mov	r1,a
      000A45 7F 00            [12] 2284 	mov	r7,#0x00
      000A47 8E 82            [24] 2285 	mov	dpl,r6
      000A49 89 83            [24] 2286 	mov	dph,r1
      000A4B 8F F0            [24] 2287 	mov	b,r7
      000A4D 12r00r00         [24] 2288 	lcall	_free
                                   2289 ;	main.c:325: printf_tiny("\n\rBuffer 1 is free\n\r");
      000A50 74r50            [12] 2290 	mov	a,#___str_39
      000A52 C0 E0            [24] 2291 	push	acc
      000A54 74s05            [12] 2292 	mov	a,#(___str_39 >> 8)
      000A56 C0 E0            [24] 2293 	push	acc
      000A58 12r00r00         [24] 2294 	lcall	_printf_tiny
      000A5B 15 81            [12] 2295 	dec	sp
      000A5D 15 81            [12] 2296 	dec	sp
      000A5F D0 02            [24] 2297 	pop	ar2
      000A61 D0 03            [24] 2298 	pop	ar3
      000A63 D0 04            [24] 2299 	pop	ar4
      000A65 D0 05            [24] 2300 	pop	ar5
                                   2301 ;	main.c:327: for(total_buffer=2; (total_buffer)<(i); (total_buffer)++)
      000A67 85*04*0B         [24] 2302 	mov	_main_sloc6_1_0,_main_sloc2_1_0
      000A6A 85*05*0C         [24] 2303 	mov	(_main_sloc6_1_0 + 1),(_main_sloc2_1_0 + 1)
      000A6D 78 02            [12] 2304 	mov	r0,#0x02
      000A6F 79 00            [12] 2305 	mov	r1,#0x00
      000A71                       2306 00178$:
      000A71 C3               [12] 2307 	clr	c
      000A72 E8               [12] 2308 	mov	a,r0
      000A73 95*0B            [12] 2309 	subb	a,_main_sloc6_1_0
      000A75 E9               [12] 2310 	mov	a,r1
      000A76 95*0C            [12] 2311 	subb	a,(_main_sloc6_1_0 + 1)
      000A78 40 03            [24] 2312 	jc	00393$
      000A7A 02r0Br07         [24] 2313 	ljmp	00134$
      000A7D                       2314 00393$:
                                   2315 ;	main.c:329: printf_tiny("\n\rDeleting buffer_%d \n\r",total_buffer);
      000A7D C0 02            [24] 2316 	push	ar2
      000A7F C0 03            [24] 2317 	push	ar3
      000A81 C0 05            [24] 2318 	push	ar5
      000A83 C0 04            [24] 2319 	push	ar4
      000A85 C0 03            [24] 2320 	push	ar3
      000A87 C0 02            [24] 2321 	push	ar2
      000A89 C0 01            [24] 2322 	push	ar1
      000A8B C0 00            [24] 2323 	push	ar0
      000A8D C0 00            [24] 2324 	push	ar0
      000A8F C0 01            [24] 2325 	push	ar1
      000A91 74r65            [12] 2326 	mov	a,#___str_40
      000A93 C0 E0            [24] 2327 	push	acc
      000A95 74s05            [12] 2328 	mov	a,#(___str_40 >> 8)
      000A97 C0 E0            [24] 2329 	push	acc
      000A99 12r00r00         [24] 2330 	lcall	_printf_tiny
      000A9C E5 81            [12] 2331 	mov	a,sp
      000A9E 24 FC            [12] 2332 	add	a,#0xfc
      000AA0 F5 81            [12] 2333 	mov	sp,a
      000AA2 D0 00            [24] 2334 	pop	ar0
      000AA4 D0 01            [24] 2335 	pop	ar1
      000AA6 D0 02            [24] 2336 	pop	ar2
      000AA8 D0 03            [24] 2337 	pop	ar3
                                   2338 ;	main.c:330: free(buffern[total_buffer]);
      000AAA E8               [12] 2339 	mov	a,r0
      000AAB 28               [12] 2340 	add	a,r0
      000AAC FA               [12] 2341 	mov	r2,a
      000AAD E9               [12] 2342 	mov	a,r1
      000AAE 33               [12] 2343 	rlc	a
      000AAF FB               [12] 2344 	mov	r3,a
      000AB0 EA               [12] 2345 	mov	a,r2
      000AB1 24r20            [12] 2346 	add	a,#_main_buffern_65536_69
      000AB3 F5 82            [12] 2347 	mov	dpl,a
      000AB5 EB               [12] 2348 	mov	a,r3
      000AB6 34s00            [12] 2349 	addc	a,#(_main_buffern_65536_69 >> 8)
      000AB8 F5 83            [12] 2350 	mov	dph,a
      000ABA E0               [24] 2351 	movx	a,@dptr
      000ABB FA               [12] 2352 	mov	r2,a
      000ABC A3               [24] 2353 	inc	dptr
      000ABD E0               [24] 2354 	movx	a,@dptr
      000ABE FB               [12] 2355 	mov	r3,a
      000ABF 7F 00            [12] 2356 	mov	r7,#0x00
      000AC1 8A 82            [24] 2357 	mov	dpl,r2
      000AC3 8B 83            [24] 2358 	mov	dph,r3
      000AC5 8F F0            [24] 2359 	mov	b,r7
      000AC7 C0 03            [24] 2360 	push	ar3
      000AC9 C0 02            [24] 2361 	push	ar2
      000ACB C0 01            [24] 2362 	push	ar1
      000ACD C0 00            [24] 2363 	push	ar0
      000ACF 12r00r00         [24] 2364 	lcall	_free
      000AD2 D0 00            [24] 2365 	pop	ar0
      000AD4 D0 01            [24] 2366 	pop	ar1
                                   2367 ;	main.c:331: printf_tiny("\n\rBuffer %d is free \n\r",total_buffer);
      000AD6 C0 01            [24] 2368 	push	ar1
      000AD8 C0 00            [24] 2369 	push	ar0
      000ADA C0 00            [24] 2370 	push	ar0
      000ADC C0 01            [24] 2371 	push	ar1
      000ADE 74r7D            [12] 2372 	mov	a,#___str_41
      000AE0 C0 E0            [24] 2373 	push	acc
      000AE2 74s05            [12] 2374 	mov	a,#(___str_41 >> 8)
      000AE4 C0 E0            [24] 2375 	push	acc
      000AE6 12r00r00         [24] 2376 	lcall	_printf_tiny
      000AE9 E5 81            [12] 2377 	mov	a,sp
      000AEB 24 FC            [12] 2378 	add	a,#0xfc
      000AED F5 81            [12] 2379 	mov	sp,a
      000AEF D0 00            [24] 2380 	pop	ar0
      000AF1 D0 01            [24] 2381 	pop	ar1
      000AF3 D0 02            [24] 2382 	pop	ar2
      000AF5 D0 03            [24] 2383 	pop	ar3
      000AF7 D0 04            [24] 2384 	pop	ar4
      000AF9 D0 05            [24] 2385 	pop	ar5
                                   2386 ;	main.c:327: for(total_buffer=2; (total_buffer)<(i); (total_buffer)++)
      000AFB 08               [12] 2387 	inc	r0
      000AFC B8 00 01         [24] 2388 	cjne	r0,#0x00,00394$
      000AFF 09               [12] 2389 	inc	r1
      000B00                       2390 00394$:
      000B00 D0 03            [24] 2391 	pop	ar3
      000B02 D0 02            [24] 2392 	pop	ar2
      000B04 02r0Ar71         [24] 2393 	ljmp	00178$
      000B07                       2394 00134$:
                                   2395 ;	main.c:333: main();
      000B07 C0 05            [24] 2396 	push	ar5
      000B09 C0 04            [24] 2397 	push	ar4
      000B0B C0 03            [24] 2398 	push	ar3
      000B0D C0 02            [24] 2399 	push	ar2
      000B0F 12r02r4C         [24] 2400 	lcall	_main
      000B12 D0 02            [24] 2401 	pop	ar2
      000B14 D0 03            [24] 2402 	pop	ar3
      000B16 D0 04            [24] 2403 	pop	ar4
      000B18 D0 05            [24] 2404 	pop	ar5
      000B1A 02r03rF4         [24] 2405 	ljmp	00172$
      000B1D                       2406 00147$:
                                   2407 ;	main.c:336: else if(input_symbol == '?')
      000B1D 74 3F            [12] 2408 	mov	a,#0x3f
      000B1F B5*06 02         [24] 2409 	cjne	a,_main_sloc3_1_0,00395$
      000B22 80 03            [24] 2410 	sjmp	00396$
      000B24                       2411 00395$:
      000B24 02r03rF4         [24] 2412 	ljmp	00172$
      000B27                       2413 00396$:
                                   2414 ;	main.c:338: DEBUGPORT(3);
      000B27 75 82 03         [24] 2415 	mov	dpl,#0x03
      000B2A C0 05            [24] 2416 	push	ar5
      000B2C C0 04            [24] 2417 	push	ar4
      000B2E C0 03            [24] 2418 	push	ar3
      000B30 C0 02            [24] 2419 	push	ar2
      000B32 12r00r07         [24] 2420 	lcall	_dataout
                                   2421 ;	main.c:339: printf_tiny("******************** REPORT OF HEAP *********************");
      000B35 74r94            [12] 2422 	mov	a,#___str_42
      000B37 C0 E0            [24] 2423 	push	acc
      000B39 74s05            [12] 2424 	mov	a,#(___str_42 >> 8)
      000B3B C0 E0            [24] 2425 	push	acc
      000B3D 12r00r00         [24] 2426 	lcall	_printf_tiny
      000B40 15 81            [12] 2427 	dec	sp
      000B42 15 81            [12] 2428 	dec	sp
                                   2429 ;	main.c:341: printf_tiny("\n\rBuffer 0\n\r");
      000B44 74rCE            [12] 2430 	mov	a,#___str_43
      000B46 C0 E0            [24] 2431 	push	acc
      000B48 74s05            [12] 2432 	mov	a,#(___str_43 >> 8)
      000B4A C0 E0            [24] 2433 	push	acc
      000B4C 12r00r00         [24] 2434 	lcall	_printf_tiny
      000B4F 15 81            [12] 2435 	dec	sp
      000B51 15 81            [12] 2436 	dec	sp
                                   2437 ;	main.c:342: printf_tiny("\n\rIts Start Address  = 0x%x\n\r",buffer0_temper);
      000B53 C0*0D            [24] 2438 	push	_main_sloc7_1_0
      000B55 C0*0E            [24] 2439 	push	(_main_sloc7_1_0 + 1)
      000B57 74rDB            [12] 2440 	mov	a,#___str_44
      000B59 C0 E0            [24] 2441 	push	acc
      000B5B 74s05            [12] 2442 	mov	a,#(___str_44 >> 8)
      000B5D C0 E0            [24] 2443 	push	acc
      000B5F 12r00r00         [24] 2444 	lcall	_printf_tiny
      000B62 E5 81            [12] 2445 	mov	a,sp
      000B64 24 FC            [12] 2446 	add	a,#0xfc
      000B66 F5 81            [12] 2447 	mov	sp,a
                                   2448 ;	main.c:343: printf_tiny("\n\rIts Ending Address = 0x%x\n\r",(buffer0_temper)+(num1));
      000B68 A8*0D            [24] 2449 	mov	r0,_main_sloc7_1_0
      000B6A A9*0E            [24] 2450 	mov	r1,(_main_sloc7_1_0 + 1)
      000B6C E5*09            [12] 2451 	mov	a,_main_sloc5_1_0
      000B6E 28               [12] 2452 	add	a,r0
      000B6F F8               [12] 2453 	mov	r0,a
      000B70 E5*0A            [12] 2454 	mov	a,(_main_sloc5_1_0 + 1)
      000B72 39               [12] 2455 	addc	a,r1
      000B73 F9               [12] 2456 	mov	r1,a
      000B74 C0 00            [24] 2457 	push	ar0
      000B76 C0 01            [24] 2458 	push	ar1
      000B78 74rF9            [12] 2459 	mov	a,#___str_45
      000B7A C0 E0            [24] 2460 	push	acc
      000B7C 74s05            [12] 2461 	mov	a,#(___str_45 >> 8)
      000B7E C0 E0            [24] 2462 	push	acc
      000B80 12r00r00         [24] 2463 	lcall	_printf_tiny
      000B83 E5 81            [12] 2464 	mov	a,sp
      000B85 24 FC            [12] 2465 	add	a,#0xfc
      000B87 F5 81            [12] 2466 	mov	sp,a
                                   2467 ;	main.c:344: printf_tiny("\n\rIts Size = %d\n\r",num1);
      000B89 C0*0F            [24] 2468 	push	_main_sloc8_1_0
      000B8B C0*10            [24] 2469 	push	(_main_sloc8_1_0 + 1)
      000B8D 74r17            [12] 2470 	mov	a,#___str_46
      000B8F C0 E0            [24] 2471 	push	acc
      000B91 74s06            [12] 2472 	mov	a,#(___str_46 >> 8)
      000B93 C0 E0            [24] 2473 	push	acc
      000B95 12r00r00         [24] 2474 	lcall	_printf_tiny
      000B98 E5 81            [12] 2475 	mov	a,sp
      000B9A 24 FC            [12] 2476 	add	a,#0xfc
      000B9C F5 81            [12] 2477 	mov	sp,a
      000B9E D0 02            [24] 2478 	pop	ar2
      000BA0 D0 03            [24] 2479 	pop	ar3
      000BA2 D0 04            [24] 2480 	pop	ar4
      000BA4 D0 05            [24] 2481 	pop	ar5
                                   2482 ;	main.c:345: printf_tiny("\n\rCurrent Storage characters in buffer 0 = %d\n\r",symbol_stored);
      000BA6 90r00r1A         [24] 2483 	mov	dptr,#_main_symbol_stored_65536_69
      000BA9 E0               [24] 2484 	movx	a,@dptr
      000BAA FE               [12] 2485 	mov	r6,a
      000BAB A3               [24] 2486 	inc	dptr
      000BAC E0               [24] 2487 	movx	a,@dptr
      000BAD FF               [12] 2488 	mov	r7,a
      000BAE C0 07            [24] 2489 	push	ar7
      000BB0 C0 06            [24] 2490 	push	ar6
      000BB2 C0 05            [24] 2491 	push	ar5
      000BB4 C0 04            [24] 2492 	push	ar4
      000BB6 C0 03            [24] 2493 	push	ar3
      000BB8 C0 02            [24] 2494 	push	ar2
      000BBA C0 06            [24] 2495 	push	ar6
      000BBC C0 07            [24] 2496 	push	ar7
      000BBE 74r29            [12] 2497 	mov	a,#___str_47
      000BC0 C0 E0            [24] 2498 	push	acc
      000BC2 74s06            [12] 2499 	mov	a,#(___str_47 >> 8)
      000BC4 C0 E0            [24] 2500 	push	acc
      000BC6 12r00r00         [24] 2501 	lcall	_printf_tiny
      000BC9 E5 81            [12] 2502 	mov	a,sp
      000BCB 24 FC            [12] 2503 	add	a,#0xfc
      000BCD F5 81            [12] 2504 	mov	sp,a
      000BCF D0 02            [24] 2505 	pop	ar2
      000BD1 D0 03            [24] 2506 	pop	ar3
      000BD3 D0 04            [24] 2507 	pop	ar4
      000BD5 D0 05            [24] 2508 	pop	ar5
      000BD7 D0 06            [24] 2509 	pop	ar6
      000BD9 D0 07            [24] 2510 	pop	ar7
                                   2511 ;	main.c:346: printf_tiny("\n\rCurrent Free Spaces in buffer = %d\n\r",(num1-symbol_stored));
      000BDB E5*09            [12] 2512 	mov	a,_main_sloc5_1_0
      000BDD C3               [12] 2513 	clr	c
      000BDE 9E               [12] 2514 	subb	a,r6
      000BDF FE               [12] 2515 	mov	r6,a
      000BE0 E5*0A            [12] 2516 	mov	a,(_main_sloc5_1_0 + 1)
      000BE2 9F               [12] 2517 	subb	a,r7
      000BE3 FF               [12] 2518 	mov	r7,a
      000BE4 C0 05            [24] 2519 	push	ar5
      000BE6 C0 04            [24] 2520 	push	ar4
      000BE8 C0 03            [24] 2521 	push	ar3
      000BEA C0 02            [24] 2522 	push	ar2
      000BEC C0 06            [24] 2523 	push	ar6
      000BEE C0 07            [24] 2524 	push	ar7
      000BF0 74r59            [12] 2525 	mov	a,#___str_48
      000BF2 C0 E0            [24] 2526 	push	acc
      000BF4 74s06            [12] 2527 	mov	a,#(___str_48 >> 8)
      000BF6 C0 E0            [24] 2528 	push	acc
      000BF8 12r00r00         [24] 2529 	lcall	_printf_tiny
      000BFB E5 81            [12] 2530 	mov	a,sp
      000BFD 24 FC            [12] 2531 	add	a,#0xfc
      000BFF F5 81            [12] 2532 	mov	sp,a
                                   2533 ;	main.c:347: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000C01 74r80            [12] 2534 	mov	a,#___str_49
      000C03 C0 E0            [24] 2535 	push	acc
      000C05 74s06            [12] 2536 	mov	a,#(___str_49 >> 8)
      000C07 C0 E0            [24] 2537 	push	acc
      000C09 12r00r00         [24] 2538 	lcall	_printf_tiny
      000C0C 15 81            [12] 2539 	dec	sp
      000C0E 15 81            [12] 2540 	dec	sp
      000C10 D0 02            [24] 2541 	pop	ar2
      000C12 D0 03            [24] 2542 	pop	ar3
      000C14 D0 04            [24] 2543 	pop	ar4
      000C16 D0 05            [24] 2544 	pop	ar5
                                   2545 ;	main.c:349: if(buffer1 != 0)
      000C18 90r00r1E         [24] 2546 	mov	dptr,#_main_buffer1_65536_69
      000C1B E0               [24] 2547 	movx	a,@dptr
      000C1C F5 F0            [12] 2548 	mov	b,a
      000C1E A3               [24] 2549 	inc	dptr
      000C1F E0               [24] 2550 	movx	a,@dptr
      000C20 45 F0            [12] 2551 	orl	a,b
      000C22 70 03            [24] 2552 	jnz	00397$
      000C24 02r0CrD4         [24] 2553 	ljmp	00224$
      000C27                       2554 00397$:
                                   2555 ;	main.c:351: printf_tiny("\n\rBuffer 1\n\r");
      000C27 C0 05            [24] 2556 	push	ar5
      000C29 C0 04            [24] 2557 	push	ar4
      000C2B C0 03            [24] 2558 	push	ar3
      000C2D C0 02            [24] 2559 	push	ar2
      000C2F 74rCC            [12] 2560 	mov	a,#___str_50
      000C31 C0 E0            [24] 2561 	push	acc
      000C33 74s06            [12] 2562 	mov	a,#(___str_50 >> 8)
      000C35 C0 E0            [24] 2563 	push	acc
      000C37 12r00r00         [24] 2564 	lcall	_printf_tiny
      000C3A 15 81            [12] 2565 	dec	sp
      000C3C 15 81            [12] 2566 	dec	sp
      000C3E D0 02            [24] 2567 	pop	ar2
      000C40 D0 03            [24] 2568 	pop	ar3
                                   2569 ;	main.c:352: printf_tiny("\n\rIts Start Address = 0x%x\n\r",buffer1_temper);
      000C42 C0 03            [24] 2570 	push	ar3
      000C44 C0 02            [24] 2571 	push	ar2
      000C46 C0 02            [24] 2572 	push	ar2
      000C48 C0 03            [24] 2573 	push	ar3
      000C4A 74rD9            [12] 2574 	mov	a,#___str_51
      000C4C C0 E0            [24] 2575 	push	acc
      000C4E 74s06            [12] 2576 	mov	a,#(___str_51 >> 8)
      000C50 C0 E0            [24] 2577 	push	acc
      000C52 12r00r00         [24] 2578 	lcall	_printf_tiny
      000C55 E5 81            [12] 2579 	mov	a,sp
      000C57 24 FC            [12] 2580 	add	a,#0xfc
      000C59 F5 81            [12] 2581 	mov	sp,a
      000C5B D0 02            [24] 2582 	pop	ar2
      000C5D D0 03            [24] 2583 	pop	ar3
                                   2584 ;	main.c:353: printf_tiny("\n\rIts Ending Address = 0x%x\n\r",buffer1_temper+num1);
      000C5F 8A 06            [24] 2585 	mov	ar6,r2
      000C61 8B 07            [24] 2586 	mov	ar7,r3
      000C63 E5*09            [12] 2587 	mov	a,_main_sloc5_1_0
      000C65 2E               [12] 2588 	add	a,r6
      000C66 FE               [12] 2589 	mov	r6,a
      000C67 E5*0A            [12] 2590 	mov	a,(_main_sloc5_1_0 + 1)
      000C69 3F               [12] 2591 	addc	a,r7
      000C6A FF               [12] 2592 	mov	r7,a
      000C6B C0 03            [24] 2593 	push	ar3
      000C6D C0 02            [24] 2594 	push	ar2
      000C6F C0 06            [24] 2595 	push	ar6
      000C71 C0 07            [24] 2596 	push	ar7
      000C73 74rF9            [12] 2597 	mov	a,#___str_45
      000C75 C0 E0            [24] 2598 	push	acc
      000C77 74s05            [12] 2599 	mov	a,#(___str_45 >> 8)
      000C79 C0 E0            [24] 2600 	push	acc
      000C7B 12r00r00         [24] 2601 	lcall	_printf_tiny
      000C7E E5 81            [12] 2602 	mov	a,sp
      000C80 24 FC            [12] 2603 	add	a,#0xfc
      000C82 F5 81            [12] 2604 	mov	sp,a
                                   2605 ;	main.c:354: printf_tiny("\n\rIts Size = %d\n\r",num1);
      000C84 C0*0F            [24] 2606 	push	_main_sloc8_1_0
      000C86 C0*10            [24] 2607 	push	(_main_sloc8_1_0 + 1)
      000C88 74r17            [12] 2608 	mov	a,#___str_46
      000C8A C0 E0            [24] 2609 	push	acc
      000C8C 74s06            [12] 2610 	mov	a,#(___str_46 >> 8)
      000C8E C0 E0            [24] 2611 	push	acc
      000C90 12r00r00         [24] 2612 	lcall	_printf_tiny
      000C93 E5 81            [12] 2613 	mov	a,sp
      000C95 24 FC            [12] 2614 	add	a,#0xfc
      000C97 F5 81            [12] 2615 	mov	sp,a
                                   2616 ;	main.c:355: printf_tiny("\n\rStorage characters in buffer =0, because storage characters are @ buffer 0\n\r");
      000C99 74rF6            [12] 2617 	mov	a,#___str_52
      000C9B C0 E0            [24] 2618 	push	acc
      000C9D 74s06            [12] 2619 	mov	a,#(___str_52 >> 8)
      000C9F C0 E0            [24] 2620 	push	acc
      000CA1 12r00r00         [24] 2621 	lcall	_printf_tiny
      000CA4 15 81            [12] 2622 	dec	sp
      000CA6 15 81            [12] 2623 	dec	sp
                                   2624 ;	main.c:356: printf_tiny("\n\rCurrent Free Spaces in buffer = %d\n\r",(num1));
      000CA8 C0*0F            [24] 2625 	push	_main_sloc8_1_0
      000CAA C0*10            [24] 2626 	push	(_main_sloc8_1_0 + 1)
      000CAC 74r59            [12] 2627 	mov	a,#___str_48
      000CAE C0 E0            [24] 2628 	push	acc
      000CB0 74s06            [12] 2629 	mov	a,#(___str_48 >> 8)
      000CB2 C0 E0            [24] 2630 	push	acc
      000CB4 12r00r00         [24] 2631 	lcall	_printf_tiny
      000CB7 E5 81            [12] 2632 	mov	a,sp
      000CB9 24 FC            [12] 2633 	add	a,#0xfc
      000CBB F5 81            [12] 2634 	mov	sp,a
                                   2635 ;	main.c:357: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000CBD 74r80            [12] 2636 	mov	a,#___str_49
      000CBF C0 E0            [24] 2637 	push	acc
      000CC1 74s06            [12] 2638 	mov	a,#(___str_49 >> 8)
      000CC3 C0 E0            [24] 2639 	push	acc
      000CC5 12r00r00         [24] 2640 	lcall	_printf_tiny
      000CC8 15 81            [12] 2641 	dec	sp
      000CCA 15 81            [12] 2642 	dec	sp
      000CCC D0 02            [24] 2643 	pop	ar2
      000CCE D0 03            [24] 2644 	pop	ar3
      000CD0 D0 04            [24] 2645 	pop	ar4
      000CD2 D0 05            [24] 2646 	pop	ar5
                                   2647 ;	main.c:360: for(n=2; n<=(i+2); n++)
      000CD4                       2648 00224$:
      000CD4 74 02            [12] 2649 	mov	a,#0x02
      000CD6 25*04            [12] 2650 	add	a,_main_sloc2_1_0
      000CD8 F5*09            [12] 2651 	mov	_main_sloc5_1_0,a
      000CDA E4               [12] 2652 	clr	a
      000CDB 35*05            [12] 2653 	addc	a,(_main_sloc2_1_0 + 1)
      000CDD F5*0A            [12] 2654 	mov	(_main_sloc5_1_0 + 1),a
      000CDF 78 02            [12] 2655 	mov	r0,#0x02
      000CE1 79 00            [12] 2656 	mov	r1,#0x00
      000CE3                       2657 00181$:
      000CE3 C0 02            [24] 2658 	push	ar2
      000CE5 C0 03            [24] 2659 	push	ar3
      000CE7 88 02            [24] 2660 	mov	ar2,r0
      000CE9 89 03            [24] 2661 	mov	ar3,r1
      000CEB C3               [12] 2662 	clr	c
      000CEC E5*09            [12] 2663 	mov	a,_main_sloc5_1_0
      000CEE 9A               [12] 2664 	subb	a,r2
      000CEF E5*0A            [12] 2665 	mov	a,(_main_sloc5_1_0 + 1)
      000CF1 9B               [12] 2666 	subb	a,r3
      000CF2 D0 03            [24] 2667 	pop	ar3
      000CF4 D0 02            [24] 2668 	pop	ar2
      000CF6 50 03            [24] 2669 	jnc	00398$
      000CF8 02r0ErC6         [24] 2670 	ljmp	00139$
      000CFB                       2671 00398$:
                                   2672 ;	main.c:362: if(buffern[n-2] != NULL)
      000CFB C0 02            [24] 2673 	push	ar2
      000CFD C0 03            [24] 2674 	push	ar3
      000CFF E8               [12] 2675 	mov	a,r0
      000D00 F5*0B            [12] 2676 	mov	_main_sloc6_1_0,a
      000D02 24 FE            [12] 2677 	add	a,#0xfe
      000D04 FB               [12] 2678 	mov	r3,a
      000D05 C2 D5            [12] 2679 	clr	F0
      000D07 75 F0 02         [24] 2680 	mov	b,#0x02
      000D0A EB               [12] 2681 	mov	a,r3
      000D0B 30 E7 04         [24] 2682 	jnb	acc.7,00399$
      000D0E B2 D5            [12] 2683 	cpl	F0
      000D10 F4               [12] 2684 	cpl	a
      000D11 04               [12] 2685 	inc	a
      000D12                       2686 00399$:
      000D12 A4               [48] 2687 	mul	ab
      000D13 30 D5 0A         [24] 2688 	jnb	F0,00400$
      000D16 F4               [12] 2689 	cpl	a
      000D17 24 01            [12] 2690 	add	a,#0x01
      000D19 C5 F0            [12] 2691 	xch	a,b
      000D1B F4               [12] 2692 	cpl	a
      000D1C 34 00            [12] 2693 	addc	a,#0x00
      000D1E C5 F0            [12] 2694 	xch	a,b
      000D20                       2695 00400$:
      000D20 24r20            [12] 2696 	add	a,#_main_buffern_65536_69
      000D22 F5 82            [12] 2697 	mov	dpl,a
      000D24 74s00            [12] 2698 	mov	a,#(_main_buffern_65536_69 >> 8)
      000D26 35 F0            [12] 2699 	addc	a,b
      000D28 F5 83            [12] 2700 	mov	dph,a
      000D2A E0               [24] 2701 	movx	a,@dptr
      000D2B FA               [12] 2702 	mov	r2,a
      000D2C A3               [24] 2703 	inc	dptr
      000D2D E0               [24] 2704 	movx	a,@dptr
      000D2E 4A               [12] 2705 	orl	a,r2
      000D2F D0 03            [24] 2706 	pop	ar3
      000D31 D0 02            [24] 2707 	pop	ar2
      000D33 70 03            [24] 2708 	jnz	00401$
      000D35 02r0ErBE         [24] 2709 	ljmp	00182$
      000D38                       2710 00401$:
                                   2711 ;	main.c:364: printf_tiny("\n\rBuffer %d\n\r",n);
      000D38 C0 02            [24] 2712 	push	ar2
      000D3A C0 03            [24] 2713 	push	ar3
      000D3C C0 05            [24] 2714 	push	ar5
      000D3E C0 04            [24] 2715 	push	ar4
      000D40 C0 03            [24] 2716 	push	ar3
      000D42 C0 02            [24] 2717 	push	ar2
      000D44 C0 01            [24] 2718 	push	ar1
      000D46 C0 00            [24] 2719 	push	ar0
      000D48 C0 00            [24] 2720 	push	ar0
      000D4A C0 01            [24] 2721 	push	ar1
      000D4C 74r45            [12] 2722 	mov	a,#___str_53
      000D4E C0 E0            [24] 2723 	push	acc
      000D50 74s07            [12] 2724 	mov	a,#(___str_53 >> 8)
      000D52 C0 E0            [24] 2725 	push	acc
      000D54 12r00r00         [24] 2726 	lcall	_printf_tiny
      000D57 E5 81            [12] 2727 	mov	a,sp
      000D59 24 FC            [12] 2728 	add	a,#0xfc
      000D5B F5 81            [12] 2729 	mov	sp,a
      000D5D D0 00            [24] 2730 	pop	ar0
      000D5F D0 01            [24] 2731 	pop	ar1
      000D61 D0 02            [24] 2732 	pop	ar2
      000D63 D0 03            [24] 2733 	pop	ar3
      000D65 D0 04            [24] 2734 	pop	ar4
      000D67 D0 05            [24] 2735 	pop	ar5
                                   2736 ;	main.c:365: printf_tiny("\n\rStart Address = 0x%x\n\r",(uint16_t)buffern[n-2]);
      000D69 E5*0B            [12] 2737 	mov	a,_main_sloc6_1_0
      000D6B 24 FE            [12] 2738 	add	a,#0xfe
      000D6D FB               [12] 2739 	mov	r3,a
      000D6E C2 D5            [12] 2740 	clr	F0
      000D70 75 F0 02         [24] 2741 	mov	b,#0x02
      000D73 EB               [12] 2742 	mov	a,r3
      000D74 30 E7 04         [24] 2743 	jnb	acc.7,00402$
      000D77 B2 D5            [12] 2744 	cpl	F0
      000D79 F4               [12] 2745 	cpl	a
      000D7A 04               [12] 2746 	inc	a
      000D7B                       2747 00402$:
      000D7B A4               [48] 2748 	mul	ab
      000D7C 30 D5 0A         [24] 2749 	jnb	F0,00403$
      000D7F F4               [12] 2750 	cpl	a
      000D80 24 01            [12] 2751 	add	a,#0x01
      000D82 C5 F0            [12] 2752 	xch	a,b
      000D84 F4               [12] 2753 	cpl	a
      000D85 34 00            [12] 2754 	addc	a,#0x00
      000D87 C5 F0            [12] 2755 	xch	a,b
      000D89                       2756 00403$:
      000D89 24r20            [12] 2757 	add	a,#_main_buffern_65536_69
      000D8B FA               [12] 2758 	mov	r2,a
      000D8C 74s00            [12] 2759 	mov	a,#(_main_buffern_65536_69 >> 8)
      000D8E 35 F0            [12] 2760 	addc	a,b
      000D90 FB               [12] 2761 	mov	r3,a
      000D91 8A 82            [24] 2762 	mov	dpl,r2
      000D93 8B 83            [24] 2763 	mov	dph,r3
      000D95 E0               [24] 2764 	movx	a,@dptr
      000D96 FE               [12] 2765 	mov	r6,a
      000D97 A3               [24] 2766 	inc	dptr
      000D98 E0               [24] 2767 	movx	a,@dptr
      000D99 FF               [12] 2768 	mov	r7,a
      000D9A C0 05            [24] 2769 	push	ar5
      000D9C C0 04            [24] 2770 	push	ar4
      000D9E C0 03            [24] 2771 	push	ar3
      000DA0 C0 02            [24] 2772 	push	ar2
      000DA2 C0 01            [24] 2773 	push	ar1
      000DA4 C0 00            [24] 2774 	push	ar0
      000DA6 C0 06            [24] 2775 	push	ar6
      000DA8 C0 07            [24] 2776 	push	ar7
      000DAA 74r53            [12] 2777 	mov	a,#___str_54
      000DAC C0 E0            [24] 2778 	push	acc
      000DAE 74s07            [12] 2779 	mov	a,#(___str_54 >> 8)
      000DB0 C0 E0            [24] 2780 	push	acc
      000DB2 12r00r00         [24] 2781 	lcall	_printf_tiny
      000DB5 E5 81            [12] 2782 	mov	a,sp
      000DB7 24 FC            [12] 2783 	add	a,#0xfc
      000DB9 F5 81            [12] 2784 	mov	sp,a
      000DBB D0 00            [24] 2785 	pop	ar0
      000DBD D0 01            [24] 2786 	pop	ar1
      000DBF D0 02            [24] 2787 	pop	ar2
      000DC1 D0 03            [24] 2788 	pop	ar3
      000DC3 D0 04            [24] 2789 	pop	ar4
      000DC5 D0 05            [24] 2790 	pop	ar5
                                   2791 ;	main.c:366: printf_tiny("\n\rEnding Address = 0x%x\n\r",(uint16_t)(buffern[n-2])+(uint16_t)(buffer_size[n]));
      000DC7 8A 82            [24] 2792 	mov	dpl,r2
      000DC9 8B 83            [24] 2793 	mov	dph,r3
      000DCB E0               [24] 2794 	movx	a,@dptr
      000DCC FA               [12] 2795 	mov	r2,a
      000DCD A3               [24] 2796 	inc	dptr
      000DCE E0               [24] 2797 	movx	a,@dptr
      000DCF FB               [12] 2798 	mov	r3,a
      000DD0 8A*0B            [24] 2799 	mov	_main_sloc6_1_0,r2
      000DD2 8B*0C            [24] 2800 	mov	(_main_sloc6_1_0 + 1),r3
      000DD4 E8               [12] 2801 	mov	a,r0
      000DD5 28               [12] 2802 	add	a,r0
      000DD6 FE               [12] 2803 	mov	r6,a
      000DD7 E9               [12] 2804 	mov	a,r1
      000DD8 33               [12] 2805 	rlc	a
      000DD9 FF               [12] 2806 	mov	r7,a
      000DDA EE               [12] 2807 	mov	a,r6
      000DDB 24r7A            [12] 2808 	add	a,#_main_buffer_size_65536_69
      000DDD FE               [12] 2809 	mov	r6,a
      000DDE EF               [12] 2810 	mov	a,r7
      000DDF 34s00            [12] 2811 	addc	a,#(_main_buffer_size_65536_69 >> 8)
      000DE1 FF               [12] 2812 	mov	r7,a
      000DE2 8E 82            [24] 2813 	mov	dpl,r6
      000DE4 8F 83            [24] 2814 	mov	dph,r7
      000DE6 E0               [24] 2815 	movx	a,@dptr
      000DE7 FA               [12] 2816 	mov	r2,a
      000DE8 A3               [24] 2817 	inc	dptr
      000DE9 E0               [24] 2818 	movx	a,@dptr
      000DEA FB               [12] 2819 	mov	r3,a
      000DEB EA               [12] 2820 	mov	a,r2
      000DEC 25*0B            [12] 2821 	add	a,_main_sloc6_1_0
      000DEE FA               [12] 2822 	mov	r2,a
      000DEF EB               [12] 2823 	mov	a,r3
      000DF0 35*0C            [12] 2824 	addc	a,(_main_sloc6_1_0 + 1)
      000DF2 FB               [12] 2825 	mov	r3,a
      000DF3 C0 07            [24] 2826 	push	ar7
      000DF5 C0 06            [24] 2827 	push	ar6
      000DF7 C0 05            [24] 2828 	push	ar5
      000DF9 C0 04            [24] 2829 	push	ar4
      000DFB C0 03            [24] 2830 	push	ar3
      000DFD C0 02            [24] 2831 	push	ar2
      000DFF C0 01            [24] 2832 	push	ar1
      000E01 C0 00            [24] 2833 	push	ar0
      000E03 C0 02            [24] 2834 	push	ar2
      000E05 C0 03            [24] 2835 	push	ar3
      000E07 74r6C            [12] 2836 	mov	a,#___str_55
      000E09 C0 E0            [24] 2837 	push	acc
      000E0B 74s07            [12] 2838 	mov	a,#(___str_55 >> 8)
      000E0D C0 E0            [24] 2839 	push	acc
      000E0F 12r00r00         [24] 2840 	lcall	_printf_tiny
      000E12 E5 81            [12] 2841 	mov	a,sp
      000E14 24 FC            [12] 2842 	add	a,#0xfc
      000E16 F5 81            [12] 2843 	mov	sp,a
      000E18 D0 00            [24] 2844 	pop	ar0
      000E1A D0 01            [24] 2845 	pop	ar1
      000E1C D0 02            [24] 2846 	pop	ar2
      000E1E D0 03            [24] 2847 	pop	ar3
      000E20 D0 04            [24] 2848 	pop	ar4
      000E22 D0 05            [24] 2849 	pop	ar5
      000E24 D0 06            [24] 2850 	pop	ar6
      000E26 D0 07            [24] 2851 	pop	ar7
                                   2852 ;	main.c:367: printf_tiny("\n\rBuffer Size = %d\n\r",buffer_size[n]);
      000E28 8E 82            [24] 2853 	mov	dpl,r6
      000E2A 8F 83            [24] 2854 	mov	dph,r7
      000E2C E0               [24] 2855 	movx	a,@dptr
      000E2D FA               [12] 2856 	mov	r2,a
      000E2E A3               [24] 2857 	inc	dptr
      000E2F E0               [24] 2858 	movx	a,@dptr
      000E30 FB               [12] 2859 	mov	r3,a
      000E31 C0 07            [24] 2860 	push	ar7
      000E33 C0 06            [24] 2861 	push	ar6
      000E35 C0 05            [24] 2862 	push	ar5
      000E37 C0 04            [24] 2863 	push	ar4
      000E39 C0 03            [24] 2864 	push	ar3
      000E3B C0 02            [24] 2865 	push	ar2
      000E3D C0 01            [24] 2866 	push	ar1
      000E3F C0 00            [24] 2867 	push	ar0
      000E41 C0 02            [24] 2868 	push	ar2
      000E43 C0 03            [24] 2869 	push	ar3
      000E45 74r86            [12] 2870 	mov	a,#___str_56
      000E47 C0 E0            [24] 2871 	push	acc
      000E49 74s07            [12] 2872 	mov	a,#(___str_56 >> 8)
      000E4B C0 E0            [24] 2873 	push	acc
      000E4D 12r00r00         [24] 2874 	lcall	_printf_tiny
      000E50 E5 81            [12] 2875 	mov	a,sp
      000E52 24 FC            [12] 2876 	add	a,#0xfc
      000E54 F5 81            [12] 2877 	mov	sp,a
                                   2878 ;	main.c:368: printf_tiny("\n\rStorage characters in buffer = 0\n\r");
      000E56 74r9B            [12] 2879 	mov	a,#___str_57
      000E58 C0 E0            [24] 2880 	push	acc
      000E5A 74s07            [12] 2881 	mov	a,#(___str_57 >> 8)
      000E5C C0 E0            [24] 2882 	push	acc
      000E5E 12r00r00         [24] 2883 	lcall	_printf_tiny
      000E61 15 81            [12] 2884 	dec	sp
      000E63 15 81            [12] 2885 	dec	sp
      000E65 D0 00            [24] 2886 	pop	ar0
      000E67 D0 01            [24] 2887 	pop	ar1
      000E69 D0 02            [24] 2888 	pop	ar2
      000E6B D0 03            [24] 2889 	pop	ar3
      000E6D D0 04            [24] 2890 	pop	ar4
      000E6F D0 05            [24] 2891 	pop	ar5
      000E71 D0 06            [24] 2892 	pop	ar6
      000E73 D0 07            [24] 2893 	pop	ar7
                                   2894 ;	main.c:369: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(buffer_size[n]));
      000E75 8E 82            [24] 2895 	mov	dpl,r6
      000E77 8F 83            [24] 2896 	mov	dph,r7
      000E79 E0               [24] 2897 	movx	a,@dptr
      000E7A FE               [12] 2898 	mov	r6,a
      000E7B A3               [24] 2899 	inc	dptr
      000E7C E0               [24] 2900 	movx	a,@dptr
      000E7D FF               [12] 2901 	mov	r7,a
      000E7E C0 05            [24] 2902 	push	ar5
      000E80 C0 04            [24] 2903 	push	ar4
      000E82 C0 03            [24] 2904 	push	ar3
      000E84 C0 02            [24] 2905 	push	ar2
      000E86 C0 01            [24] 2906 	push	ar1
      000E88 C0 00            [24] 2907 	push	ar0
      000E8A C0 06            [24] 2908 	push	ar6
      000E8C C0 07            [24] 2909 	push	ar7
      000E8E 74rC0            [12] 2910 	mov	a,#___str_58
      000E90 C0 E0            [24] 2911 	push	acc
      000E92 74s07            [12] 2912 	mov	a,#(___str_58 >> 8)
      000E94 C0 E0            [24] 2913 	push	acc
      000E96 12r00r00         [24] 2914 	lcall	_printf_tiny
      000E99 E5 81            [12] 2915 	mov	a,sp
      000E9B 24 FC            [12] 2916 	add	a,#0xfc
      000E9D F5 81            [12] 2917 	mov	sp,a
                                   2918 ;	main.c:370: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000E9F 74r80            [12] 2919 	mov	a,#___str_49
      000EA1 C0 E0            [24] 2920 	push	acc
      000EA3 74s06            [12] 2921 	mov	a,#(___str_49 >> 8)
      000EA5 C0 E0            [24] 2922 	push	acc
      000EA7 12r00r00         [24] 2923 	lcall	_printf_tiny
      000EAA 15 81            [12] 2924 	dec	sp
      000EAC 15 81            [12] 2925 	dec	sp
      000EAE D0 00            [24] 2926 	pop	ar0
      000EB0 D0 01            [24] 2927 	pop	ar1
      000EB2 D0 02            [24] 2928 	pop	ar2
      000EB4 D0 03            [24] 2929 	pop	ar3
      000EB6 D0 04            [24] 2930 	pop	ar4
      000EB8 D0 05            [24] 2931 	pop	ar5
                                   2932 ;	main.c:399: counter=0;
      000EBA D0 03            [24] 2933 	pop	ar3
      000EBC D0 02            [24] 2934 	pop	ar2
                                   2935 ;	main.c:370: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000EBE                       2936 00182$:
                                   2937 ;	main.c:360: for(n=2; n<=(i+2); n++)
      000EBE 08               [12] 2938 	inc	r0
      000EBF B8 00 01         [24] 2939 	cjne	r0,#0x00,00404$
      000EC2 09               [12] 2940 	inc	r1
      000EC3                       2941 00404$:
      000EC3 02r0CrE3         [24] 2942 	ljmp	00181$
      000EC6                       2943 00139$:
                                   2944 ;	main.c:376: printf_tiny("\n\rNumber of storage characters = %d\n\r",symbol_stored);
      000EC6 90r00r1A         [24] 2945 	mov	dptr,#_main_symbol_stored_65536_69
      000EC9 E0               [24] 2946 	movx	a,@dptr
      000ECA FE               [12] 2947 	mov	r6,a
      000ECB A3               [24] 2948 	inc	dptr
      000ECC E0               [24] 2949 	movx	a,@dptr
      000ECD FF               [12] 2950 	mov	r7,a
      000ECE C0 07            [24] 2951 	push	ar7
      000ED0 C0 06            [24] 2952 	push	ar6
      000ED2 C0 05            [24] 2953 	push	ar5
      000ED4 C0 04            [24] 2954 	push	ar4
      000ED6 C0 03            [24] 2955 	push	ar3
      000ED8 C0 02            [24] 2956 	push	ar2
      000EDA C0 06            [24] 2957 	push	ar6
      000EDC C0 07            [24] 2958 	push	ar7
      000EDE 74rDF            [12] 2959 	mov	a,#___str_59
      000EE0 C0 E0            [24] 2960 	push	acc
      000EE2 74s07            [12] 2961 	mov	a,#(___str_59 >> 8)
      000EE4 C0 E0            [24] 2962 	push	acc
      000EE6 12r00r00         [24] 2963 	lcall	_printf_tiny
      000EE9 E5 81            [12] 2964 	mov	a,sp
      000EEB 24 FC            [12] 2965 	add	a,#0xfc
      000EED F5 81            [12] 2966 	mov	sp,a
                                   2967 ;	main.c:377: printf_tiny("\n\rTotal number of characters received = %d\n\r",total_symbol);
      000EEF C0*00            [24] 2968 	push	_main_sloc0_1_0
      000EF1 C0*01            [24] 2969 	push	(_main_sloc0_1_0 + 1)
      000EF3 74r05            [12] 2970 	mov	a,#___str_60
      000EF5 C0 E0            [24] 2971 	push	acc
      000EF7 74s08            [12] 2972 	mov	a,#(___str_60 >> 8)
      000EF9 C0 E0            [24] 2973 	push	acc
      000EFB 12r00r00         [24] 2974 	lcall	_printf_tiny
      000EFE E5 81            [12] 2975 	mov	a,sp
      000F00 24 FC            [12] 2976 	add	a,#0xfc
      000F02 F5 81            [12] 2977 	mov	sp,a
                                   2978 ;	main.c:378: printf_tiny("\n\rTotal number of buffers that were allocated since the start of the program = %d\n\r",(j));
      000F04 C0*02            [24] 2979 	push	_main_sloc1_1_0
      000F06 C0*03            [24] 2980 	push	(_main_sloc1_1_0 + 1)
      000F08 74r32            [12] 2981 	mov	a,#___str_61
      000F0A C0 E0            [24] 2982 	push	acc
      000F0C 74s08            [12] 2983 	mov	a,#(___str_61 >> 8)
      000F0E C0 E0            [24] 2984 	push	acc
      000F10 12r00r00         [24] 2985 	lcall	_printf_tiny
      000F13 E5 81            [12] 2986 	mov	a,sp
      000F15 24 FC            [12] 2987 	add	a,#0xfc
      000F17 F5 81            [12] 2988 	mov	sp,a
      000F19 D0 02            [24] 2989 	pop	ar2
      000F1B D0 03            [24] 2990 	pop	ar3
      000F1D D0 04            [24] 2991 	pop	ar4
      000F1F D0 05            [24] 2992 	pop	ar5
      000F21 D0 06            [24] 2993 	pop	ar6
      000F23 D0 07            [24] 2994 	pop	ar7
                                   2995 ;	main.c:379: printf_tiny("\n\rTotal storage characters stored since last '?' = %d\n\r",symbol_stored);
      000F25 C0 07            [24] 2996 	push	ar7
      000F27 C0 06            [24] 2997 	push	ar6
      000F29 C0 05            [24] 2998 	push	ar5
      000F2B C0 04            [24] 2999 	push	ar4
      000F2D C0 03            [24] 3000 	push	ar3
      000F2F C0 02            [24] 3001 	push	ar2
      000F31 C0 06            [24] 3002 	push	ar6
      000F33 C0 07            [24] 3003 	push	ar7
      000F35 74r86            [12] 3004 	mov	a,#___str_62
      000F37 C0 E0            [24] 3005 	push	acc
      000F39 74s08            [12] 3006 	mov	a,#(___str_62 >> 8)
      000F3B C0 E0            [24] 3007 	push	acc
      000F3D 12r00r00         [24] 3008 	lcall	_printf_tiny
      000F40 E5 81            [12] 3009 	mov	a,sp
      000F42 24 FC            [12] 3010 	add	a,#0xfc
      000F44 F5 81            [12] 3011 	mov	sp,a
                                   3012 ;	main.c:380: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000F46 74r80            [12] 3013 	mov	a,#___str_49
      000F48 C0 E0            [24] 3014 	push	acc
      000F4A 74s06            [12] 3015 	mov	a,#(___str_49 >> 8)
      000F4C C0 E0            [24] 3016 	push	acc
      000F4E 12r00r00         [24] 3017 	lcall	_printf_tiny
      000F51 15 81            [12] 3018 	dec	sp
      000F53 15 81            [12] 3019 	dec	sp
      000F55 D0 02            [24] 3020 	pop	ar2
      000F57 D0 03            [24] 3021 	pop	ar3
      000F59 D0 04            [24] 3022 	pop	ar4
      000F5B D0 05            [24] 3023 	pop	ar5
      000F5D D0 06            [24] 3024 	pop	ar6
      000F5F D0 07            [24] 3025 	pop	ar7
                                   3026 ;	main.c:382: for(int index=0; index<symbol_stored;index++)
      000F61 8E*0B            [24] 3027 	mov	_main_sloc6_1_0,r6
      000F63 8F*0C            [24] 3028 	mov	(_main_sloc6_1_0 + 1),r7
      000F65 78 00            [12] 3029 	mov	r0,#0x00
      000F67 79 00            [12] 3030 	mov	r1,#0x00
      000F69                       3031 00184$:
      000F69 C0 02            [24] 3032 	push	ar2
      000F6B C0 03            [24] 3033 	push	ar3
      000F6D 88 02            [24] 3034 	mov	ar2,r0
      000F6F 89 03            [24] 3035 	mov	ar3,r1
      000F71 C3               [12] 3036 	clr	c
      000F72 EA               [12] 3037 	mov	a,r2
      000F73 95*0B            [12] 3038 	subb	a,_main_sloc6_1_0
      000F75 EB               [12] 3039 	mov	a,r3
      000F76 95*0C            [12] 3040 	subb	a,(_main_sloc6_1_0 + 1)
      000F78 D0 03            [24] 3041 	pop	ar3
      000F7A D0 02            [24] 3042 	pop	ar2
      000F7C 40 03            [24] 3043 	jc	00405$
      000F7E 02r10r1E         [24] 3044 	ljmp	00143$
      000F81                       3045 00405$:
                                   3046 ;	main.c:385: if(index%32!=0)
      000F81 90r00r00         [24] 3047 	mov	dptr,#__modsint_PARM_2
      000F84 74 20            [12] 3048 	mov	a,#0x20
      000F86 F0               [24] 3049 	movx	@dptr,a
      000F87 E4               [12] 3050 	clr	a
      000F88 A3               [24] 3051 	inc	dptr
      000F89 F0               [24] 3052 	movx	@dptr,a
      000F8A 88 82            [24] 3053 	mov	dpl,r0
      000F8C 89 83            [24] 3054 	mov	dph,r1
      000F8E C0 05            [24] 3055 	push	ar5
      000F90 C0 04            [24] 3056 	push	ar4
      000F92 C0 03            [24] 3057 	push	ar3
      000F94 C0 02            [24] 3058 	push	ar2
      000F96 C0 01            [24] 3059 	push	ar1
      000F98 C0 00            [24] 3060 	push	ar0
      000F9A 12r00r00         [24] 3061 	lcall	__modsint
      000F9D E5 82            [12] 3062 	mov	a,dpl
      000F9F 85 83 F0         [24] 3063 	mov	b,dph
      000FA2 D0 00            [24] 3064 	pop	ar0
      000FA4 D0 01            [24] 3065 	pop	ar1
      000FA6 D0 02            [24] 3066 	pop	ar2
      000FA8 D0 03            [24] 3067 	pop	ar3
      000FAA D0 04            [24] 3068 	pop	ar4
      000FAC D0 05            [24] 3069 	pop	ar5
      000FAE 45 F0            [12] 3070 	orl	a,b
      000FB0 60 3D            [24] 3071 	jz	00141$
                                   3072 ;	main.c:387: char a=*((buffer0)+index);
      000FB2 C0 02            [24] 3073 	push	ar2
      000FB4 C0 03            [24] 3074 	push	ar3
      000FB6 E8               [12] 3075 	mov	a,r0
      000FB7 2C               [12] 3076 	add	a,r4
      000FB8 FA               [12] 3077 	mov	r2,a
      000FB9 E9               [12] 3078 	mov	a,r1
      000FBA 3D               [12] 3079 	addc	a,r5
      000FBB FB               [12] 3080 	mov	r3,a
      000FBC 8A 82            [24] 3081 	mov	dpl,r2
      000FBE 8B 83            [24] 3082 	mov	dph,r3
      000FC0 E0               [24] 3083 	movx	a,@dptr
      000FC1 FF               [12] 3084 	mov	r7,a
                                   3085 ;	main.c:388: putchar(a);
      000FC2 7E 00            [12] 3086 	mov	r6,#0x00
      000FC4 8F 82            [24] 3087 	mov	dpl,r7
      000FC6 8E 83            [24] 3088 	mov	dph,r6
      000FC8 C0 05            [24] 3089 	push	ar5
      000FCA C0 04            [24] 3090 	push	ar4
      000FCC C0 03            [24] 3091 	push	ar3
      000FCE C0 02            [24] 3092 	push	ar2
      000FD0 C0 01            [24] 3093 	push	ar1
      000FD2 C0 00            [24] 3094 	push	ar0
      000FD4 12r00r1A         [24] 3095 	lcall	_putchar
      000FD7 D0 00            [24] 3096 	pop	ar0
      000FD9 D0 01            [24] 3097 	pop	ar1
      000FDB D0 02            [24] 3098 	pop	ar2
      000FDD D0 03            [24] 3099 	pop	ar3
      000FDF D0 04            [24] 3100 	pop	ar4
      000FE1 D0 05            [24] 3101 	pop	ar5
                                   3102 ;	main.c:389: *((buffer0)+index) = '\0';
      000FE3 8A 82            [24] 3103 	mov	dpl,r2
      000FE5 8B 83            [24] 3104 	mov	dph,r3
      000FE7 E4               [12] 3105 	clr	a
      000FE8 F0               [24] 3106 	movx	@dptr,a
      000FE9 D0 03            [24] 3107 	pop	ar3
      000FEB D0 02            [24] 3108 	pop	ar2
      000FED 80 27            [24] 3109 	sjmp	00185$
      000FEF                       3110 00141$:
                                   3111 ;	main.c:393: printf_tiny("\n\r");
      000FEF C0 05            [24] 3112 	push	ar5
      000FF1 C0 04            [24] 3113 	push	ar4
      000FF3 C0 03            [24] 3114 	push	ar3
      000FF5 C0 02            [24] 3115 	push	ar2
      000FF7 C0 01            [24] 3116 	push	ar1
      000FF9 C0 00            [24] 3117 	push	ar0
      000FFB 74rC7            [12] 3118 	mov	a,#___str_17
      000FFD C0 E0            [24] 3119 	push	acc
      000FFF 74s02            [12] 3120 	mov	a,#(___str_17 >> 8)
      001001 C0 E0            [24] 3121 	push	acc
      001003 12r00r00         [24] 3122 	lcall	_printf_tiny
      001006 15 81            [12] 3123 	dec	sp
      001008 15 81            [12] 3124 	dec	sp
      00100A D0 00            [24] 3125 	pop	ar0
      00100C D0 01            [24] 3126 	pop	ar1
      00100E D0 02            [24] 3127 	pop	ar2
      001010 D0 03            [24] 3128 	pop	ar3
      001012 D0 04            [24] 3129 	pop	ar4
      001014 D0 05            [24] 3130 	pop	ar5
      001016                       3131 00185$:
                                   3132 ;	main.c:382: for(int index=0; index<symbol_stored;index++)
      001016 08               [12] 3133 	inc	r0
      001017 B8 00 01         [24] 3134 	cjne	r0,#0x00,00407$
      00101A 09               [12] 3135 	inc	r1
      00101B                       3136 00407$:
      00101B 02r0Fr69         [24] 3137 	ljmp	00184$
      00101E                       3138 00143$:
                                   3139 ;	main.c:398: symbol_stored=0;
      00101E 90r00r1A         [24] 3140 	mov	dptr,#_main_symbol_stored_65536_69
      001021 E4               [12] 3141 	clr	a
      001022 F0               [24] 3142 	movx	@dptr,a
      001023 A3               [24] 3143 	inc	dptr
      001024 F0               [24] 3144 	movx	@dptr,a
                                   3145 ;	main.c:399: counter=0;
      001025 90r00r1C         [24] 3146 	mov	dptr,#_main_counter_65536_69
      001028 F0               [24] 3147 	movx	@dptr,a
      001029 A3               [24] 3148 	inc	dptr
      00102A F0               [24] 3149 	movx	@dptr,a
                                   3150 ;	main.c:403: }
      00102B 02r03rF4         [24] 3151 	ljmp	00172$
                                   3152 	.area CSEG    (CODE)
                                   3153 	.area CONST   (CODE)
                                   3154 	.area CONST   (CODE)
      000000                       3155 ___str_0:
      000000 0A                    3156 	.db 0x0a
      000001 20                    3157 	.ascii " "
      000002 0D                    3158 	.db 0x0d
      000003 20 54 68 65 20 69 6E  3159 	.ascii " The input number is:%d "
             70 75 74 20 6E 75 6D
             62 65 72 20 69 73 3A
             25 64 20
      00001B 0A                    3160 	.db 0x0a
      00001C 20                    3161 	.ascii " "
      00001D 0D                    3162 	.db 0x0d
      00001E 00                    3163 	.db 0x00
                                   3164 	.area CSEG    (CODE)
                                   3165 	.area CONST   (CODE)
      00001F                       3166 ___str_1:
      00001F 49 6E 76 61 6C 69 64  3167 	.ascii "Invalid number! Please try again."
             20 6E 75 6D 62 65 72
             21 20 50 6C 65 61 73
             65 20 74 72 79 20 61
             67 61 69 6E 2E
      000040 0A                    3168 	.db 0x0a
      000041 20                    3169 	.ascii " "
      000042 0D                    3170 	.db 0x0d
      000043 00                    3171 	.db 0x00
                                   3172 	.area CSEG    (CODE)
                                   3173 	.area CONST   (CODE)
      000044                       3174 ___str_2:
      000044 0A                    3175 	.db 0x0a
      000045 0D                    3176 	.db 0x0d
      000046 2A 2A 2A 2A 2A 2A 2A  3177 	.ascii "********* HELLO :) ********"
             2A 2A 20 48 45 4C 4C
             4F 20 3A 29 20 2A 2A
             2A 2A 2A 2A 2A 2A
      000061 0A                    3178 	.db 0x0a
      000062 0D                    3179 	.db 0x0d
      000063 00                    3180 	.db 0x00
                                   3181 	.area CSEG    (CODE)
                                   3182 	.area CONST   (CODE)
      000064                       3183 ___str_3:
      000064 0A                    3184 	.db 0x0a
      000065 0D                    3185 	.db 0x0d
      000066 45 6E 74 65 72 20 61  3186 	.ascii "Enter a number between 32 & 4800 for buffer size"
             20 6E 75 6D 62 65 72
             20 62 65 74 77 65 65
             6E 20 33 32 20 26 20
             34 38 30 30 20 66 6F
             72 20 62 75 66 66 65
             72 20 73 69 7A 65
      000096 0A                    3187 	.db 0x0a
      000097 0D                    3188 	.db 0x0d
      000098 00                    3189 	.db 0x00
                                   3190 	.area CSEG    (CODE)
                                   3191 	.area CONST   (CODE)
      000099                       3192 ___str_4:
      000099 62 75 66 66 65 72 20  3193 	.ascii "buffer 0 creation is failed"
             30 20 63 72 65 61 74
             69 6F 6E 20 69 73 20
             66 61 69 6C 65 64
      0000B4 0A                    3194 	.db 0x0a
      0000B5 0D                    3195 	.db 0x0d
      0000B6 00                    3196 	.db 0x00
                                   3197 	.area CSEG    (CODE)
                                   3198 	.area CONST   (CODE)
      0000B7                       3199 ___str_5:
      0000B7 62 75 66 66 65 72 20  3200 	.ascii "buffer 1 creation is failed"
             31 20 63 72 65 61 74
             69 6F 6E 20 69 73 20
             66 61 69 6C 65 64
      0000D2 0A                    3201 	.db 0x0a
      0000D3 0D                    3202 	.db 0x0d
      0000D4 00                    3203 	.db 0x00
                                   3204 	.area CSEG    (CODE)
                                   3205 	.area CONST   (CODE)
      0000D5                       3206 ___str_6:
      0000D5 53 74 61 72 74 20 41  3207 	.ascii "Start Address of buffer0 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 30 20 3D 20 30
             78 25 78
      0000F4 0A                    3208 	.db 0x0a
      0000F5 0D                    3209 	.db 0x0d
      0000F6 00                    3210 	.db 0x00
                                   3211 	.area CSEG    (CODE)
                                   3212 	.area CONST   (CODE)
      0000F7                       3213 ___str_7:
      0000F7 53 74 61 72 74 20 41  3214 	.ascii "Start Address of buffer1 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 31 20 3D 20 30
             78 25 78
      000116 0A                    3215 	.db 0x0a
      000117 0D                    3216 	.db 0x0d
      000118 00                    3217 	.db 0x00
                                   3218 	.area CSEG    (CODE)
                                   3219 	.area CONST   (CODE)
      000119                       3220 ___str_8:
      000119 42 75 66 66 65 72 5F  3221 	.ascii "Buffer_0 and Buffer_1 successfully created"
             30 20 61 6E 64 20 42
             75 66 66 65 72 5F 31
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             63 72 65 61 74 65 64
      000143 0A                    3222 	.db 0x0a
      000144 0D                    3223 	.db 0x0d
      000145 00                    3224 	.db 0x00
                                   3225 	.area CSEG    (CODE)
                                   3226 	.area CONST   (CODE)
      000146                       3227 ___str_9:
      000146 0A                    3228 	.db 0x0a
      000147 0D                    3229 	.db 0x0d
      000148 20 4F 50 54 49 4F 4E  3230 	.ascii " OPTIONS TO CHOOSE "
             53 20 54 4F 20 43 48
             4F 4F 53 45 20
      00015B 0A                    3231 	.db 0x0a
      00015C 0D                    3232 	.db 0x0d
      00015D 00                    3233 	.db 0x00
                                   3234 	.area CSEG    (CODE)
                                   3235 	.area CONST   (CODE)
      00015E                       3236 ___str_10:
      00015E 59 6F 75 20 63 61 6E  3237 	.ascii "You can enter characters to be stored in buffer 0"
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 74 6F 20
             62 65 20 73 74 6F 72
             65 64 20 69 6E 20 62
             75 66 66 65 72 20 30
      00018F 0A                    3238 	.db 0x0a
      000190 0D                    3239 	.db 0x0d
      000191 00                    3240 	.db 0x00
                                   3241 	.area CSEG    (CODE)
                                   3242 	.area CONST   (CODE)
      000192                       3243 ___str_11:
      000192 45 6E 74 65 72 20 2B  3244 	.ascii "Enter + to create a new buffer of size between 20 and 400 by"
             20 74 6F 20 63 72 65
             61 74 65 20 61 20 6E
             65 77 20 62 75 66 66
             65 72 20 6F 66 20 73
             69 7A 65 20 62 65 74
             77 65 65 6E 20 32 30
             20 61 6E 64 20 34 30
             30 20 62 79
      0001CE 74 65 73              3245 	.ascii "tes"
      0001D1 0A                    3246 	.db 0x0a
      0001D2 0D                    3247 	.db 0x0d
      0001D3 00                    3248 	.db 0x00
                                   3249 	.area CSEG    (CODE)
                                   3250 	.area CONST   (CODE)
      0001D4                       3251 ___str_12:
      0001D4 45 6E 74 65 72 20 2D  3252 	.ascii "Enter - to delete a buffer."
             20 74 6F 20 64 65 6C
             65 74 65 20 61 20 62
             75 66 66 65 72 2E
      0001EF 0A                    3253 	.db 0x0a
      0001F0 0D                    3254 	.db 0x0d
      0001F1 00                    3255 	.db 0x00
                                   3256 	.area CSEG    (CODE)
                                   3257 	.area CONST   (CODE)
      0001F2                       3258 ___str_13:
      0001F2 45 6E 74 65 72 20 3F  3259 	.ascii "Enter ? to generate a heap report."
             20 74 6F 20 67 65 6E
             65 72 61 74 65 20 61
             20 68 65 61 70 20 72
             65 70 6F 72 74 2E
      000214 0A                    3260 	.db 0x0a
      000215 0D                    3261 	.db 0x0d
      000216 00                    3262 	.db 0x00
                                   3263 	.area CSEG    (CODE)
                                   3264 	.area CONST   (CODE)
      000217                       3265 ___str_14:
      000217 45 6E 74 65 72 20 3D  3266 	.ascii "Enter = to display current contents of buffer 0."
             20 74 6F 20 64 69 73
             70 6C 61 79 20 63 75
             72 72 65 6E 74 20 63
             6F 6E 74 65 6E 74 73
             20 6F 66 20 62 75 66
             66 65 72 20 30 2E
      000247 0A                    3267 	.db 0x0a
      000248 0D                    3268 	.db 0x0d
      000249 00                    3269 	.db 0x00
                                   3270 	.area CSEG    (CODE)
                                   3271 	.area CONST   (CODE)
      00024A                       3272 ___str_15:
      00024A 45 6E 74 65 72 20 40  3273 	.ascii "Enter @ to free all buffers and start program again."
             20 74 6F 20 66 72 65
             65 20 61 6C 6C 20 62
             75 66 66 65 72 73 20
             61 6E 64 20 73 74 61
             72 74 20 70 72 6F 67
             72 61 6D 20 61 67 61
             69 6E 2E
      00027E 0A                    3274 	.db 0x0a
      00027F 0D                    3275 	.db 0x0d
      000280 00                    3276 	.db 0x00
                                   3277 	.area CSEG    (CODE)
                                   3278 	.area CONST   (CODE)
      000281                       3279 ___str_16:
      000281 0A                    3280 	.db 0x0a
      000282 0D                    3281 	.db 0x0d
      000283 2A 2A 2A 2A 2A 2A 2A  3282 	.ascii "****************************THANK YOU***********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             54 48 41 4E 4B 20 59
             4F 55 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0002BF 2A 2A 2A 2A 2A        3283 	.ascii "*****"
      0002C4 0A                    3284 	.db 0x0a
      0002C5 0D                    3285 	.db 0x0d
      0002C6 00                    3286 	.db 0x00
                                   3287 	.area CSEG    (CODE)
                                   3288 	.area CONST   (CODE)
      0002C7                       3289 ___str_17:
      0002C7 0A                    3290 	.db 0x0a
      0002C8 0D                    3291 	.db 0x0d
      0002C9 00                    3292 	.db 0x00
                                   3293 	.area CSEG    (CODE)
                                   3294 	.area CONST   (CODE)
      0002CA                       3295 ___str_18:
      0002CA 0A                    3296 	.db 0x0a
      0002CB 0D                    3297 	.db 0x0d
      0002CC 62 75 66 66 65 72 20  3298 	.ascii "buffer 0 is full."
             30 20 69 73 20 66 75
             6C 6C 2E
      0002DD 0A                    3299 	.db 0x0a
      0002DE 0D                    3300 	.db 0x0d
      0002DF 00                    3301 	.db 0x00
                                   3302 	.area CSEG    (CODE)
                                   3303 	.area CONST   (CODE)
      0002E0                       3304 ___str_19:
      0002E0 0A                    3305 	.db 0x0a
      0002E1 0D                    3306 	.db 0x0d
      0002E2 20 43 72 65 61 74 65  3307 	.ascii " Creates a new buffer "
             73 20 61 20 6E 65 77
             20 62 75 66 66 65 72
             20
      0002F8 0A                    3308 	.db 0x0a
      0002F9 0D                    3309 	.db 0x0d
      0002FA 00                    3310 	.db 0x00
                                   3311 	.area CSEG    (CODE)
                                   3312 	.area CONST   (CODE)
      0002FB                       3313 ___str_20:
      0002FB 0A                    3314 	.db 0x0a
      0002FC 0D                    3315 	.db 0x0d
      0002FD 45 6E 74 65 72 20 74  3316 	.ascii "Enter the new buffer size between 20 and 400"
             68 65 20 6E 65 77 20
             62 75 66 66 65 72 20
             73 69 7A 65 20 62 65
             74 77 65 65 6E 20 32
             30 20 61 6E 64 20 34
             30 30
      000329 0A                    3317 	.db 0x0a
      00032A 0D                    3318 	.db 0x0d
      00032B 00                    3319 	.db 0x00
                                   3320 	.area CSEG    (CODE)
                                   3321 	.area CONST   (CODE)
      00032C                       3322 ___str_21:
      00032C 0A                    3323 	.db 0x0a
      00032D 0D                    3324 	.db 0x0d
      00032E 4D 65 6D 6F 72 79 20  3325 	.ascii "Memory Allocation for Buffer_%d Failed"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 66 6F 72
             20 42 75 66 66 65 72
             5F 25 64 20 46 61 69
             6C 65 64
      000354 0A                    3326 	.db 0x0a
      000355 0D                    3327 	.db 0x0d
      000356 50 72 65 73 73 20 27  3328 	.ascii "Press '+' to Try again"
             2B 27 20 74 6F 20 54
             72 79 20 61 67 61 69
             6E
      00036C 0A                    3329 	.db 0x0a
      00036D 0D                    3330 	.db 0x0d
      00036E 00                    3331 	.db 0x00
                                   3332 	.area CSEG    (CODE)
                                   3333 	.area CONST   (CODE)
      00036F                       3334 ___str_22:
      00036F 0A                    3335 	.db 0x0a
      000370 0D                    3336 	.db 0x0d
      000371 20 53 75 63 63 65 73  3337 	.ascii " Successful allocated memory for Buffer_%d"
             73 66 75 6C 20 61 6C
             6C 6F 63 61 74 65 64
             20 6D 65 6D 6F 72 79
             20 66 6F 72 20 42 75
             66 66 65 72 5F 25 64
      00039B 0A                    3338 	.db 0x0a
      00039C 0D                    3339 	.db 0x0d
      00039D 00                    3340 	.db 0x00
                                   3341 	.area CSEG    (CODE)
                                   3342 	.area CONST   (CODE)
      00039E                       3343 ___str_23:
      00039E 0A                    3344 	.db 0x0a
      00039F 0D                    3345 	.db 0x0d
      0003A0 42 75 66 66 65 72 5F  3346 	.ascii "Buffer_%d has allocated a size of %d"
             25 64 20 68 61 73 20
             61 6C 6C 6F 63 61 74
             65 64 20 61 20 73 69
             7A 65 20 6F 66 20 25
             64
      0003C4 0A                    3347 	.db 0x0a
      0003C5 0D                    3348 	.db 0x0d
      0003C6 00                    3349 	.db 0x00
                                   3350 	.area CSEG    (CODE)
                                   3351 	.area CONST   (CODE)
      0003C7                       3352 ___str_24:
      0003C7 0A                    3353 	.db 0x0a
      0003C8 0D                    3354 	.db 0x0d
      0003C9 53 74 61 72 74 20 41  3355 	.ascii "Start Address of buffer_%d = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 25 64 20 3D
             20 30 78 25 78
      0003EA 0A                    3356 	.db 0x0a
      0003EB 0D                    3357 	.db 0x0d
      0003EC 00                    3358 	.db 0x00
                                   3359 	.area CSEG    (CODE)
                                   3360 	.area CONST   (CODE)
      0003ED                       3361 ___str_25:
      0003ED 0A                    3362 	.db 0x0a
      0003EE 0D                    3363 	.db 0x0d
      0003EF 45 6E 74 65 72 20 61  3364 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      00040A 0A                    3365 	.db 0x0a
      00040B 0D                    3366 	.db 0x0d
      00040C 00                    3367 	.db 0x00
                                   3368 	.area CSEG    (CODE)
                                   3369 	.area CONST   (CODE)
      00040D                       3370 ___str_26:
      00040D 0A                    3371 	.db 0x0a
      00040E 0D                    3372 	.db 0x0d
      00040F 42 75 66 66 65 72 20  3373 	.ascii "Buffer 0 cannot be deleted!"
             30 20 63 61 6E 6E 6F
             74 20 62 65 20 64 65
             6C 65 74 65 64 21
      00042A 0A                    3374 	.db 0x0a
      00042B 0D                    3375 	.db 0x0d
      00042C 00                    3376 	.db 0x00
                                   3377 	.area CSEG    (CODE)
                                   3378 	.area CONST   (CODE)
      00042D                       3379 ___str_27:
      00042D 0A                    3380 	.db 0x0a
      00042E 0D                    3381 	.db 0x0d
      00042F 44 65 6C 65 74 69 6E  3382 	.ascii "Deleting buffer 1"
             67 20 62 75 66 66 65
             72 20 31
      000440 0A                    3383 	.db 0x0a
      000441 0D                    3384 	.db 0x0d
      000442 00                    3385 	.db 0x00
                                   3386 	.area CSEG    (CODE)
                                   3387 	.area CONST   (CODE)
      000443                       3388 ___str_28:
      000443 42 75 66 66 65 72 20  3389 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      000453 00                    3390 	.db 0x00
                                   3391 	.area CSEG    (CODE)
                                   3392 	.area CONST   (CODE)
      000454                       3393 ___str_29:
      000454 0A                    3394 	.db 0x0a
      000455 0D                    3395 	.db 0x0d
      000456 44 65 6C 65 74 69 6E  3396 	.ascii "Deleting buffer %d "
             67 20 62 75 66 66 65
             72 20 25 64 20
      000469 0A                    3397 	.db 0x0a
      00046A 0D                    3398 	.db 0x0d
      00046B 00                    3399 	.db 0x00
                                   3400 	.area CSEG    (CODE)
                                   3401 	.area CONST   (CODE)
      00046C                       3402 ___str_30:
      00046C 0A                    3403 	.db 0x0a
      00046D 0D                    3404 	.db 0x0d
      00046E 42 75 66 66 65 72 20  3405 	.ascii "Buffer %d is Free"
             25 64 20 69 73 20 46
             72 65 65
      00047F 0A                    3406 	.db 0x0a
      000480 0D                    3407 	.db 0x0d
      000481 00                    3408 	.db 0x00
                                   3409 	.area CSEG    (CODE)
                                   3410 	.area CONST   (CODE)
      000482                       3411 ___str_31:
      000482 0A                    3412 	.db 0x0a
      000483 0D                    3413 	.db 0x0d
      000484 45 6E 74 65 72 20 61  3414 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      00049F 0A                    3415 	.db 0x0a
      0004A0 0D                    3416 	.db 0x0d
      0004A1 50 72 65 73 73 20 27  3417 	.ascii "Press '-' to delete any valid buffer"
             2D 27 20 74 6F 20 64
             65 6C 65 74 65 20 61
             6E 79 20 76 61 6C 69
             64 20 62 75 66 66 65
             72
      0004C5 0A                    3418 	.db 0x0a
      0004C6 0D                    3419 	.db 0x0d
      0004C7 00                    3420 	.db 0x00
                                   3421 	.area CSEG    (CODE)
                                   3422 	.area CONST   (CODE)
      0004C8                       3423 ___str_32:
      0004C8 0A                    3424 	.db 0x0a
      0004C9 0D                    3425 	.db 0x0d
      0004CA 54 68 65 20 53 74 6F  3426 	.ascii "The Stored Characters in Buffer 0 are"
             72 65 64 20 43 68 61
             72 61 63 74 65 72 73
             20 69 6E 20 42 75 66
             66 65 72 20 30 20 61
             72 65
      0004EF 0A                    3427 	.db 0x0a
      0004F0 0D                    3428 	.db 0x0d
      0004F1 00                    3429 	.db 0x00
                                   3430 	.area CSEG    (CODE)
                                   3431 	.area CONST   (CODE)
      0004F2                       3432 ___str_33:
      0004F2 30 78 25 78 20 3E 3E  3433 	.ascii "0x%x >> %x"
             20 25 78
      0004FC 00                    3434 	.db 0x00
                                   3435 	.area CSEG    (CODE)
                                   3436 	.area CONST   (CODE)
      0004FD                       3437 ___str_34:
      0004FD 20 25 78              3438 	.ascii " %x"
      000500 00                    3439 	.db 0x00
                                   3440 	.area CSEG    (CODE)
                                   3441 	.area CONST   (CODE)
      000501                       3442 ___str_35:
      000501 0A                    3443 	.db 0x0a
      000502 0D                    3444 	.db 0x0d
      000503 30 78 25 78 3E 3E 20  3445 	.ascii "0x%x>> %x"
             25 78
      00050C 00                    3446 	.db 0x00
                                   3447 	.area CSEG    (CODE)
                                   3448 	.area CONST   (CODE)
      00050D                       3449 ___str_36:
      00050D 0A                    3450 	.db 0x0a
      00050E 0D                    3451 	.db 0x0d
      00050F 44 65 6C 65 74 69 6E  3452 	.ascii "Deleting Buffer 0 "
             67 20 42 75 66 66 65
             72 20 30 20
      000521 0A                    3453 	.db 0x0a
      000522 0D                    3454 	.db 0x0d
      000523 00                    3455 	.db 0x00
                                   3456 	.area CSEG    (CODE)
                                   3457 	.area CONST   (CODE)
      000524                       3458 ___str_37:
      000524 0A                    3459 	.db 0x0a
      000525 0D                    3460 	.db 0x0d
      000526 42 75 66 66 65 72 20  3461 	.ascii "Buffer 0 is free"
             30 20 69 73 20 66 72
             65 65
      000536 0A                    3462 	.db 0x0a
      000537 0D                    3463 	.db 0x0d
      000538 00                    3464 	.db 0x00
                                   3465 	.area CSEG    (CODE)
                                   3466 	.area CONST   (CODE)
      000539                       3467 ___str_38:
      000539 0A                    3468 	.db 0x0a
      00053A 0D                    3469 	.db 0x0d
      00053B 44 65 6C 65 74 69 6E  3470 	.ascii "Deleting Buffer 1 "
             67 20 42 75 66 66 65
             72 20 31 20
      00054D 0A                    3471 	.db 0x0a
      00054E 0D                    3472 	.db 0x0d
      00054F 00                    3473 	.db 0x00
                                   3474 	.area CSEG    (CODE)
                                   3475 	.area CONST   (CODE)
      000550                       3476 ___str_39:
      000550 0A                    3477 	.db 0x0a
      000551 0D                    3478 	.db 0x0d
      000552 42 75 66 66 65 72 20  3479 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      000562 0A                    3480 	.db 0x0a
      000563 0D                    3481 	.db 0x0d
      000564 00                    3482 	.db 0x00
                                   3483 	.area CSEG    (CODE)
                                   3484 	.area CONST   (CODE)
      000565                       3485 ___str_40:
      000565 0A                    3486 	.db 0x0a
      000566 0D                    3487 	.db 0x0d
      000567 44 65 6C 65 74 69 6E  3488 	.ascii "Deleting buffer_%d "
             67 20 62 75 66 66 65
             72 5F 25 64 20
      00057A 0A                    3489 	.db 0x0a
      00057B 0D                    3490 	.db 0x0d
      00057C 00                    3491 	.db 0x00
                                   3492 	.area CSEG    (CODE)
                                   3493 	.area CONST   (CODE)
      00057D                       3494 ___str_41:
      00057D 0A                    3495 	.db 0x0a
      00057E 0D                    3496 	.db 0x0d
      00057F 42 75 66 66 65 72 20  3497 	.ascii "Buffer %d is free "
             25 64 20 69 73 20 66
             72 65 65 20
      000591 0A                    3498 	.db 0x0a
      000592 0D                    3499 	.db 0x0d
      000593 00                    3500 	.db 0x00
                                   3501 	.area CSEG    (CODE)
                                   3502 	.area CONST   (CODE)
      000594                       3503 ___str_42:
      000594 2A 2A 2A 2A 2A 2A 2A  3504 	.ascii "******************** REPORT OF HEAP *********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 20
             52 45 50 4F 52 54 20
             4F 46 20 48 45 41 50
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A
      0005CD 00                    3505 	.db 0x00
                                   3506 	.area CSEG    (CODE)
                                   3507 	.area CONST   (CODE)
      0005CE                       3508 ___str_43:
      0005CE 0A                    3509 	.db 0x0a
      0005CF 0D                    3510 	.db 0x0d
      0005D0 42 75 66 66 65 72 20  3511 	.ascii "Buffer 0"
             30
      0005D8 0A                    3512 	.db 0x0a
      0005D9 0D                    3513 	.db 0x0d
      0005DA 00                    3514 	.db 0x00
                                   3515 	.area CSEG    (CODE)
                                   3516 	.area CONST   (CODE)
      0005DB                       3517 ___str_44:
      0005DB 0A                    3518 	.db 0x0a
      0005DC 0D                    3519 	.db 0x0d
      0005DD 49 74 73 20 53 74 61  3520 	.ascii "Its Start Address  = 0x%x"
             72 74 20 41 64 64 72
             65 73 73 20 20 3D 20
             30 78 25 78
      0005F6 0A                    3521 	.db 0x0a
      0005F7 0D                    3522 	.db 0x0d
      0005F8 00                    3523 	.db 0x00
                                   3524 	.area CSEG    (CODE)
                                   3525 	.area CONST   (CODE)
      0005F9                       3526 ___str_45:
      0005F9 0A                    3527 	.db 0x0a
      0005FA 0D                    3528 	.db 0x0d
      0005FB 49 74 73 20 45 6E 64  3529 	.ascii "Its Ending Address = 0x%x"
             69 6E 67 20 41 64 64
             72 65 73 73 20 3D 20
             30 78 25 78
      000614 0A                    3530 	.db 0x0a
      000615 0D                    3531 	.db 0x0d
      000616 00                    3532 	.db 0x00
                                   3533 	.area CSEG    (CODE)
                                   3534 	.area CONST   (CODE)
      000617                       3535 ___str_46:
      000617 0A                    3536 	.db 0x0a
      000618 0D                    3537 	.db 0x0d
      000619 49 74 73 20 53 69 7A  3538 	.ascii "Its Size = %d"
             65 20 3D 20 25 64
      000626 0A                    3539 	.db 0x0a
      000627 0D                    3540 	.db 0x0d
      000628 00                    3541 	.db 0x00
                                   3542 	.area CSEG    (CODE)
                                   3543 	.area CONST   (CODE)
      000629                       3544 ___str_47:
      000629 0A                    3545 	.db 0x0a
      00062A 0D                    3546 	.db 0x0d
      00062B 43 75 72 72 65 6E 74  3547 	.ascii "Current Storage characters in buffer 0 = %d"
             20 53 74 6F 72 61 67
             65 20 63 68 61 72 61
             63 74 65 72 73 20 69
             6E 20 62 75 66 66 65
             72 20 30 20 3D 20 25
             64
      000656 0A                    3548 	.db 0x0a
      000657 0D                    3549 	.db 0x0d
      000658 00                    3550 	.db 0x00
                                   3551 	.area CSEG    (CODE)
                                   3552 	.area CONST   (CODE)
      000659                       3553 ___str_48:
      000659 0A                    3554 	.db 0x0a
      00065A 0D                    3555 	.db 0x0d
      00065B 43 75 72 72 65 6E 74  3556 	.ascii "Current Free Spaces in buffer = %d"
             20 46 72 65 65 20 53
             70 61 63 65 73 20 69
             6E 20 62 75 66 66 65
             72 20 3D 20 25 64
      00067D 0A                    3557 	.db 0x0a
      00067E 0D                    3558 	.db 0x0d
      00067F 00                    3559 	.db 0x00
                                   3560 	.area CSEG    (CODE)
                                   3561 	.area CONST   (CODE)
      000680                       3562 ___str_49:
      000680 0A                    3563 	.db 0x0a
      000681 0D                    3564 	.db 0x0d
      000682 2D 2D 2D 2D 2D 2D 2D  3565 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0006BE 2D 2D 2D 2D 2D 2D 2D  3566 	.ascii "-----------"
             2D 2D 2D 2D
      0006C9 0A                    3567 	.db 0x0a
      0006CA 0D                    3568 	.db 0x0d
      0006CB 00                    3569 	.db 0x00
                                   3570 	.area CSEG    (CODE)
                                   3571 	.area CONST   (CODE)
      0006CC                       3572 ___str_50:
      0006CC 0A                    3573 	.db 0x0a
      0006CD 0D                    3574 	.db 0x0d
      0006CE 42 75 66 66 65 72 20  3575 	.ascii "Buffer 1"
             31
      0006D6 0A                    3576 	.db 0x0a
      0006D7 0D                    3577 	.db 0x0d
      0006D8 00                    3578 	.db 0x00
                                   3579 	.area CSEG    (CODE)
                                   3580 	.area CONST   (CODE)
      0006D9                       3581 ___str_51:
      0006D9 0A                    3582 	.db 0x0a
      0006DA 0D                    3583 	.db 0x0d
      0006DB 49 74 73 20 53 74 61  3584 	.ascii "Its Start Address = 0x%x"
             72 74 20 41 64 64 72
             65 73 73 20 3D 20 30
             78 25 78
      0006F3 0A                    3585 	.db 0x0a
      0006F4 0D                    3586 	.db 0x0d
      0006F5 00                    3587 	.db 0x00
                                   3588 	.area CSEG    (CODE)
                                   3589 	.area CONST   (CODE)
      0006F6                       3590 ___str_52:
      0006F6 0A                    3591 	.db 0x0a
      0006F7 0D                    3592 	.db 0x0d
      0006F8 53 74 6F 72 61 67 65  3593 	.ascii "Storage characters in buffer =0, because storage characters "
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 30 2C 20 62 65
             63 61 75 73 65 20 73
             74 6F 72 61 67 65 20
             63 68 61 72 61 63 74
             65 72 73 20
      000734 61 72 65 20 40 20 62  3594 	.ascii "are @ buffer 0"
             75 66 66 65 72 20 30
      000742 0A                    3595 	.db 0x0a
      000743 0D                    3596 	.db 0x0d
      000744 00                    3597 	.db 0x00
                                   3598 	.area CSEG    (CODE)
                                   3599 	.area CONST   (CODE)
      000745                       3600 ___str_53:
      000745 0A                    3601 	.db 0x0a
      000746 0D                    3602 	.db 0x0d
      000747 42 75 66 66 65 72 20  3603 	.ascii "Buffer %d"
             25 64
      000750 0A                    3604 	.db 0x0a
      000751 0D                    3605 	.db 0x0d
      000752 00                    3606 	.db 0x00
                                   3607 	.area CSEG    (CODE)
                                   3608 	.area CONST   (CODE)
      000753                       3609 ___str_54:
      000753 0A                    3610 	.db 0x0a
      000754 0D                    3611 	.db 0x0d
      000755 53 74 61 72 74 20 41  3612 	.ascii "Start Address = 0x%x"
             64 64 72 65 73 73 20
             3D 20 30 78 25 78
      000769 0A                    3613 	.db 0x0a
      00076A 0D                    3614 	.db 0x0d
      00076B 00                    3615 	.db 0x00
                                   3616 	.area CSEG    (CODE)
                                   3617 	.area CONST   (CODE)
      00076C                       3618 ___str_55:
      00076C 0A                    3619 	.db 0x0a
      00076D 0D                    3620 	.db 0x0d
      00076E 45 6E 64 69 6E 67 20  3621 	.ascii "Ending Address = 0x%x"
             41 64 64 72 65 73 73
             20 3D 20 30 78 25 78
      000783 0A                    3622 	.db 0x0a
      000784 0D                    3623 	.db 0x0d
      000785 00                    3624 	.db 0x00
                                   3625 	.area CSEG    (CODE)
                                   3626 	.area CONST   (CODE)
      000786                       3627 ___str_56:
      000786 0A                    3628 	.db 0x0a
      000787 0D                    3629 	.db 0x0d
      000788 42 75 66 66 65 72 20  3630 	.ascii "Buffer Size = %d"
             53 69 7A 65 20 3D 20
             25 64
      000798 0A                    3631 	.db 0x0a
      000799 0D                    3632 	.db 0x0d
      00079A 00                    3633 	.db 0x00
                                   3634 	.area CSEG    (CODE)
                                   3635 	.area CONST   (CODE)
      00079B                       3636 ___str_57:
      00079B 0A                    3637 	.db 0x0a
      00079C 0D                    3638 	.db 0x0d
      00079D 53 74 6F 72 61 67 65  3639 	.ascii "Storage characters in buffer = 0"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 30
      0007BD 0A                    3640 	.db 0x0a
      0007BE 0D                    3641 	.db 0x0d
      0007BF 00                    3642 	.db 0x00
                                   3643 	.area CSEG    (CODE)
                                   3644 	.area CONST   (CODE)
      0007C0                       3645 ___str_58:
      0007C0 0A                    3646 	.db 0x0a
      0007C1 0D                    3647 	.db 0x0d
      0007C2 46 72 65 65 20 53 70  3648 	.ascii "Free Spaces in buffer = %d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 25 64
      0007DC 0A                    3649 	.db 0x0a
      0007DD 0D                    3650 	.db 0x0d
      0007DE 00                    3651 	.db 0x00
                                   3652 	.area CSEG    (CODE)
                                   3653 	.area CONST   (CODE)
      0007DF                       3654 ___str_59:
      0007DF 0A                    3655 	.db 0x0a
      0007E0 0D                    3656 	.db 0x0d
      0007E1 4E 75 6D 62 65 72 20  3657 	.ascii "Number of storage characters = %d"
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 20 25 64
      000802 0A                    3658 	.db 0x0a
      000803 0D                    3659 	.db 0x0d
      000804 00                    3660 	.db 0x00
                                   3661 	.area CSEG    (CODE)
                                   3662 	.area CONST   (CODE)
      000805                       3663 ___str_60:
      000805 0A                    3664 	.db 0x0a
      000806 0D                    3665 	.db 0x0d
      000807 54 6F 74 61 6C 20 6E  3666 	.ascii "Total number of characters received = %d"
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 3D 20 25 64
      00082F 0A                    3667 	.db 0x0a
      000830 0D                    3668 	.db 0x0d
      000831 00                    3669 	.db 0x00
                                   3670 	.area CSEG    (CODE)
                                   3671 	.area CONST   (CODE)
      000832                       3672 ___str_61:
      000832 0A                    3673 	.db 0x0a
      000833 0D                    3674 	.db 0x0d
      000834 54 6F 74 61 6C 20 6E  3675 	.ascii "Total number of buffers that were allocated since the start "
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 74 68 61 74
             20 77 65 72 65 20 61
             6C 6C 6F 63 61 74 65
             64 20 73 69 6E 63 65
             20 74 68 65 20 73 74
             61 72 74 20
      000870 6F 66 20 74 68 65 20  3676 	.ascii "of the program = %d"
             70 72 6F 67 72 61 6D
             20 3D 20 25 64
      000883 0A                    3677 	.db 0x0a
      000884 0D                    3678 	.db 0x0d
      000885 00                    3679 	.db 0x00
                                   3680 	.area CSEG    (CODE)
                                   3681 	.area CONST   (CODE)
      000886                       3682 ___str_62:
      000886 0A                    3683 	.db 0x0a
      000887 0D                    3684 	.db 0x0d
      000888 54 6F 74 61 6C 20 73  3685 	.ascii "Total storage characters stored since last '?' = %d"
             74 6F 72 61 67 65 20
             63 68 61 72 61 63 74
             65 72 73 20 73 74 6F
             72 65 64 20 73 69 6E
             63 65 20 6C 61 73 74
             20 27 3F 27 20 3D 20
             25 64
      0008BB 0A                    3686 	.db 0x0a
      0008BC 0D                    3687 	.db 0x0d
      0008BD 00                    3688 	.db 0x00
                                   3689 	.area CSEG    (CODE)
                                   3690 	.area XINIT   (CODE)
                                   3691 	.area CABS    (ABS,CODE)
