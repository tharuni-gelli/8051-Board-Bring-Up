                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module i2c
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _getchar
                                     12 	.globl _putchar
                                     13 	.globl _delay_us
                                     14 	.globl _powf
                                     15 	.globl _printf_tiny
                                     16 	.globl _P5_7
                                     17 	.globl _P5_6
                                     18 	.globl _P5_5
                                     19 	.globl _P5_4
                                     20 	.globl _P5_3
                                     21 	.globl _P5_2
                                     22 	.globl _P5_1
                                     23 	.globl _P5_0
                                     24 	.globl _P4_7
                                     25 	.globl _P4_6
                                     26 	.globl _P4_5
                                     27 	.globl _P4_4
                                     28 	.globl _P4_3
                                     29 	.globl _P4_2
                                     30 	.globl _P4_1
                                     31 	.globl _P4_0
                                     32 	.globl _PX0L
                                     33 	.globl _PT0L
                                     34 	.globl _PX1L
                                     35 	.globl _PT1L
                                     36 	.globl _PSL
                                     37 	.globl _PT2L
                                     38 	.globl _PPCL
                                     39 	.globl _EC
                                     40 	.globl _CCF0
                                     41 	.globl _CCF1
                                     42 	.globl _CCF2
                                     43 	.globl _CCF3
                                     44 	.globl _CCF4
                                     45 	.globl _CR
                                     46 	.globl _CF
                                     47 	.globl _TF2
                                     48 	.globl _EXF2
                                     49 	.globl _RCLK
                                     50 	.globl _TCLK
                                     51 	.globl _EXEN2
                                     52 	.globl _TR2
                                     53 	.globl _C_T2
                                     54 	.globl _CP_RL2
                                     55 	.globl _T2CON_7
                                     56 	.globl _T2CON_6
                                     57 	.globl _T2CON_5
                                     58 	.globl _T2CON_4
                                     59 	.globl _T2CON_3
                                     60 	.globl _T2CON_2
                                     61 	.globl _T2CON_1
                                     62 	.globl _T2CON_0
                                     63 	.globl _PT2
                                     64 	.globl _ET2
                                     65 	.globl _CY
                                     66 	.globl _AC
                                     67 	.globl _F0
                                     68 	.globl _RS1
                                     69 	.globl _RS0
                                     70 	.globl _OV
                                     71 	.globl _F1
                                     72 	.globl _P
                                     73 	.globl _PS
                                     74 	.globl _PT1
                                     75 	.globl _PX1
                                     76 	.globl _PT0
                                     77 	.globl _PX0
                                     78 	.globl _RD
                                     79 	.globl _WR
                                     80 	.globl _T1
                                     81 	.globl _T0
                                     82 	.globl _INT1
                                     83 	.globl _INT0
                                     84 	.globl _TXD
                                     85 	.globl _RXD
                                     86 	.globl _P3_7
                                     87 	.globl _P3_6
                                     88 	.globl _P3_5
                                     89 	.globl _P3_4
                                     90 	.globl _P3_3
                                     91 	.globl _P3_2
                                     92 	.globl _P3_1
                                     93 	.globl _P3_0
                                     94 	.globl _EA
                                     95 	.globl _ES
                                     96 	.globl _ET1
                                     97 	.globl _EX1
                                     98 	.globl _ET0
                                     99 	.globl _EX0
                                    100 	.globl _P2_7
                                    101 	.globl _P2_6
                                    102 	.globl _P2_5
                                    103 	.globl _P2_4
                                    104 	.globl _P2_3
                                    105 	.globl _P2_2
                                    106 	.globl _P2_1
                                    107 	.globl _P2_0
                                    108 	.globl _SM0
                                    109 	.globl _SM1
                                    110 	.globl _SM2
                                    111 	.globl _REN
                                    112 	.globl _TB8
                                    113 	.globl _RB8
                                    114 	.globl _TI
                                    115 	.globl _RI
                                    116 	.globl _P1_7
                                    117 	.globl _P1_6
                                    118 	.globl _P1_5
                                    119 	.globl _P1_4
                                    120 	.globl _P1_3
                                    121 	.globl _P1_2
                                    122 	.globl _P1_1
                                    123 	.globl _P1_0
                                    124 	.globl _TF1
                                    125 	.globl _TR1
                                    126 	.globl _TF0
                                    127 	.globl _TR0
                                    128 	.globl _IE1
                                    129 	.globl _IT1
                                    130 	.globl _IE0
                                    131 	.globl _IT0
                                    132 	.globl _P0_7
                                    133 	.globl _P0_6
                                    134 	.globl _P0_5
                                    135 	.globl _P0_4
                                    136 	.globl _P0_3
                                    137 	.globl _P0_2
                                    138 	.globl _P0_1
                                    139 	.globl _P0_0
                                    140 	.globl _EECON
                                    141 	.globl _KBF
                                    142 	.globl _KBE
                                    143 	.globl _KBLS
                                    144 	.globl _BRL
                                    145 	.globl _BDRCON
                                    146 	.globl _T2MOD
                                    147 	.globl _SPDAT
                                    148 	.globl _SPSTA
                                    149 	.globl _SPCON
                                    150 	.globl _SADEN
                                    151 	.globl _SADDR
                                    152 	.globl _WDTPRG
                                    153 	.globl _WDTRST
                                    154 	.globl _P5
                                    155 	.globl _P4
                                    156 	.globl _IPH1
                                    157 	.globl _IPL1
                                    158 	.globl _IPH0
                                    159 	.globl _IPL0
                                    160 	.globl _IEN1
                                    161 	.globl _IEN0
                                    162 	.globl _CMOD
                                    163 	.globl _CL
                                    164 	.globl _CH
                                    165 	.globl _CCON
                                    166 	.globl _CCAPM4
                                    167 	.globl _CCAPM3
                                    168 	.globl _CCAPM2
                                    169 	.globl _CCAPM1
                                    170 	.globl _CCAPM0
                                    171 	.globl _CCAP4L
                                    172 	.globl _CCAP3L
                                    173 	.globl _CCAP2L
                                    174 	.globl _CCAP1L
                                    175 	.globl _CCAP0L
                                    176 	.globl _CCAP4H
                                    177 	.globl _CCAP3H
                                    178 	.globl _CCAP2H
                                    179 	.globl _CCAP1H
                                    180 	.globl _CCAP0H
                                    181 	.globl _CKCON1
                                    182 	.globl _CKCON0
                                    183 	.globl _CKRL
                                    184 	.globl _AUXR1
                                    185 	.globl _AUXR
                                    186 	.globl _TH2
                                    187 	.globl _TL2
                                    188 	.globl _RCAP2H
                                    189 	.globl _RCAP2L
                                    190 	.globl _T2CON
                                    191 	.globl _B
                                    192 	.globl _ACC
                                    193 	.globl _PSW
                                    194 	.globl _IP
                                    195 	.globl _P3
                                    196 	.globl _IE
                                    197 	.globl _P2
                                    198 	.globl _SBUF
                                    199 	.globl _SCON
                                    200 	.globl _P1
                                    201 	.globl _TH1
                                    202 	.globl _TH0
                                    203 	.globl _TL1
                                    204 	.globl _TL0
                                    205 	.globl _TMOD
                                    206 	.globl _TCON
                                    207 	.globl _PCON
                                    208 	.globl _DPH
                                    209 	.globl _DPL
                                    210 	.globl _SP
                                    211 	.globl _P0
                                    212 	.globl _i2c_init
                                    213 	.globl _i2c_start
                                    214 	.globl _i2c_stop
                                    215 	.globl _i2c_ACK
                                    216 	.globl _i2c_NoAck
                                    217 	.globl _i2c_Restart
                                    218 	.globl _eereset
                                    219 	.globl _i2c_Write_Byte
                                    220 	.globl _i2c_Read_Byte
                                    221 	.globl _i2c_EEPROM_Write
                                    222 	.globl _i2c_EEPROM_Read
                                    223 	.globl _hex_addresses
                                    224 	.globl _hex_data
                                    225 	.globl _hex_dump
                                    226 ;--------------------------------------------------------
                                    227 ; special function registers
                                    228 ;--------------------------------------------------------
                                    229 	.area RSEG    (ABS,DATA)
      000000                        230 	.org 0x0000
                           000080   231 _P0	=	0x0080
                           000081   232 _SP	=	0x0081
                           000082   233 _DPL	=	0x0082
                           000083   234 _DPH	=	0x0083
                           000087   235 _PCON	=	0x0087
                           000088   236 _TCON	=	0x0088
                           000089   237 _TMOD	=	0x0089
                           00008A   238 _TL0	=	0x008a
                           00008B   239 _TL1	=	0x008b
                           00008C   240 _TH0	=	0x008c
                           00008D   241 _TH1	=	0x008d
                           000090   242 _P1	=	0x0090
                           000098   243 _SCON	=	0x0098
                           000099   244 _SBUF	=	0x0099
                           0000A0   245 _P2	=	0x00a0
                           0000A8   246 _IE	=	0x00a8
                           0000B0   247 _P3	=	0x00b0
                           0000B8   248 _IP	=	0x00b8
                           0000D0   249 _PSW	=	0x00d0
                           0000E0   250 _ACC	=	0x00e0
                           0000F0   251 _B	=	0x00f0
                           0000C8   252 _T2CON	=	0x00c8
                           0000CA   253 _RCAP2L	=	0x00ca
                           0000CB   254 _RCAP2H	=	0x00cb
                           0000CC   255 _TL2	=	0x00cc
                           0000CD   256 _TH2	=	0x00cd
                           00008E   257 _AUXR	=	0x008e
                           0000A2   258 _AUXR1	=	0x00a2
                           000097   259 _CKRL	=	0x0097
                           00008F   260 _CKCON0	=	0x008f
                           0000AF   261 _CKCON1	=	0x00af
                           0000FA   262 _CCAP0H	=	0x00fa
                           0000FB   263 _CCAP1H	=	0x00fb
                           0000FC   264 _CCAP2H	=	0x00fc
                           0000FD   265 _CCAP3H	=	0x00fd
                           0000FE   266 _CCAP4H	=	0x00fe
                           0000EA   267 _CCAP0L	=	0x00ea
                           0000EB   268 _CCAP1L	=	0x00eb
                           0000EC   269 _CCAP2L	=	0x00ec
                           0000ED   270 _CCAP3L	=	0x00ed
                           0000EE   271 _CCAP4L	=	0x00ee
                           0000DA   272 _CCAPM0	=	0x00da
                           0000DB   273 _CCAPM1	=	0x00db
                           0000DC   274 _CCAPM2	=	0x00dc
                           0000DD   275 _CCAPM3	=	0x00dd
                           0000DE   276 _CCAPM4	=	0x00de
                           0000D8   277 _CCON	=	0x00d8
                           0000F9   278 _CH	=	0x00f9
                           0000E9   279 _CL	=	0x00e9
                           0000D9   280 _CMOD	=	0x00d9
                           0000A8   281 _IEN0	=	0x00a8
                           0000B1   282 _IEN1	=	0x00b1
                           0000B8   283 _IPL0	=	0x00b8
                           0000B7   284 _IPH0	=	0x00b7
                           0000B2   285 _IPL1	=	0x00b2
                           0000B3   286 _IPH1	=	0x00b3
                           0000C0   287 _P4	=	0x00c0
                           0000E8   288 _P5	=	0x00e8
                           0000A6   289 _WDTRST	=	0x00a6
                           0000A7   290 _WDTPRG	=	0x00a7
                           0000A9   291 _SADDR	=	0x00a9
                           0000B9   292 _SADEN	=	0x00b9
                           0000C3   293 _SPCON	=	0x00c3
                           0000C4   294 _SPSTA	=	0x00c4
                           0000C5   295 _SPDAT	=	0x00c5
                           0000C9   296 _T2MOD	=	0x00c9
                           00009B   297 _BDRCON	=	0x009b
                           00009A   298 _BRL	=	0x009a
                           00009C   299 _KBLS	=	0x009c
                           00009D   300 _KBE	=	0x009d
                           00009E   301 _KBF	=	0x009e
                           0000D2   302 _EECON	=	0x00d2
                                    303 ;--------------------------------------------------------
                                    304 ; special function bits
                                    305 ;--------------------------------------------------------
                                    306 	.area RSEG    (ABS,DATA)
      000000                        307 	.org 0x0000
                           000080   308 _P0_0	=	0x0080
                           000081   309 _P0_1	=	0x0081
                           000082   310 _P0_2	=	0x0082
                           000083   311 _P0_3	=	0x0083
                           000084   312 _P0_4	=	0x0084
                           000085   313 _P0_5	=	0x0085
                           000086   314 _P0_6	=	0x0086
                           000087   315 _P0_7	=	0x0087
                           000088   316 _IT0	=	0x0088
                           000089   317 _IE0	=	0x0089
                           00008A   318 _IT1	=	0x008a
                           00008B   319 _IE1	=	0x008b
                           00008C   320 _TR0	=	0x008c
                           00008D   321 _TF0	=	0x008d
                           00008E   322 _TR1	=	0x008e
                           00008F   323 _TF1	=	0x008f
                           000090   324 _P1_0	=	0x0090
                           000091   325 _P1_1	=	0x0091
                           000092   326 _P1_2	=	0x0092
                           000093   327 _P1_3	=	0x0093
                           000094   328 _P1_4	=	0x0094
                           000095   329 _P1_5	=	0x0095
                           000096   330 _P1_6	=	0x0096
                           000097   331 _P1_7	=	0x0097
                           000098   332 _RI	=	0x0098
                           000099   333 _TI	=	0x0099
                           00009A   334 _RB8	=	0x009a
                           00009B   335 _TB8	=	0x009b
                           00009C   336 _REN	=	0x009c
                           00009D   337 _SM2	=	0x009d
                           00009E   338 _SM1	=	0x009e
                           00009F   339 _SM0	=	0x009f
                           0000A0   340 _P2_0	=	0x00a0
                           0000A1   341 _P2_1	=	0x00a1
                           0000A2   342 _P2_2	=	0x00a2
                           0000A3   343 _P2_3	=	0x00a3
                           0000A4   344 _P2_4	=	0x00a4
                           0000A5   345 _P2_5	=	0x00a5
                           0000A6   346 _P2_6	=	0x00a6
                           0000A7   347 _P2_7	=	0x00a7
                           0000A8   348 _EX0	=	0x00a8
                           0000A9   349 _ET0	=	0x00a9
                           0000AA   350 _EX1	=	0x00aa
                           0000AB   351 _ET1	=	0x00ab
                           0000AC   352 _ES	=	0x00ac
                           0000AF   353 _EA	=	0x00af
                           0000B0   354 _P3_0	=	0x00b0
                           0000B1   355 _P3_1	=	0x00b1
                           0000B2   356 _P3_2	=	0x00b2
                           0000B3   357 _P3_3	=	0x00b3
                           0000B4   358 _P3_4	=	0x00b4
                           0000B5   359 _P3_5	=	0x00b5
                           0000B6   360 _P3_6	=	0x00b6
                           0000B7   361 _P3_7	=	0x00b7
                           0000B0   362 _RXD	=	0x00b0
                           0000B1   363 _TXD	=	0x00b1
                           0000B2   364 _INT0	=	0x00b2
                           0000B3   365 _INT1	=	0x00b3
                           0000B4   366 _T0	=	0x00b4
                           0000B5   367 _T1	=	0x00b5
                           0000B6   368 _WR	=	0x00b6
                           0000B7   369 _RD	=	0x00b7
                           0000B8   370 _PX0	=	0x00b8
                           0000B9   371 _PT0	=	0x00b9
                           0000BA   372 _PX1	=	0x00ba
                           0000BB   373 _PT1	=	0x00bb
                           0000BC   374 _PS	=	0x00bc
                           0000D0   375 _P	=	0x00d0
                           0000D1   376 _F1	=	0x00d1
                           0000D2   377 _OV	=	0x00d2
                           0000D3   378 _RS0	=	0x00d3
                           0000D4   379 _RS1	=	0x00d4
                           0000D5   380 _F0	=	0x00d5
                           0000D6   381 _AC	=	0x00d6
                           0000D7   382 _CY	=	0x00d7
                           0000AD   383 _ET2	=	0x00ad
                           0000BD   384 _PT2	=	0x00bd
                           0000C8   385 _T2CON_0	=	0x00c8
                           0000C9   386 _T2CON_1	=	0x00c9
                           0000CA   387 _T2CON_2	=	0x00ca
                           0000CB   388 _T2CON_3	=	0x00cb
                           0000CC   389 _T2CON_4	=	0x00cc
                           0000CD   390 _T2CON_5	=	0x00cd
                           0000CE   391 _T2CON_6	=	0x00ce
                           0000CF   392 _T2CON_7	=	0x00cf
                           0000C8   393 _CP_RL2	=	0x00c8
                           0000C9   394 _C_T2	=	0x00c9
                           0000CA   395 _TR2	=	0x00ca
                           0000CB   396 _EXEN2	=	0x00cb
                           0000CC   397 _TCLK	=	0x00cc
                           0000CD   398 _RCLK	=	0x00cd
                           0000CE   399 _EXF2	=	0x00ce
                           0000CF   400 _TF2	=	0x00cf
                           0000DF   401 _CF	=	0x00df
                           0000DE   402 _CR	=	0x00de
                           0000DC   403 _CCF4	=	0x00dc
                           0000DB   404 _CCF3	=	0x00db
                           0000DA   405 _CCF2	=	0x00da
                           0000D9   406 _CCF1	=	0x00d9
                           0000D8   407 _CCF0	=	0x00d8
                           0000AE   408 _EC	=	0x00ae
                           0000BE   409 _PPCL	=	0x00be
                           0000BD   410 _PT2L	=	0x00bd
                           0000BC   411 _PSL	=	0x00bc
                           0000BB   412 _PT1L	=	0x00bb
                           0000BA   413 _PX1L	=	0x00ba
                           0000B9   414 _PT0L	=	0x00b9
                           0000B8   415 _PX0L	=	0x00b8
                           0000C0   416 _P4_0	=	0x00c0
                           0000C1   417 _P4_1	=	0x00c1
                           0000C2   418 _P4_2	=	0x00c2
                           0000C3   419 _P4_3	=	0x00c3
                           0000C4   420 _P4_4	=	0x00c4
                           0000C5   421 _P4_5	=	0x00c5
                           0000C6   422 _P4_6	=	0x00c6
                           0000C7   423 _P4_7	=	0x00c7
                           0000E8   424 _P5_0	=	0x00e8
                           0000E9   425 _P5_1	=	0x00e9
                           0000EA   426 _P5_2	=	0x00ea
                           0000EB   427 _P5_3	=	0x00eb
                           0000EC   428 _P5_4	=	0x00ec
                           0000ED   429 _P5_5	=	0x00ed
                           0000EE   430 _P5_6	=	0x00ee
                           0000EF   431 _P5_7	=	0x00ef
                                    432 ;--------------------------------------------------------
                                    433 ; overlayable register banks
                                    434 ;--------------------------------------------------------
                                    435 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        436 	.ds 8
                                    437 ;--------------------------------------------------------
                                    438 ; internal ram data
                                    439 ;--------------------------------------------------------
                                    440 	.area DSEG    (DATA)
      000000                        441 _i2c_EEPROM_Write_sloc0_1_0:
      000000                        442 	.ds 4
      000004                        443 _i2c_EEPROM_Write_sloc1_1_0:
      000004                        444 	.ds 4
      000008                        445 _i2c_EEPROM_Read_sloc0_1_0:
      000008                        446 	.ds 4
      00000C                        447 _hex_addresses_sloc0_1_0:
      00000C                        448 	.ds 4
      000010                        449 _hex_dump_sloc0_1_0:
      000010                        450 	.ds 2
                                    451 ;--------------------------------------------------------
                                    452 ; overlayable items in internal ram
                                    453 ;--------------------------------------------------------
                                    454 ;--------------------------------------------------------
                                    455 ; indirectly addressable internal ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area ISEG    (DATA)
                                    458 ;--------------------------------------------------------
                                    459 ; absolute internal ram data
                                    460 ;--------------------------------------------------------
                                    461 	.area IABS    (ABS,DATA)
                                    462 	.area IABS    (ABS,DATA)
                                    463 ;--------------------------------------------------------
                                    464 ; bit data
                                    465 ;--------------------------------------------------------
                                    466 	.area BSEG    (BIT)
                                    467 ;--------------------------------------------------------
                                    468 ; paged external ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area PSEG    (PAG,XDATA)
                                    471 ;--------------------------------------------------------
                                    472 ; external ram data
                                    473 ;--------------------------------------------------------
                                    474 	.area XSEG    (XDATA)
      000000                        475 _i2c_Write_Byte_byte_65536_115:
      000000                        476 	.ds 1
      000001                        477 _i2c_Read_Byte_buff_65536_120:
      000001                        478 	.ds 1
      000002                        479 _i2c_EEPROM_Write_flag_65536_123:
      000002                        480 	.ds 1
      000003                        481 _i2c_EEPROM_Write_flag1_65536_123:
      000003                        482 	.ds 1
      000004                        483 _i2c_EEPROM_Write_address_65536_123:
      000004                        484 	.ds 2
      000006                        485 _i2c_EEPROM_Write_get_address_65536_123:
      000006                        486 	.ds 3
      000009                        487 _i2c_EEPROM_Write_get_address_int_65536_123:
      000009                        488 	.ds 6
      00000F                        489 _i2c_EEPROM_Write_data_65536_123:
      00000F                        490 	.ds 2
      000011                        491 _i2c_EEPROM_Write_get_data_65536_123:
      000011                        492 	.ds 2
      000013                        493 _i2c_EEPROM_Write_get_data_int_65536_123:
      000013                        494 	.ds 4
      000017                        495 _i2c_EEPROM_Read_flag_65536_162:
      000017                        496 	.ds 1
      000018                        497 _i2c_EEPROM_Read_address_65536_162:
      000018                        498 	.ds 2
      00001A                        499 _i2c_EEPROM_Read_get_address_65536_162:
      00001A                        500 	.ds 3
      00001D                        501 _i2c_EEPROM_Read_get_address_int_65536_162:
      00001D                        502 	.ds 6
      000023                        503 _hex_addresses_flag_65536_183:
      000023                        504 	.ds 2
      000025                        505 _hex_addresses_address_65536_183:
      000025                        506 	.ds 2
      000027                        507 _hex_addresses_get_address_65536_183:
      000027                        508 	.ds 3
      00002A                        509 _hex_addresses_get_address_int_65536_183:
      00002A                        510 	.ds 6
      000030                        511 _hex_data_rec_addr_65536_204:
      000030                        512 	.ds 2
      000032                        513 _hex_dump_count_65536_206:
      000032                        514 	.ds 2
      000034                        515 _hex_dump_flag_65536_206:
      000034                        516 	.ds 2
                                    517 ;--------------------------------------------------------
                                    518 ; absolute external ram data
                                    519 ;--------------------------------------------------------
                                    520 	.area XABS    (ABS,XDATA)
                                    521 ;--------------------------------------------------------
                                    522 ; external initialized ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XISEG   (XDATA)
                                    525 	.area HOME    (CODE)
                                    526 	.area GSINIT0 (CODE)
                                    527 	.area GSINIT1 (CODE)
                                    528 	.area GSINIT2 (CODE)
                                    529 	.area GSINIT3 (CODE)
                                    530 	.area GSINIT4 (CODE)
                                    531 	.area GSINIT5 (CODE)
                                    532 	.area GSINIT  (CODE)
                                    533 	.area GSFINAL (CODE)
                                    534 	.area CSEG    (CODE)
                                    535 ;--------------------------------------------------------
                                    536 ; global & static initialisations
                                    537 ;--------------------------------------------------------
                                    538 	.area HOME    (CODE)
                                    539 	.area GSINIT  (CODE)
                                    540 	.area GSFINAL (CODE)
                                    541 	.area GSINIT  (CODE)
                                    542 ;--------------------------------------------------------
                                    543 ; Home
                                    544 ;--------------------------------------------------------
                                    545 	.area HOME    (CODE)
                                    546 	.area HOME    (CODE)
                                    547 ;--------------------------------------------------------
                                    548 ; code
                                    549 ;--------------------------------------------------------
                                    550 	.area CSEG    (CODE)
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'i2c_init'
                                    553 ;------------------------------------------------------------
                                    554 ;	i2c.c:12: void i2c_init()
                                    555 ;	-----------------------------------------
                                    556 ;	 function i2c_init
                                    557 ;	-----------------------------------------
      000000                        558 _i2c_init:
                           000007   559 	ar7 = 0x07
                           000006   560 	ar6 = 0x06
                           000005   561 	ar5 = 0x05
                           000004   562 	ar4 = 0x04
                           000003   563 	ar3 = 0x03
                           000002   564 	ar2 = 0x02
                           000001   565 	ar1 = 0x01
                           000000   566 	ar0 = 0x00
                                    567 ;	i2c.c:14: sda=1;
                                    568 ;	assignBit
      000000 D2 94            [12]  569 	setb	_P1_4
                                    570 ;	i2c.c:15: scl=1;
                                    571 ;	assignBit
      000002 D2 93            [12]  572 	setb	_P1_3
                                    573 ;	i2c.c:16: }
      000004 22               [24]  574 	ret
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'i2c_start'
                                    577 ;------------------------------------------------------------
                                    578 ;	i2c.c:21: void i2c_start(void)
                                    579 ;	-----------------------------------------
                                    580 ;	 function i2c_start
                                    581 ;	-----------------------------------------
      000005                        582 _i2c_start:
                                    583 ;	i2c.c:23: scl=1;
                                    584 ;	assignBit
      000005 D2 93            [12]  585 	setb	_P1_3
                                    586 ;	i2c.c:24: sda=1;
                                    587 ;	assignBit
      000007 D2 94            [12]  588 	setb	_P1_4
                                    589 ;	i2c.c:25: delay_us(Half_Bit_Delay);
      000009 90 01 F4         [24]  590 	mov	dptr,#0x01f4
      00000C 12r00r00         [24]  591 	lcall	_delay_us
                                    592 ;	i2c.c:26: sda=0;
                                    593 ;	assignBit
      00000F C2 94            [12]  594 	clr	_P1_4
                                    595 ;	i2c.c:27: delay_us(Half_Bit_Delay);
      000011 90 01 F4         [24]  596 	mov	dptr,#0x01f4
                                    597 ;	i2c.c:28: }
      000014 02r00r00         [24]  598 	ljmp	_delay_us
                                    599 ;------------------------------------------------------------
                                    600 ;Allocation info for local variables in function 'i2c_stop'
                                    601 ;------------------------------------------------------------
                                    602 ;	i2c.c:33: void i2c_stop(void)
                                    603 ;	-----------------------------------------
                                    604 ;	 function i2c_stop
                                    605 ;	-----------------------------------------
      000017                        606 _i2c_stop:
                                    607 ;	i2c.c:35: scl=0;
                                    608 ;	assignBit
      000017 C2 93            [12]  609 	clr	_P1_3
                                    610 ;	i2c.c:36: delay_us(Half_Bit_Delay/2);
      000019 90 00 FA         [24]  611 	mov	dptr,#0x00fa
      00001C 12r00r00         [24]  612 	lcall	_delay_us
                                    613 ;	i2c.c:37: sda=0;
                                    614 ;	assignBit
      00001F C2 94            [12]  615 	clr	_P1_4
                                    616 ;	i2c.c:38: delay_us(Half_Bit_Delay/2);
      000021 90 00 FA         [24]  617 	mov	dptr,#0x00fa
      000024 12r00r00         [24]  618 	lcall	_delay_us
                                    619 ;	i2c.c:39: scl=1;
                                    620 ;	assignBit
      000027 D2 93            [12]  621 	setb	_P1_3
                                    622 ;	i2c.c:40: delay_us(Half_Bit_Delay/2);
      000029 90 00 FA         [24]  623 	mov	dptr,#0x00fa
      00002C 12r00r00         [24]  624 	lcall	_delay_us
                                    625 ;	i2c.c:41: sda=1;
                                    626 ;	assignBit
      00002F D2 94            [12]  627 	setb	_P1_4
                                    628 ;	i2c.c:42: delay_us(Half_Bit_Delay/2);
      000031 90 00 FA         [24]  629 	mov	dptr,#0x00fa
                                    630 ;	i2c.c:43: }
      000034 02r00r00         [24]  631 	ljmp	_delay_us
                                    632 ;------------------------------------------------------------
                                    633 ;Allocation info for local variables in function 'i2c_ACK'
                                    634 ;------------------------------------------------------------
                                    635 ;	i2c.c:48: void i2c_ACK(void)
                                    636 ;	-----------------------------------------
                                    637 ;	 function i2c_ACK
                                    638 ;	-----------------------------------------
      000037                        639 _i2c_ACK:
                                    640 ;	i2c.c:50: scl=0;
                                    641 ;	assignBit
      000037 C2 93            [12]  642 	clr	_P1_3
                                    643 ;	i2c.c:51: delay_us(Half_Bit_Delay/2);
      000039 90 00 FA         [24]  644 	mov	dptr,#0x00fa
      00003C 12r00r00         [24]  645 	lcall	_delay_us
                                    646 ;	i2c.c:52: sda=0;
                                    647 ;	assignBit
      00003F C2 94            [12]  648 	clr	_P1_4
                                    649 ;	i2c.c:53: delay_us(Half_Bit_Delay/2);
      000041 90 00 FA         [24]  650 	mov	dptr,#0x00fa
      000044 12r00r00         [24]  651 	lcall	_delay_us
                                    652 ;	i2c.c:54: scl=1;
                                    653 ;	assignBit
      000047 D2 93            [12]  654 	setb	_P1_3
                                    655 ;	i2c.c:55: delay_us(Half_Bit_Delay/2);
      000049 90 00 FA         [24]  656 	mov	dptr,#0x00fa
                                    657 ;	i2c.c:56: }
      00004C 02r00r00         [24]  658 	ljmp	_delay_us
                                    659 ;------------------------------------------------------------
                                    660 ;Allocation info for local variables in function 'i2c_NoAck'
                                    661 ;------------------------------------------------------------
                                    662 ;	i2c.c:61: void i2c_NoAck(void)
                                    663 ;	-----------------------------------------
                                    664 ;	 function i2c_NoAck
                                    665 ;	-----------------------------------------
      00004F                        666 _i2c_NoAck:
                                    667 ;	i2c.c:63: scl=0;
                                    668 ;	assignBit
      00004F C2 93            [12]  669 	clr	_P1_3
                                    670 ;	i2c.c:64: delay_us(Half_Bit_Delay/2);
      000051 90 00 FA         [24]  671 	mov	dptr,#0x00fa
      000054 12r00r00         [24]  672 	lcall	_delay_us
                                    673 ;	i2c.c:65: sda=1;
                                    674 ;	assignBit
      000057 D2 94            [12]  675 	setb	_P1_4
                                    676 ;	i2c.c:66: delay_us(Half_Bit_Delay/2);
      000059 90 00 FA         [24]  677 	mov	dptr,#0x00fa
      00005C 12r00r00         [24]  678 	lcall	_delay_us
                                    679 ;	i2c.c:67: scl=1;
                                    680 ;	assignBit
      00005F D2 93            [12]  681 	setb	_P1_3
                                    682 ;	i2c.c:68: delay_us(Half_Bit_Delay/2);
      000061 90 00 FA         [24]  683 	mov	dptr,#0x00fa
                                    684 ;	i2c.c:69: }
      000064 02r00r00         [24]  685 	ljmp	_delay_us
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'i2c_Restart'
                                    688 ;------------------------------------------------------------
                                    689 ;	i2c.c:74: void i2c_Restart()
                                    690 ;	-----------------------------------------
                                    691 ;	 function i2c_Restart
                                    692 ;	-----------------------------------------
      000067                        693 _i2c_Restart:
                                    694 ;	i2c.c:76: scl=0;
                                    695 ;	assignBit
      000067 C2 93            [12]  696 	clr	_P1_3
                                    697 ;	i2c.c:77: delay_us(Half_Bit_Delay/2);
      000069 90 00 FA         [24]  698 	mov	dptr,#0x00fa
      00006C 12r00r00         [24]  699 	lcall	_delay_us
                                    700 ;	i2c.c:78: sda=1;
                                    701 ;	assignBit
      00006F D2 94            [12]  702 	setb	_P1_4
                                    703 ;	i2c.c:79: delay_us(Half_Bit_Delay/2);
      000071 90 00 FA         [24]  704 	mov	dptr,#0x00fa
      000074 12r00r00         [24]  705 	lcall	_delay_us
                                    706 ;	i2c.c:80: scl=1;
                                    707 ;	assignBit
      000077 D2 93            [12]  708 	setb	_P1_3
                                    709 ;	i2c.c:81: delay_us(Half_Bit_Delay/2);
      000079 90 00 FA         [24]  710 	mov	dptr,#0x00fa
      00007C 12r00r00         [24]  711 	lcall	_delay_us
                                    712 ;	i2c.c:82: sda=0;
                                    713 ;	assignBit
      00007F C2 94            [12]  714 	clr	_P1_4
                                    715 ;	i2c.c:83: delay_us(Half_Bit_Delay/2);
      000081 90 00 FA         [24]  716 	mov	dptr,#0x00fa
                                    717 ;	i2c.c:84: }
      000084 02r00r00         [24]  718 	ljmp	_delay_us
                                    719 ;------------------------------------------------------------
                                    720 ;Allocation info for local variables in function 'eereset'
                                    721 ;------------------------------------------------------------
                                    722 ;i                         Allocated with name '_eereset_i_65536_112'
                                    723 ;------------------------------------------------------------
                                    724 ;	i2c.c:89: void eereset()
                                    725 ;	-----------------------------------------
                                    726 ;	 function eereset
                                    727 ;	-----------------------------------------
      000087                        728 _eereset:
                                    729 ;	i2c.c:92: i2c_start();
      000087 12r00r05         [24]  730 	lcall	_i2c_start
                                    731 ;	i2c.c:93: for(i=0;i<9;i++)
      00008A 7F 00            [12]  732 	mov	r7,#0x00
      00008C                        733 00102$:
                                    734 ;	i2c.c:95: sda=1;
                                    735 ;	assignBit
      00008C D2 94            [12]  736 	setb	_P1_4
                                    737 ;	i2c.c:96: scl=1;
                                    738 ;	assignBit
      00008E D2 93            [12]  739 	setb	_P1_3
                                    740 ;	i2c.c:97: delay_us(Half_Bit_Delay);
      000090 90 01 F4         [24]  741 	mov	dptr,#0x01f4
      000093 C0 07            [24]  742 	push	ar7
      000095 12r00r00         [24]  743 	lcall	_delay_us
                                    744 ;	i2c.c:98: scl=0;
                                    745 ;	assignBit
      000098 C2 93            [12]  746 	clr	_P1_3
                                    747 ;	i2c.c:99: delay_us(Half_Bit_Delay);
      00009A 90 01 F4         [24]  748 	mov	dptr,#0x01f4
      00009D 12r00r00         [24]  749 	lcall	_delay_us
      0000A0 D0 07            [24]  750 	pop	ar7
                                    751 ;	i2c.c:93: for(i=0;i<9;i++)
      0000A2 0F               [12]  752 	inc	r7
      0000A3 BF 09 00         [24]  753 	cjne	r7,#0x09,00115$
      0000A6                        754 00115$:
      0000A6 40 E4            [24]  755 	jc	00102$
                                    756 ;	i2c.c:101: scl=1;
                                    757 ;	assignBit
      0000A8 D2 93            [12]  758 	setb	_P1_3
                                    759 ;	i2c.c:102: delay_us(Half_Bit_Delay);
      0000AA 90 01 F4         [24]  760 	mov	dptr,#0x01f4
      0000AD 12r00r00         [24]  761 	lcall	_delay_us
                                    762 ;	i2c.c:103: i2c_start();
      0000B0 12r00r05         [24]  763 	lcall	_i2c_start
                                    764 ;	i2c.c:104: i2c_stop();
                                    765 ;	i2c.c:105: }
      0000B3 02r00r17         [24]  766 	ljmp	_i2c_stop
                                    767 ;------------------------------------------------------------
                                    768 ;Allocation info for local variables in function 'i2c_Write_Byte'
                                    769 ;------------------------------------------------------------
                                    770 ;byte                      Allocated with name '_i2c_Write_Byte_byte_65536_115'
                                    771 ;i                         Allocated with name '_i2c_Write_Byte_i_65536_116'
                                    772 ;------------------------------------------------------------
                                    773 ;	i2c.c:111: int i2c_Write_Byte(uint8_t byte)
                                    774 ;	-----------------------------------------
                                    775 ;	 function i2c_Write_Byte
                                    776 ;	-----------------------------------------
      0000B6                        777 _i2c_Write_Byte:
      0000B6 E5 82            [12]  778 	mov	a,dpl
      0000B8 90r00r00         [24]  779 	mov	dptr,#_i2c_Write_Byte_byte_65536_115
      0000BB F0               [24]  780 	movx	@dptr,a
                                    781 ;	i2c.c:114: for(i=0;i<8;i++)
      0000BC E0               [24]  782 	movx	a,@dptr
      0000BD FF               [12]  783 	mov	r7,a
      0000BE 7E 00            [12]  784 	mov	r6,#0x00
      0000C0                        785 00105$:
                                    786 ;	i2c.c:116: scl=0;
                                    787 ;	assignBit
      0000C0 C2 93            [12]  788 	clr	_P1_3
                                    789 ;	i2c.c:117: delay_us(Half_Bit_Delay/2);
      0000C2 90 00 FA         [24]  790 	mov	dptr,#0x00fa
      0000C5 C0 07            [24]  791 	push	ar7
      0000C7 C0 06            [24]  792 	push	ar6
      0000C9 12r00r00         [24]  793 	lcall	_delay_us
      0000CC D0 06            [24]  794 	pop	ar6
      0000CE D0 07            [24]  795 	pop	ar7
                                    796 ;	i2c.c:118: if((byte<<i)&0x80)  // Place data bit value on SDA pin
      0000D0 8F 04            [24]  797 	mov	ar4,r7
      0000D2 7D 00            [12]  798 	mov	r5,#0x00
      0000D4 8E F0            [24]  799 	mov	b,r6
      0000D6 05 F0            [12]  800 	inc	b
      0000D8 80 06            [24]  801 	sjmp	00123$
      0000DA                        802 00122$:
      0000DA EC               [12]  803 	mov	a,r4
      0000DB 2C               [12]  804 	add	a,r4
      0000DC FC               [12]  805 	mov	r4,a
      0000DD ED               [12]  806 	mov	a,r5
      0000DE 33               [12]  807 	rlc	a
      0000DF FD               [12]  808 	mov	r5,a
      0000E0                        809 00123$:
      0000E0 D5 F0 F7         [24]  810 	djnz	b,00122$
      0000E3 EC               [12]  811 	mov	a,r4
      0000E4 30 E7 04         [24]  812 	jnb	acc.7,00102$
                                    813 ;	i2c.c:119: sda=1;	// If bit is high, make SDA high
                                    814 ;	assignBit
      0000E7 D2 94            [12]  815 	setb	_P1_4
      0000E9 80 02            [24]  816 	sjmp	00103$
      0000EB                        817 00102$:
                                    818 ;	i2c.c:121: sda=0;	// If bit is low, make SDA low
                                    819 ;	assignBit
      0000EB C2 94            [12]  820 	clr	_P1_4
      0000ED                        821 00103$:
                                    822 ;	i2c.c:122: delay_us(Half_Bit_Delay/2);
      0000ED 90 00 FA         [24]  823 	mov	dptr,#0x00fa
      0000F0 C0 07            [24]  824 	push	ar7
      0000F2 C0 06            [24]  825 	push	ar6
      0000F4 12r00r00         [24]  826 	lcall	_delay_us
                                    827 ;	i2c.c:123: scl=1;
                                    828 ;	assignBit
      0000F7 D2 93            [12]  829 	setb	_P1_3
                                    830 ;	i2c.c:124: delay_us(Half_Bit_Delay);
      0000F9 90 01 F4         [24]  831 	mov	dptr,#0x01f4
      0000FC 12r00r00         [24]  832 	lcall	_delay_us
      0000FF D0 06            [24]  833 	pop	ar6
      000101 D0 07            [24]  834 	pop	ar7
                                    835 ;	i2c.c:114: for(i=0;i<8;i++)
      000103 0E               [12]  836 	inc	r6
      000104 BE 08 00         [24]  837 	cjne	r6,#0x08,00125$
      000107                        838 00125$:
      000107 40 B7            [24]  839 	jc	00105$
                                    840 ;	i2c.c:126: scl=0;
                                    841 ;	assignBit
      000109 C2 93            [12]  842 	clr	_P1_3
                                    843 ;	i2c.c:127: sda=1;
                                    844 ;	assignBit
      00010B D2 94            [12]  845 	setb	_P1_4
                                    846 ;	i2c.c:128: delay_us(Half_Bit_Delay);
      00010D 90 01 F4         [24]  847 	mov	dptr,#0x01f4
      000110 12r00r00         [24]  848 	lcall	_delay_us
                                    849 ;	i2c.c:129: scl=1;
                                    850 ;	assignBit
      000113 D2 93            [12]  851 	setb	_P1_3
                                    852 ;	i2c.c:130: delay_us(Half_Bit_Delay);
      000115 90 01 F4         [24]  853 	mov	dptr,#0x01f4
      000118 12r00r00         [24]  854 	lcall	_delay_us
                                    855 ;	i2c.c:131: return sda;
      00011B A2 94            [12]  856 	mov	c,_P1_4
      00011D E4               [12]  857 	clr	a
      00011E 33               [12]  858 	rlc	a
      00011F FE               [12]  859 	mov	r6,a
      000120 7F 00            [12]  860 	mov	r7,#0x00
      000122 8E 82            [24]  861 	mov	dpl,r6
      000124 8F 83            [24]  862 	mov	dph,r7
                                    863 ;	i2c.c:132: }
      000126 22               [24]  864 	ret
                                    865 ;------------------------------------------------------------
                                    866 ;Allocation info for local variables in function 'i2c_Read_Byte'
                                    867 ;------------------------------------------------------------
                                    868 ;i                         Allocated with name '_i2c_Read_Byte_i_65536_120'
                                    869 ;d                         Allocated with name '_i2c_Read_Byte_d_65536_120'
                                    870 ;buff                      Allocated with name '_i2c_Read_Byte_buff_65536_120'
                                    871 ;------------------------------------------------------------
                                    872 ;	i2c.c:138: uint8_t i2c_Read_Byte(void)
                                    873 ;	-----------------------------------------
                                    874 ;	 function i2c_Read_Byte
                                    875 ;	-----------------------------------------
      000127                        876 _i2c_Read_Byte:
                                    877 ;	i2c.c:140: uint8_t i,d,buff=0;
      000127 90r00r01         [24]  878 	mov	dptr,#_i2c_Read_Byte_buff_65536_120
      00012A E4               [12]  879 	clr	a
      00012B F0               [24]  880 	movx	@dptr,a
                                    881 ;	i2c.c:141: for(i=0;i<8;i++)
      00012C 7F 00            [12]  882 	mov	r7,#0x00
      00012E                        883 00102$:
                                    884 ;	i2c.c:143: scl=0;
                                    885 ;	assignBit
      00012E C2 93            [12]  886 	clr	_P1_3
                                    887 ;	i2c.c:144: sda=1;
                                    888 ;	assignBit
      000130 D2 94            [12]  889 	setb	_P1_4
                                    890 ;	i2c.c:145: delay_us(Half_Bit_Delay);
      000132 90 01 F4         [24]  891 	mov	dptr,#0x01f4
      000135 C0 07            [24]  892 	push	ar7
      000137 12r00r00         [24]  893 	lcall	_delay_us
                                    894 ;	i2c.c:146: scl=1;
                                    895 ;	assignBit
      00013A D2 93            [12]  896 	setb	_P1_3
                                    897 ;	i2c.c:147: delay_us(Half_Bit_Delay/2);
      00013C 90 00 FA         [24]  898 	mov	dptr,#0x00fa
      00013F 12r00r00         [24]  899 	lcall	_delay_us
      000142 D0 07            [24]  900 	pop	ar7
                                    901 ;	i2c.c:148: d=sda;
      000144 A2 94            [12]  902 	mov	c,_P1_4
                                    903 ;	i2c.c:149: buff |=(sda<<(7-i));
      000146 A2 94            [12]  904 	mov	c,_P1_4
      000148 E4               [12]  905 	clr	a
      000149 33               [12]  906 	rlc	a
      00014A FE               [12]  907 	mov	r6,a
      00014B 8F 05            [24]  908 	mov	ar5,r7
      00014D 74 07            [12]  909 	mov	a,#0x07
      00014F C3               [12]  910 	clr	c
      000150 9D               [12]  911 	subb	a,r5
      000151 FD               [12]  912 	mov	r5,a
      000152 8D F0            [24]  913 	mov	b,r5
      000154 05 F0            [12]  914 	inc	b
      000156 EE               [12]  915 	mov	a,r6
      000157 80 02            [24]  916 	sjmp	00117$
      000159                        917 00115$:
      000159 25 E0            [12]  918 	add	a,acc
      00015B                        919 00117$:
      00015B D5 F0 FB         [24]  920 	djnz	b,00115$
      00015E FD               [12]  921 	mov	r5,a
      00015F 90r00r01         [24]  922 	mov	dptr,#_i2c_Read_Byte_buff_65536_120
      000162 E0               [24]  923 	movx	a,@dptr
      000163 4D               [12]  924 	orl	a,r5
      000164 F0               [24]  925 	movx	@dptr,a
                                    926 ;	i2c.c:150: delay_us(Half_Bit_Delay/2);
      000165 90 00 FA         [24]  927 	mov	dptr,#0x00fa
      000168 C0 07            [24]  928 	push	ar7
      00016A 12r00r00         [24]  929 	lcall	_delay_us
      00016D D0 07            [24]  930 	pop	ar7
                                    931 ;	i2c.c:141: for(i=0;i<8;i++)
      00016F 0F               [12]  932 	inc	r7
      000170 BF 08 00         [24]  933 	cjne	r7,#0x08,00118$
      000173                        934 00118$:
      000173 40 B9            [24]  935 	jc	00102$
                                    936 ;	i2c.c:152: return buff;
      000175 90r00r01         [24]  937 	mov	dptr,#_i2c_Read_Byte_buff_65536_120
      000178 E0               [24]  938 	movx	a,@dptr
                                    939 ;	i2c.c:153: }
      000179 F5 82            [12]  940 	mov	dpl,a
      00017B 22               [24]  941 	ret
                                    942 ;------------------------------------------------------------
                                    943 ;Allocation info for local variables in function 'i2c_EEPROM_Write'
                                    944 ;------------------------------------------------------------
                                    945 ;sloc0                     Allocated with name '_i2c_EEPROM_Write_sloc0_1_0'
                                    946 ;sloc1                     Allocated with name '_i2c_EEPROM_Write_sloc1_1_0'
                                    947 ;flag                      Allocated with name '_i2c_EEPROM_Write_flag_65536_123'
                                    948 ;flag1                     Allocated with name '_i2c_EEPROM_Write_flag1_65536_123'
                                    949 ;address                   Allocated with name '_i2c_EEPROM_Write_address_65536_123'
                                    950 ;get_address               Allocated with name '_i2c_EEPROM_Write_get_address_65536_123'
                                    951 ;get_address_int           Allocated with name '_i2c_EEPROM_Write_get_address_int_65536_123'
                                    952 ;data                      Allocated with name '_i2c_EEPROM_Write_data_65536_123'
                                    953 ;get_data                  Allocated with name '_i2c_EEPROM_Write_get_data_65536_123'
                                    954 ;get_data_int              Allocated with name '_i2c_EEPROM_Write_get_data_int_65536_123'
                                    955 ;control_byte              Allocated with name '_i2c_EEPROM_Write_control_byte_65536_123'
                                    956 ;address_byte              Allocated with name '_i2c_EEPROM_Write_address_byte_65536_123'
                                    957 ;i                         Allocated with name '_i2c_EEPROM_Write_i_65536_123'
                                    958 ;------------------------------------------------------------
                                    959 ;	i2c.c:159: void i2c_EEPROM_Write()
                                    960 ;	-----------------------------------------
                                    961 ;	 function i2c_EEPROM_Write
                                    962 ;	-----------------------------------------
      00017C                        963 _i2c_EEPROM_Write:
                                    964 ;	i2c.c:161: uint8_t flag=1;
      00017C 90r00r02         [24]  965 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      00017F 74 01            [12]  966 	mov	a,#0x01
      000181 F0               [24]  967 	movx	@dptr,a
                                    968 ;	i2c.c:162: uint8_t flag1=1;
      000182 90r00r03         [24]  969 	mov	dptr,#_i2c_EEPROM_Write_flag1_65536_123
      000185 F0               [24]  970 	movx	@dptr,a
                                    971 ;	i2c.c:163: uint16_t address=0;//to store the address from the user in a single integer form
      000186 90r00r04         [24]  972 	mov	dptr,#_i2c_EEPROM_Write_address_65536_123
      000189 E4               [12]  973 	clr	a
      00018A F0               [24]  974 	movx	@dptr,a
      00018B A3               [24]  975 	inc	dptr
      00018C F0               [24]  976 	movx	@dptr,a
                                    977 ;	i2c.c:166: uint16_t data=0;
      00018D 90r00r0F         [24]  978 	mov	dptr,#_i2c_EEPROM_Write_data_65536_123
      000190 F0               [24]  979 	movx	@dptr,a
      000191 A3               [24]  980 	inc	dptr
      000192 F0               [24]  981 	movx	@dptr,a
                                    982 ;	i2c.c:174: while(flag)
      000193                        983 00150$:
      000193 90r00r02         [24]  984 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      000196 E0               [24]  985 	movx	a,@dptr
      000197 70 03            [24]  986 	jnz	00458$
      000199 02r04r2E         [24]  987 	ljmp	00245$
      00019C                        988 00458$:
                                    989 ;	i2c.c:176: flag=0;
      00019C 90r00r02         [24]  990 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      00019F E4               [12]  991 	clr	a
      0001A0 F0               [24]  992 	movx	@dptr,a
                                    993 ;	i2c.c:177: printf_tiny("\n\rEnter the address between 0x00-0x7ff\n\r");
      0001A1 74r00            [12]  994 	mov	a,#___str_0
      0001A3 C0 E0            [24]  995 	push	acc
      0001A5 74s00            [12]  996 	mov	a,#(___str_0 >> 8)
      0001A7 C0 E0            [24]  997 	push	acc
      0001A9 12r00r00         [24]  998 	lcall	_printf_tiny
      0001AC 15 81            [12]  999 	dec	sp
      0001AE 15 81            [12] 1000 	dec	sp
                                   1001 ;	i2c.c:178: for(i=0;i<3;i++)
      0001B0 7F 00            [12] 1002 	mov	r7,#0x00
      0001B2                       1003 00202$:
                                   1004 ;	i2c.c:180: get_address[i]=getchar();
      0001B2 EF               [12] 1005 	mov	a,r7
      0001B3 24r06            [12] 1006 	add	a,#_i2c_EEPROM_Write_get_address_65536_123
      0001B5 FD               [12] 1007 	mov	r5,a
      0001B6 E4               [12] 1008 	clr	a
      0001B7 34s00            [12] 1009 	addc	a,#(_i2c_EEPROM_Write_get_address_65536_123 >> 8)
      0001B9 FE               [12] 1010 	mov	r6,a
      0001BA C0 07            [24] 1011 	push	ar7
      0001BC C0 06            [24] 1012 	push	ar6
      0001BE C0 05            [24] 1013 	push	ar5
      0001C0 12r00r00         [24] 1014 	lcall	_getchar
      0001C3 AB 82            [24] 1015 	mov	r3,dpl
      0001C5 D0 05            [24] 1016 	pop	ar5
      0001C7 D0 06            [24] 1017 	pop	ar6
      0001C9 8D 82            [24] 1018 	mov	dpl,r5
      0001CB 8E 83            [24] 1019 	mov	dph,r6
      0001CD EB               [12] 1020 	mov	a,r3
      0001CE F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	i2c.c:181: putchar(get_address[i]);
      0001CF 7E 00            [12] 1023 	mov	r6,#0x00
      0001D1 8B 82            [24] 1024 	mov	dpl,r3
      0001D3 8E 83            [24] 1025 	mov	dph,r6
      0001D5 12r00r00         [24] 1026 	lcall	_putchar
      0001D8 D0 07            [24] 1027 	pop	ar7
                                   1028 ;	i2c.c:178: for(i=0;i<3;i++)
      0001DA 0F               [12] 1029 	inc	r7
      0001DB BF 03 00         [24] 1030 	cjne	r7,#0x03,00459$
      0001DE                       1031 00459$:
      0001DE 40 D2            [24] 1032 	jc	00202$
                                   1033 ;	i2c.c:184: for(i=0;i<3;i++)
      0001E0 7F 00            [12] 1034 	mov	r7,#0x00
      0001E2                       1035 00204$:
                                   1036 ;	i2c.c:186: switch(i)
      0001E2 BF 00 02         [24] 1037 	cjne	r7,#0x00,00461$
      0001E5 80 0E            [24] 1038 	sjmp	00102$
      0001E7                       1039 00461$:
      0001E7 BF 01 02         [24] 1040 	cjne	r7,#0x01,00462$
      0001EA 80 5C            [24] 1041 	sjmp	00107$
      0001EC                       1042 00462$:
      0001EC BF 02 03         [24] 1043 	cjne	r7,#0x02,00463$
      0001EF 02r03r3B         [24] 1044 	ljmp	00127$
      0001F2                       1045 00463$:
      0001F2 02r04r22         [24] 1046 	ljmp	00205$
                                   1047 ;	i2c.c:188: case 0:
      0001F5                       1048 00102$:
                                   1049 ;	i2c.c:189: if((get_address[i]>=48) && (get_address[i]<=55))
      0001F5 EF               [12] 1050 	mov	a,r7
      0001F6 24r06            [12] 1051 	add	a,#_i2c_EEPROM_Write_get_address_65536_123
      0001F8 F5 82            [12] 1052 	mov	dpl,a
      0001FA E4               [12] 1053 	clr	a
      0001FB 34s00            [12] 1054 	addc	a,#(_i2c_EEPROM_Write_get_address_65536_123 >> 8)
      0001FD F5 83            [12] 1055 	mov	dph,a
      0001FF E0               [24] 1056 	movx	a,@dptr
      000200 FE               [12] 1057 	mov	r6,a
      000201 BE 30 00         [24] 1058 	cjne	r6,#0x30,00464$
      000204                       1059 00464$:
      000204 40 26            [24] 1060 	jc	00104$
      000206 EE               [12] 1061 	mov	a,r6
      000207 24 C8            [12] 1062 	add	a,#0xff - 0x37
      000209 40 21            [24] 1063 	jc	00104$
                                   1064 ;	i2c.c:191: get_address_int[i]= get_address[i]-48;
      00020B EF               [12] 1065 	mov	a,r7
      00020C 75 F0 02         [24] 1066 	mov	b,#0x02
      00020F A4               [48] 1067 	mul	ab
      000210 24r09            [12] 1068 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      000212 F5 82            [12] 1069 	mov	dpl,a
      000214 74s00            [12] 1070 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      000216 35 F0            [12] 1071 	addc	a,b
      000218 F5 83            [12] 1072 	mov	dph,a
      00021A 7D 00            [12] 1073 	mov	r5,#0x00
      00021C EE               [12] 1074 	mov	a,r6
      00021D 24 D0            [12] 1075 	add	a,#0xd0
      00021F FE               [12] 1076 	mov	r6,a
      000220 ED               [12] 1077 	mov	a,r5
      000221 34 FF            [12] 1078 	addc	a,#0xff
      000223 FD               [12] 1079 	mov	r5,a
      000224 EE               [12] 1080 	mov	a,r6
      000225 F0               [24] 1081 	movx	@dptr,a
      000226 ED               [12] 1082 	mov	a,r5
      000227 A3               [24] 1083 	inc	dptr
      000228 F0               [24] 1084 	movx	@dptr,a
      000229 02r04r22         [24] 1085 	ljmp	00205$
      00022C                       1086 00104$:
                                   1087 ;	i2c.c:195: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      00022C C0 07            [24] 1088 	push	ar7
      00022E 74r29            [12] 1089 	mov	a,#___str_1
      000230 C0 E0            [24] 1090 	push	acc
      000232 74s00            [12] 1091 	mov	a,#(___str_1 >> 8)
      000234 C0 E0            [24] 1092 	push	acc
      000236 12r00r00         [24] 1093 	lcall	_printf_tiny
      000239 15 81            [12] 1094 	dec	sp
      00023B 15 81            [12] 1095 	dec	sp
      00023D D0 07            [24] 1096 	pop	ar7
                                   1097 ;	i2c.c:196: flag=1;
      00023F 90r00r02         [24] 1098 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      000242 74 01            [12] 1099 	mov	a,#0x01
      000244 F0               [24] 1100 	movx	@dptr,a
                                   1101 ;	i2c.c:198: break;
      000245 02r04r22         [24] 1102 	ljmp	00205$
                                   1103 ;	i2c.c:200: case 1:
      000248                       1104 00107$:
                                   1105 ;	i2c.c:201: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      000248 EF               [12] 1106 	mov	a,r7
      000249 24r06            [12] 1107 	add	a,#_i2c_EEPROM_Write_get_address_65536_123
      00024B FD               [12] 1108 	mov	r5,a
      00024C E4               [12] 1109 	clr	a
      00024D 34s00            [12] 1110 	addc	a,#(_i2c_EEPROM_Write_get_address_65536_123 >> 8)
      00024F FE               [12] 1111 	mov	r6,a
      000250 8D 82            [24] 1112 	mov	dpl,r5
      000252 8E 83            [24] 1113 	mov	dph,r6
      000254 E0               [24] 1114 	movx	a,@dptr
      000255 FC               [12] 1115 	mov	r4,a
      000256 BC 30 00         [24] 1116 	cjne	r4,#0x30,00467$
      000259                       1117 00467$:
      000259 40 05            [24] 1118 	jc	00124$
      00025B EC               [12] 1119 	mov	a,r4
      00025C 24 C6            [12] 1120 	add	a,#0xff - 0x39
      00025E 50 26            [24] 1121 	jnc	00119$
      000260                       1122 00124$:
      000260 8D 82            [24] 1123 	mov	dpl,r5
      000262 8E 83            [24] 1124 	mov	dph,r6
      000264 E0               [24] 1125 	movx	a,@dptr
      000265 FC               [12] 1126 	mov	r4,a
      000266 BC 41 00         [24] 1127 	cjne	r4,#0x41,00470$
      000269                       1128 00470$:
      000269 40 05            [24] 1129 	jc	00126$
      00026B EC               [12] 1130 	mov	a,r4
      00026C 24 B9            [12] 1131 	add	a,#0xff - 0x46
      00026E 50 16            [24] 1132 	jnc	00119$
      000270                       1133 00126$:
      000270 8D 82            [24] 1134 	mov	dpl,r5
      000272 8E 83            [24] 1135 	mov	dph,r6
      000274 E0               [24] 1136 	movx	a,@dptr
      000275 FC               [12] 1137 	mov	r4,a
      000276 BC 61 00         [24] 1138 	cjne	r4,#0x61,00473$
      000279                       1139 00473$:
      000279 50 03            [24] 1140 	jnc	00474$
      00027B 02r03r1F         [24] 1141 	ljmp	00120$
      00027E                       1142 00474$:
      00027E EC               [12] 1143 	mov	a,r4
      00027F 24 99            [12] 1144 	add	a,#0xff - 0x66
      000281 50 03            [24] 1145 	jnc	00475$
      000283 02r03r1F         [24] 1146 	ljmp	00120$
      000286                       1147 00475$:
      000286                       1148 00119$:
                                   1149 ;	i2c.c:203: if((get_address[i]>=48) && (get_address[i]<=57))
      000286 8D 82            [24] 1150 	mov	dpl,r5
      000288 8E 83            [24] 1151 	mov	dph,r6
      00028A E0               [24] 1152 	movx	a,@dptr
      00028B FC               [12] 1153 	mov	r4,a
      00028C BC 30 00         [24] 1154 	cjne	r4,#0x30,00476$
      00028F                       1155 00476$:
      00028F 40 26            [24] 1156 	jc	00116$
      000291 EC               [12] 1157 	mov	a,r4
      000292 24 C6            [12] 1158 	add	a,#0xff - 0x39
      000294 40 21            [24] 1159 	jc	00116$
                                   1160 ;	i2c.c:205: get_address_int[i]=get_address[i]-48;
      000296 EF               [12] 1161 	mov	a,r7
      000297 75 F0 02         [24] 1162 	mov	b,#0x02
      00029A A4               [48] 1163 	mul	ab
      00029B 24r09            [12] 1164 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      00029D F5 82            [12] 1165 	mov	dpl,a
      00029F 74s00            [12] 1166 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      0002A1 35 F0            [12] 1167 	addc	a,b
      0002A3 F5 83            [12] 1168 	mov	dph,a
      0002A5 7B 00            [12] 1169 	mov	r3,#0x00
      0002A7 EC               [12] 1170 	mov	a,r4
      0002A8 24 D0            [12] 1171 	add	a,#0xd0
      0002AA FC               [12] 1172 	mov	r4,a
      0002AB EB               [12] 1173 	mov	a,r3
      0002AC 34 FF            [12] 1174 	addc	a,#0xff
      0002AE FB               [12] 1175 	mov	r3,a
      0002AF EC               [12] 1176 	mov	a,r4
      0002B0 F0               [24] 1177 	movx	@dptr,a
      0002B1 EB               [12] 1178 	mov	a,r3
      0002B2 A3               [24] 1179 	inc	dptr
      0002B3 F0               [24] 1180 	movx	@dptr,a
      0002B4 02r04r22         [24] 1181 	ljmp	00205$
      0002B7                       1182 00116$:
                                   1183 ;	i2c.c:207: else if((get_address[i]>=65) && (get_address[i]<=70))
      0002B7 8D 82            [24] 1184 	mov	dpl,r5
      0002B9 8E 83            [24] 1185 	mov	dph,r6
      0002BB E0               [24] 1186 	movx	a,@dptr
      0002BC FC               [12] 1187 	mov	r4,a
      0002BD BC 41 00         [24] 1188 	cjne	r4,#0x41,00479$
      0002C0                       1189 00479$:
      0002C0 40 26            [24] 1190 	jc	00112$
      0002C2 EC               [12] 1191 	mov	a,r4
      0002C3 24 B9            [12] 1192 	add	a,#0xff - 0x46
      0002C5 40 21            [24] 1193 	jc	00112$
                                   1194 ;	i2c.c:209: get_address_int[i]=get_address[i]-55;
      0002C7 EF               [12] 1195 	mov	a,r7
      0002C8 75 F0 02         [24] 1196 	mov	b,#0x02
      0002CB A4               [48] 1197 	mul	ab
      0002CC 24r09            [12] 1198 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      0002CE F5 82            [12] 1199 	mov	dpl,a
      0002D0 74s00            [12] 1200 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      0002D2 35 F0            [12] 1201 	addc	a,b
      0002D4 F5 83            [12] 1202 	mov	dph,a
      0002D6 7B 00            [12] 1203 	mov	r3,#0x00
      0002D8 EC               [12] 1204 	mov	a,r4
      0002D9 24 C9            [12] 1205 	add	a,#0xc9
      0002DB FC               [12] 1206 	mov	r4,a
      0002DC EB               [12] 1207 	mov	a,r3
      0002DD 34 FF            [12] 1208 	addc	a,#0xff
      0002DF FB               [12] 1209 	mov	r3,a
      0002E0 EC               [12] 1210 	mov	a,r4
      0002E1 F0               [24] 1211 	movx	@dptr,a
      0002E2 EB               [12] 1212 	mov	a,r3
      0002E3 A3               [24] 1213 	inc	dptr
      0002E4 F0               [24] 1214 	movx	@dptr,a
      0002E5 02r04r22         [24] 1215 	ljmp	00205$
      0002E8                       1216 00112$:
                                   1217 ;	i2c.c:211: else if((get_address[i]>=97) && (get_address[i]<=102))
      0002E8 8D 82            [24] 1218 	mov	dpl,r5
      0002EA 8E 83            [24] 1219 	mov	dph,r6
      0002EC E0               [24] 1220 	movx	a,@dptr
      0002ED FE               [12] 1221 	mov	r6,a
      0002EE BE 61 00         [24] 1222 	cjne	r6,#0x61,00482$
      0002F1                       1223 00482$:
      0002F1 50 03            [24] 1224 	jnc	00483$
      0002F3 02r04r22         [24] 1225 	ljmp	00205$
      0002F6                       1226 00483$:
      0002F6 EE               [12] 1227 	mov	a,r6
      0002F7 24 99            [12] 1228 	add	a,#0xff - 0x66
      0002F9 50 03            [24] 1229 	jnc	00484$
      0002FB 02r04r22         [24] 1230 	ljmp	00205$
      0002FE                       1231 00484$:
                                   1232 ;	i2c.c:213: get_address_int[i]=get_address[i]-87;
      0002FE EF               [12] 1233 	mov	a,r7
      0002FF 75 F0 02         [24] 1234 	mov	b,#0x02
      000302 A4               [48] 1235 	mul	ab
      000303 24r09            [12] 1236 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      000305 F5 82            [12] 1237 	mov	dpl,a
      000307 74s00            [12] 1238 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      000309 35 F0            [12] 1239 	addc	a,b
      00030B F5 83            [12] 1240 	mov	dph,a
      00030D 7D 00            [12] 1241 	mov	r5,#0x00
      00030F EE               [12] 1242 	mov	a,r6
      000310 24 A9            [12] 1243 	add	a,#0xa9
      000312 FE               [12] 1244 	mov	r6,a
      000313 ED               [12] 1245 	mov	a,r5
      000314 34 FF            [12] 1246 	addc	a,#0xff
      000316 FD               [12] 1247 	mov	r5,a
      000317 EE               [12] 1248 	mov	a,r6
      000318 F0               [24] 1249 	movx	@dptr,a
      000319 ED               [12] 1250 	mov	a,r5
      00031A A3               [24] 1251 	inc	dptr
      00031B F0               [24] 1252 	movx	@dptr,a
      00031C 02r04r22         [24] 1253 	ljmp	00205$
      00031F                       1254 00120$:
                                   1255 ;	i2c.c:218: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      00031F C0 07            [24] 1256 	push	ar7
      000321 74r29            [12] 1257 	mov	a,#___str_1
      000323 C0 E0            [24] 1258 	push	acc
      000325 74s00            [12] 1259 	mov	a,#(___str_1 >> 8)
      000327 C0 E0            [24] 1260 	push	acc
      000329 12r00r00         [24] 1261 	lcall	_printf_tiny
      00032C 15 81            [12] 1262 	dec	sp
      00032E 15 81            [12] 1263 	dec	sp
      000330 D0 07            [24] 1264 	pop	ar7
                                   1265 ;	i2c.c:219: flag=1;
      000332 90r00r02         [24] 1266 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      000335 74 01            [12] 1267 	mov	a,#0x01
      000337 F0               [24] 1268 	movx	@dptr,a
                                   1269 ;	i2c.c:221: break;
      000338 02r04r22         [24] 1270 	ljmp	00205$
                                   1271 ;	i2c.c:223: case 2:
      00033B                       1272 00127$:
                                   1273 ;	i2c.c:224: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      00033B EF               [12] 1274 	mov	a,r7
      00033C 24r06            [12] 1275 	add	a,#_i2c_EEPROM_Write_get_address_65536_123
      00033E FD               [12] 1276 	mov	r5,a
      00033F E4               [12] 1277 	clr	a
      000340 34s00            [12] 1278 	addc	a,#(_i2c_EEPROM_Write_get_address_65536_123 >> 8)
      000342 FE               [12] 1279 	mov	r6,a
      000343 8D 82            [24] 1280 	mov	dpl,r5
      000345 8E 83            [24] 1281 	mov	dph,r6
      000347 E0               [24] 1282 	movx	a,@dptr
      000348 FC               [12] 1283 	mov	r4,a
      000349 BC 30 00         [24] 1284 	cjne	r4,#0x30,00485$
      00034C                       1285 00485$:
      00034C 40 05            [24] 1286 	jc	00144$
      00034E EC               [12] 1287 	mov	a,r4
      00034F 24 C6            [12] 1288 	add	a,#0xff - 0x39
      000351 50 26            [24] 1289 	jnc	00139$
      000353                       1290 00144$:
      000353 8D 82            [24] 1291 	mov	dpl,r5
      000355 8E 83            [24] 1292 	mov	dph,r6
      000357 E0               [24] 1293 	movx	a,@dptr
      000358 FC               [12] 1294 	mov	r4,a
      000359 BC 41 00         [24] 1295 	cjne	r4,#0x41,00488$
      00035C                       1296 00488$:
      00035C 40 05            [24] 1297 	jc	00146$
      00035E EC               [12] 1298 	mov	a,r4
      00035F 24 B9            [12] 1299 	add	a,#0xff - 0x46
      000361 50 16            [24] 1300 	jnc	00139$
      000363                       1301 00146$:
      000363 8D 82            [24] 1302 	mov	dpl,r5
      000365 8E 83            [24] 1303 	mov	dph,r6
      000367 E0               [24] 1304 	movx	a,@dptr
      000368 FC               [12] 1305 	mov	r4,a
      000369 BC 61 00         [24] 1306 	cjne	r4,#0x61,00491$
      00036C                       1307 00491$:
      00036C 50 03            [24] 1308 	jnc	00492$
      00036E 02r04r09         [24] 1309 	ljmp	00140$
      000371                       1310 00492$:
      000371 EC               [12] 1311 	mov	a,r4
      000372 24 99            [12] 1312 	add	a,#0xff - 0x66
      000374 50 03            [24] 1313 	jnc	00493$
      000376 02r04r09         [24] 1314 	ljmp	00140$
      000379                       1315 00493$:
      000379                       1316 00139$:
                                   1317 ;	i2c.c:226: if((get_address[i]>=48) && (get_address[i]<=57))
      000379 8D 82            [24] 1318 	mov	dpl,r5
      00037B 8E 83            [24] 1319 	mov	dph,r6
      00037D E0               [24] 1320 	movx	a,@dptr
      00037E FC               [12] 1321 	mov	r4,a
      00037F BC 30 00         [24] 1322 	cjne	r4,#0x30,00494$
      000382                       1323 00494$:
      000382 40 25            [24] 1324 	jc	00136$
      000384 EC               [12] 1325 	mov	a,r4
      000385 24 C6            [12] 1326 	add	a,#0xff - 0x39
      000387 40 20            [24] 1327 	jc	00136$
                                   1328 ;	i2c.c:228: get_address_int[i]=get_address[i]-48;
      000389 EF               [12] 1329 	mov	a,r7
      00038A 75 F0 02         [24] 1330 	mov	b,#0x02
      00038D A4               [48] 1331 	mul	ab
      00038E 24r09            [12] 1332 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      000390 F5 82            [12] 1333 	mov	dpl,a
      000392 74s00            [12] 1334 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      000394 35 F0            [12] 1335 	addc	a,b
      000396 F5 83            [12] 1336 	mov	dph,a
      000398 7B 00            [12] 1337 	mov	r3,#0x00
      00039A EC               [12] 1338 	mov	a,r4
      00039B 24 D0            [12] 1339 	add	a,#0xd0
      00039D FC               [12] 1340 	mov	r4,a
      00039E EB               [12] 1341 	mov	a,r3
      00039F 34 FF            [12] 1342 	addc	a,#0xff
      0003A1 FB               [12] 1343 	mov	r3,a
      0003A2 EC               [12] 1344 	mov	a,r4
      0003A3 F0               [24] 1345 	movx	@dptr,a
      0003A4 EB               [12] 1346 	mov	a,r3
      0003A5 A3               [24] 1347 	inc	dptr
      0003A6 F0               [24] 1348 	movx	@dptr,a
      0003A7 80 79            [24] 1349 	sjmp	00205$
      0003A9                       1350 00136$:
                                   1351 ;	i2c.c:230: else if((get_address[i]>=65) && (get_address[i]<=70))
      0003A9 8D 82            [24] 1352 	mov	dpl,r5
      0003AB 8E 83            [24] 1353 	mov	dph,r6
      0003AD E0               [24] 1354 	movx	a,@dptr
      0003AE FC               [12] 1355 	mov	r4,a
      0003AF BC 41 00         [24] 1356 	cjne	r4,#0x41,00497$
      0003B2                       1357 00497$:
      0003B2 40 25            [24] 1358 	jc	00132$
      0003B4 EC               [12] 1359 	mov	a,r4
      0003B5 24 B9            [12] 1360 	add	a,#0xff - 0x46
      0003B7 40 20            [24] 1361 	jc	00132$
                                   1362 ;	i2c.c:232: get_address_int[i]=get_address[i]-55;
      0003B9 EF               [12] 1363 	mov	a,r7
      0003BA 75 F0 02         [24] 1364 	mov	b,#0x02
      0003BD A4               [48] 1365 	mul	ab
      0003BE 24r09            [12] 1366 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      0003C0 F5 82            [12] 1367 	mov	dpl,a
      0003C2 74s00            [12] 1368 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      0003C4 35 F0            [12] 1369 	addc	a,b
      0003C6 F5 83            [12] 1370 	mov	dph,a
      0003C8 7B 00            [12] 1371 	mov	r3,#0x00
      0003CA EC               [12] 1372 	mov	a,r4
      0003CB 24 C9            [12] 1373 	add	a,#0xc9
      0003CD FC               [12] 1374 	mov	r4,a
      0003CE EB               [12] 1375 	mov	a,r3
      0003CF 34 FF            [12] 1376 	addc	a,#0xff
      0003D1 FB               [12] 1377 	mov	r3,a
      0003D2 EC               [12] 1378 	mov	a,r4
      0003D3 F0               [24] 1379 	movx	@dptr,a
      0003D4 EB               [12] 1380 	mov	a,r3
      0003D5 A3               [24] 1381 	inc	dptr
      0003D6 F0               [24] 1382 	movx	@dptr,a
      0003D7 80 49            [24] 1383 	sjmp	00205$
      0003D9                       1384 00132$:
                                   1385 ;	i2c.c:234: else if((get_address[i]>=97) && (get_address[i]<=102))
      0003D9 8D 82            [24] 1386 	mov	dpl,r5
      0003DB 8E 83            [24] 1387 	mov	dph,r6
      0003DD E0               [24] 1388 	movx	a,@dptr
      0003DE FE               [12] 1389 	mov	r6,a
      0003DF BE 61 00         [24] 1390 	cjne	r6,#0x61,00500$
      0003E2                       1391 00500$:
      0003E2 40 3E            [24] 1392 	jc	00205$
      0003E4 EE               [12] 1393 	mov	a,r6
      0003E5 24 99            [12] 1394 	add	a,#0xff - 0x66
      0003E7 40 39            [24] 1395 	jc	00205$
                                   1396 ;	i2c.c:236: get_address_int[i]=get_address[i]-87;
      0003E9 EF               [12] 1397 	mov	a,r7
      0003EA 75 F0 02         [24] 1398 	mov	b,#0x02
      0003ED A4               [48] 1399 	mul	ab
      0003EE 24r09            [12] 1400 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      0003F0 F5 82            [12] 1401 	mov	dpl,a
      0003F2 74s00            [12] 1402 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      0003F4 35 F0            [12] 1403 	addc	a,b
      0003F6 F5 83            [12] 1404 	mov	dph,a
      0003F8 7D 00            [12] 1405 	mov	r5,#0x00
      0003FA EE               [12] 1406 	mov	a,r6
      0003FB 24 A9            [12] 1407 	add	a,#0xa9
      0003FD FE               [12] 1408 	mov	r6,a
      0003FE ED               [12] 1409 	mov	a,r5
      0003FF 34 FF            [12] 1410 	addc	a,#0xff
      000401 FD               [12] 1411 	mov	r5,a
      000402 EE               [12] 1412 	mov	a,r6
      000403 F0               [24] 1413 	movx	@dptr,a
      000404 ED               [12] 1414 	mov	a,r5
      000405 A3               [24] 1415 	inc	dptr
      000406 F0               [24] 1416 	movx	@dptr,a
      000407 80 19            [24] 1417 	sjmp	00205$
      000409                       1418 00140$:
                                   1419 ;	i2c.c:241: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      000409 C0 07            [24] 1420 	push	ar7
      00040B 74r29            [12] 1421 	mov	a,#___str_1
      00040D C0 E0            [24] 1422 	push	acc
      00040F 74s00            [12] 1423 	mov	a,#(___str_1 >> 8)
      000411 C0 E0            [24] 1424 	push	acc
      000413 12r00r00         [24] 1425 	lcall	_printf_tiny
      000416 15 81            [12] 1426 	dec	sp
      000418 15 81            [12] 1427 	dec	sp
      00041A D0 07            [24] 1428 	pop	ar7
                                   1429 ;	i2c.c:242: flag=1;
      00041C 90r00r02         [24] 1430 	mov	dptr,#_i2c_EEPROM_Write_flag_65536_123
      00041F 74 01            [12] 1431 	mov	a,#0x01
      000421 F0               [24] 1432 	movx	@dptr,a
                                   1433 ;	i2c.c:247: }
      000422                       1434 00205$:
                                   1435 ;	i2c.c:184: for(i=0;i<3;i++)
      000422 0F               [12] 1436 	inc	r7
      000423 BF 03 00         [24] 1437 	cjne	r7,#0x03,00503$
      000426                       1438 00503$:
      000426 50 03            [24] 1439 	jnc	00504$
      000428 02r01rE2         [24] 1440 	ljmp	00204$
      00042B                       1441 00504$:
      00042B 02r01r93         [24] 1442 	ljmp	00150$
                                   1443 ;	i2c.c:252: for(i=0;i<3;i++)
      00042E                       1444 00245$:
      00042E 7F 00            [12] 1445 	mov	r7,#0x00
      000430                       1446 00206$:
                                   1447 ;	i2c.c:254: address = address+((get_address_int[i])*powf(16,2-i));
      000430 EF               [12] 1448 	mov	a,r7
      000431 75 F0 02         [24] 1449 	mov	b,#0x02
      000434 A4               [48] 1450 	mul	ab
      000435 24r09            [12] 1451 	add	a,#_i2c_EEPROM_Write_get_address_int_65536_123
      000437 F5 82            [12] 1452 	mov	dpl,a
      000439 74s00            [12] 1453 	mov	a,#(_i2c_EEPROM_Write_get_address_int_65536_123 >> 8)
      00043B 35 F0            [12] 1454 	addc	a,b
      00043D F5 83            [12] 1455 	mov	dph,a
      00043F E0               [24] 1456 	movx	a,@dptr
      000440 FD               [12] 1457 	mov	r5,a
      000441 A3               [24] 1458 	inc	dptr
      000442 E0               [24] 1459 	movx	a,@dptr
      000443 FE               [12] 1460 	mov	r6,a
      000444 8F 03            [24] 1461 	mov	ar3,r7
      000446 7C 00            [12] 1462 	mov	r4,#0x00
      000448 74 02            [12] 1463 	mov	a,#0x02
      00044A C3               [12] 1464 	clr	c
      00044B 9B               [12] 1465 	subb	a,r3
      00044C FB               [12] 1466 	mov	r3,a
      00044D E4               [12] 1467 	clr	a
      00044E 9C               [12] 1468 	subb	a,r4
      00044F FC               [12] 1469 	mov	r4,a
      000450 8B 82            [24] 1470 	mov	dpl,r3
      000452 8C 83            [24] 1471 	mov	dph,r4
      000454 C0 07            [24] 1472 	push	ar7
      000456 C0 06            [24] 1473 	push	ar6
      000458 C0 05            [24] 1474 	push	ar5
      00045A 12r00r00         [24] 1475 	lcall	___sint2fs
      00045D A9 82            [24] 1476 	mov	r1,dpl
      00045F AA 83            [24] 1477 	mov	r2,dph
      000461 AB F0            [24] 1478 	mov	r3,b
      000463 FC               [12] 1479 	mov	r4,a
      000464 90r00r00         [24] 1480 	mov	dptr,#_powf_PARM_2
      000467 E9               [12] 1481 	mov	a,r1
      000468 F0               [24] 1482 	movx	@dptr,a
      000469 EA               [12] 1483 	mov	a,r2
      00046A A3               [24] 1484 	inc	dptr
      00046B F0               [24] 1485 	movx	@dptr,a
      00046C EB               [12] 1486 	mov	a,r3
      00046D A3               [24] 1487 	inc	dptr
      00046E F0               [24] 1488 	movx	@dptr,a
      00046F EC               [12] 1489 	mov	a,r4
      000470 A3               [24] 1490 	inc	dptr
      000471 F0               [24] 1491 	movx	@dptr,a
      000472 90 00 00         [24] 1492 	mov	dptr,#0x0000
      000475 75 F0 80         [24] 1493 	mov	b,#0x80
      000478 74 41            [12] 1494 	mov	a,#0x41
      00047A 12r00r00         [24] 1495 	lcall	_powf
      00047D 85 82*00         [24] 1496 	mov	_i2c_EEPROM_Write_sloc0_1_0,dpl
      000480 85 83*01         [24] 1497 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 1),dph
      000483 85 F0*02         [24] 1498 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 2),b
      000486 F5*03            [12] 1499 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 3),a
      000488 D0 05            [24] 1500 	pop	ar5
      00048A D0 06            [24] 1501 	pop	ar6
      00048C 8D 82            [24] 1502 	mov	dpl,r5
      00048E 8E 83            [24] 1503 	mov	dph,r6
      000490 12r00r00         [24] 1504 	lcall	___uint2fs
      000493 A8 82            [24] 1505 	mov	r0,dpl
      000495 AC 83            [24] 1506 	mov	r4,dph
      000497 AD F0            [24] 1507 	mov	r5,b
      000499 FE               [12] 1508 	mov	r6,a
      00049A C0*00            [24] 1509 	push	_i2c_EEPROM_Write_sloc0_1_0
      00049C C0*01            [24] 1510 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 1)
      00049E C0*02            [24] 1511 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 2)
      0004A0 C0*03            [24] 1512 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 3)
      0004A2 88 82            [24] 1513 	mov	dpl,r0
      0004A4 8C 83            [24] 1514 	mov	dph,r4
      0004A6 8D F0            [24] 1515 	mov	b,r5
      0004A8 EE               [12] 1516 	mov	a,r6
      0004A9 12r00r00         [24] 1517 	lcall	___fsmul
      0004AC 85 82*00         [24] 1518 	mov	_i2c_EEPROM_Write_sloc0_1_0,dpl
      0004AF 85 83*01         [24] 1519 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 1),dph
      0004B2 85 F0*02         [24] 1520 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 2),b
      0004B5 F5*03            [12] 1521 	mov	(_i2c_EEPROM_Write_sloc0_1_0 + 3),a
      0004B7 E5 81            [12] 1522 	mov	a,sp
      0004B9 24 FC            [12] 1523 	add	a,#0xfc
      0004BB F5 81            [12] 1524 	mov	sp,a
      0004BD 90r00r04         [24] 1525 	mov	dptr,#_i2c_EEPROM_Write_address_65536_123
      0004C0 E0               [24] 1526 	movx	a,@dptr
      0004C1 F9               [12] 1527 	mov	r1,a
      0004C2 A3               [24] 1528 	inc	dptr
      0004C3 E0               [24] 1529 	movx	a,@dptr
      0004C4 FA               [12] 1530 	mov	r2,a
      0004C5 89 82            [24] 1531 	mov	dpl,r1
      0004C7 8A 83            [24] 1532 	mov	dph,r2
      0004C9 12r00r00         [24] 1533 	lcall	___uint2fs
      0004CC A8 82            [24] 1534 	mov	r0,dpl
      0004CE A9 83            [24] 1535 	mov	r1,dph
      0004D0 AA F0            [24] 1536 	mov	r2,b
      0004D2 FE               [12] 1537 	mov	r6,a
      0004D3 C0*00            [24] 1538 	push	_i2c_EEPROM_Write_sloc0_1_0
      0004D5 C0*01            [24] 1539 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 1)
      0004D7 C0*02            [24] 1540 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 2)
      0004D9 C0*03            [24] 1541 	push	(_i2c_EEPROM_Write_sloc0_1_0 + 3)
      0004DB 88 82            [24] 1542 	mov	dpl,r0
      0004DD 89 83            [24] 1543 	mov	dph,r1
      0004DF 8A F0            [24] 1544 	mov	b,r2
      0004E1 EE               [12] 1545 	mov	a,r6
      0004E2 12r00r00         [24] 1546 	lcall	___fsadd
      0004E5 AB 82            [24] 1547 	mov	r3,dpl
      0004E7 AC 83            [24] 1548 	mov	r4,dph
      0004E9 AD F0            [24] 1549 	mov	r5,b
      0004EB FE               [12] 1550 	mov	r6,a
      0004EC E5 81            [12] 1551 	mov	a,sp
      0004EE 24 FC            [12] 1552 	add	a,#0xfc
      0004F0 F5 81            [12] 1553 	mov	sp,a
      0004F2 8B 82            [24] 1554 	mov	dpl,r3
      0004F4 8C 83            [24] 1555 	mov	dph,r4
      0004F6 8D F0            [24] 1556 	mov	b,r5
      0004F8 EE               [12] 1557 	mov	a,r6
      0004F9 12r00r00         [24] 1558 	lcall	___fs2uint
      0004FC E5 82            [12] 1559 	mov	a,dpl
      0004FE 85 83 F0         [24] 1560 	mov	b,dph
      000501 D0 07            [24] 1561 	pop	ar7
      000503 90r00r04         [24] 1562 	mov	dptr,#_i2c_EEPROM_Write_address_65536_123
      000506 F0               [24] 1563 	movx	@dptr,a
      000507 E5 F0            [12] 1564 	mov	a,b
      000509 A3               [24] 1565 	inc	dptr
      00050A F0               [24] 1566 	movx	@dptr,a
                                   1567 ;	i2c.c:252: for(i=0;i<3;i++)
      00050B 0F               [12] 1568 	inc	r7
      00050C BF 03 00         [24] 1569 	cjne	r7,#0x03,00505$
      00050F                       1570 00505$:
      00050F 50 03            [24] 1571 	jnc	00506$
      000511 02r04r30         [24] 1572 	ljmp	00206$
      000514                       1573 00506$:
                                   1574 ;	i2c.c:258: control_byte = ((0xA0)|(address >> 7)&(0xfe));
      000514 90r00r04         [24] 1575 	mov	dptr,#_i2c_EEPROM_Write_address_65536_123
      000517 E0               [24] 1576 	movx	a,@dptr
      000518 FE               [12] 1577 	mov	r6,a
      000519 A3               [24] 1578 	inc	dptr
      00051A E0               [24] 1579 	movx	a,@dptr
      00051B FF               [12] 1580 	mov	r7,a
      00051C 8E 04            [24] 1581 	mov	ar4,r6
      00051E A2 E7            [12] 1582 	mov	c,acc.7
      000520 CC               [12] 1583 	xch	a,r4
      000521 33               [12] 1584 	rlc	a
      000522 CC               [12] 1585 	xch	a,r4
      000523 33               [12] 1586 	rlc	a
      000524 CC               [12] 1587 	xch	a,r4
      000525 54 01            [12] 1588 	anl	a,#0x01
      000527 FD               [12] 1589 	mov	r5,a
      000528 74 FE            [12] 1590 	mov	a,#0xfe
      00052A 5C               [12] 1591 	anl	a,r4
      00052B 44 A0            [12] 1592 	orl	a,#0xa0
      00052D F5*00            [12] 1593 	mov	_i2c_EEPROM_Write_sloc0_1_0,a
                                   1594 ;	i2c.c:261: address_byte = (uint8_t)address;
                                   1595 ;	i2c.c:264: while(flag1)
      00052F                       1596 00198$:
      00052F 90r00r03         [24] 1597 	mov	dptr,#_i2c_EEPROM_Write_flag1_65536_123
      000532 E0               [24] 1598 	movx	a,@dptr
      000533 70 03            [24] 1599 	jnz	00507$
      000535 02r07r8B         [24] 1600 	ljmp	00273$
      000538                       1601 00507$:
                                   1602 ;	i2c.c:266: flag1=0;
      000538 90r00r03         [24] 1603 	mov	dptr,#_i2c_EEPROM_Write_flag1_65536_123
      00053B E4               [12] 1604 	clr	a
      00053C F0               [24] 1605 	movx	@dptr,a
                                   1606 ;	i2c.c:267: printf_tiny("\n\rEnter the data you want to write(*Note:DATA SHOULD BE BETWEEN 0x00 and 0xFF)\n\r");
      00053D C0 06            [24] 1607 	push	ar6
      00053F 74r57            [12] 1608 	mov	a,#___str_2
      000541 C0 E0            [24] 1609 	push	acc
      000543 74s00            [12] 1610 	mov	a,#(___str_2 >> 8)
      000545 C0 E0            [24] 1611 	push	acc
      000547 12r00r00         [24] 1612 	lcall	_printf_tiny
      00054A 15 81            [12] 1613 	dec	sp
      00054C 15 81            [12] 1614 	dec	sp
      00054E D0 06            [24] 1615 	pop	ar6
                                   1616 ;	i2c.c:269: for(i=0;i<2;i++)
      000550 7F 00            [12] 1617 	mov	r7,#0x00
      000552                       1618 00208$:
                                   1619 ;	i2c.c:271: get_data[i]=getchar();
      000552 EF               [12] 1620 	mov	a,r7
      000553 24r11            [12] 1621 	add	a,#_i2c_EEPROM_Write_get_data_65536_123
      000555 FB               [12] 1622 	mov	r3,a
      000556 E4               [12] 1623 	clr	a
      000557 34s00            [12] 1624 	addc	a,#(_i2c_EEPROM_Write_get_data_65536_123 >> 8)
      000559 FC               [12] 1625 	mov	r4,a
      00055A C0 07            [24] 1626 	push	ar7
      00055C C0 06            [24] 1627 	push	ar6
      00055E C0 04            [24] 1628 	push	ar4
      000560 C0 03            [24] 1629 	push	ar3
      000562 12r00r00         [24] 1630 	lcall	_getchar
      000565 A9 82            [24] 1631 	mov	r1,dpl
      000567 D0 03            [24] 1632 	pop	ar3
      000569 D0 04            [24] 1633 	pop	ar4
      00056B 8B 82            [24] 1634 	mov	dpl,r3
      00056D 8C 83            [24] 1635 	mov	dph,r4
      00056F E9               [12] 1636 	mov	a,r1
      000570 F0               [24] 1637 	movx	@dptr,a
                                   1638 ;	i2c.c:272: putchar(get_data[i]);
      000571 7C 00            [12] 1639 	mov	r4,#0x00
      000573 89 82            [24] 1640 	mov	dpl,r1
      000575 8C 83            [24] 1641 	mov	dph,r4
      000577 12r00r00         [24] 1642 	lcall	_putchar
      00057A D0 06            [24] 1643 	pop	ar6
      00057C D0 07            [24] 1644 	pop	ar7
                                   1645 ;	i2c.c:269: for(i=0;i<2;i++)
      00057E 0F               [12] 1646 	inc	r7
      00057F BF 02 00         [24] 1647 	cjne	r7,#0x02,00508$
      000582                       1648 00508$:
      000582 40 CE            [24] 1649 	jc	00208$
                                   1650 ;	i2c.c:275: for(i=0;i<2;i++)
      000584 7F 00            [12] 1651 	mov	r7,#0x00
      000586                       1652 00210$:
                                   1653 ;	i2c.c:277: switch(i)
      000586 BF 00 02         [24] 1654 	cjne	r7,#0x00,00510$
      000589 80 09            [24] 1655 	sjmp	00155$
      00058B                       1656 00510$:
      00058B BF 01 03         [24] 1657 	cjne	r7,#0x01,00511$
      00058E 02r06r8F         [24] 1658 	ljmp	00175$
      000591                       1659 00511$:
      000591 02r07r7F         [24] 1660 	ljmp	00211$
                                   1661 ;	i2c.c:279: case 0:
      000594                       1662 00155$:
                                   1663 ;	i2c.c:280: if(((get_data[i]>='0') && (get_data[i]<='9')) ||  ((get_data[i]>='A') && (get_data[i]<='F')) || ((get_data[i]>='a') && (get_data[i]<='f')))
      000594 EF               [12] 1664 	mov	a,r7
      000595 24r11            [12] 1665 	add	a,#_i2c_EEPROM_Write_get_data_65536_123
      000597 FB               [12] 1666 	mov	r3,a
      000598 E4               [12] 1667 	clr	a
      000599 34s00            [12] 1668 	addc	a,#(_i2c_EEPROM_Write_get_data_65536_123 >> 8)
      00059B FC               [12] 1669 	mov	r4,a
      00059C 8B 82            [24] 1670 	mov	dpl,r3
      00059E 8C 83            [24] 1671 	mov	dph,r4
      0005A0 E0               [24] 1672 	movx	a,@dptr
      0005A1 FA               [12] 1673 	mov	r2,a
      0005A2 BA 30 00         [24] 1674 	cjne	r2,#0x30,00512$
      0005A5                       1675 00512$:
      0005A5 40 05            [24] 1676 	jc	00172$
      0005A7 EA               [12] 1677 	mov	a,r2
      0005A8 24 C6            [12] 1678 	add	a,#0xff - 0x39
      0005AA 50 26            [24] 1679 	jnc	00167$
      0005AC                       1680 00172$:
      0005AC 8B 82            [24] 1681 	mov	dpl,r3
      0005AE 8C 83            [24] 1682 	mov	dph,r4
      0005B0 E0               [24] 1683 	movx	a,@dptr
      0005B1 FA               [12] 1684 	mov	r2,a
      0005B2 BA 41 00         [24] 1685 	cjne	r2,#0x41,00515$
      0005B5                       1686 00515$:
      0005B5 40 05            [24] 1687 	jc	00174$
      0005B7 EA               [12] 1688 	mov	a,r2
      0005B8 24 B9            [12] 1689 	add	a,#0xff - 0x46
      0005BA 50 16            [24] 1690 	jnc	00167$
      0005BC                       1691 00174$:
      0005BC 8B 82            [24] 1692 	mov	dpl,r3
      0005BE 8C 83            [24] 1693 	mov	dph,r4
      0005C0 E0               [24] 1694 	movx	a,@dptr
      0005C1 FA               [12] 1695 	mov	r2,a
      0005C2 BA 61 00         [24] 1696 	cjne	r2,#0x61,00518$
      0005C5                       1697 00518$:
      0005C5 50 03            [24] 1698 	jnc	00519$
      0005C7 02r06r6F         [24] 1699 	ljmp	00168$
      0005CA                       1700 00519$:
      0005CA EA               [12] 1701 	mov	a,r2
      0005CB 24 99            [12] 1702 	add	a,#0xff - 0x66
      0005CD 50 03            [24] 1703 	jnc	00520$
      0005CF 02r06r6F         [24] 1704 	ljmp	00168$
      0005D2                       1705 00520$:
      0005D2                       1706 00167$:
                                   1707 ;	i2c.c:282: if((get_data[i]>=48) && (get_data[i]<=57))
      0005D2 8B 82            [24] 1708 	mov	dpl,r3
      0005D4 8C 83            [24] 1709 	mov	dph,r4
      0005D6 E0               [24] 1710 	movx	a,@dptr
      0005D7 FA               [12] 1711 	mov	r2,a
      0005D8 BA 30 00         [24] 1712 	cjne	r2,#0x30,00521$
      0005DB                       1713 00521$:
      0005DB 40 28            [24] 1714 	jc	00164$
      0005DD EA               [12] 1715 	mov	a,r2
      0005DE 24 C6            [12] 1716 	add	a,#0xff - 0x39
      0005E0 40 23            [24] 1717 	jc	00164$
                                   1718 ;	i2c.c:284: get_data_int[i]=get_data[i]-48;
      0005E2 EF               [12] 1719 	mov	a,r7
      0005E3 75 F0 02         [24] 1720 	mov	b,#0x02
      0005E6 A4               [48] 1721 	mul	ab
      0005E7 24r13            [12] 1722 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      0005E9 F5 82            [12] 1723 	mov	dpl,a
      0005EB 74s00            [12] 1724 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      0005ED 35 F0            [12] 1725 	addc	a,b
      0005EF F5 83            [12] 1726 	mov	dph,a
      0005F1 8A 01            [24] 1727 	mov	ar1,r2
      0005F3 7A 00            [12] 1728 	mov	r2,#0x00
      0005F5 E9               [12] 1729 	mov	a,r1
      0005F6 24 D0            [12] 1730 	add	a,#0xd0
      0005F8 F9               [12] 1731 	mov	r1,a
      0005F9 EA               [12] 1732 	mov	a,r2
      0005FA 34 FF            [12] 1733 	addc	a,#0xff
      0005FC FA               [12] 1734 	mov	r2,a
      0005FD E9               [12] 1735 	mov	a,r1
      0005FE F0               [24] 1736 	movx	@dptr,a
      0005FF EA               [12] 1737 	mov	a,r2
      000600 A3               [24] 1738 	inc	dptr
      000601 F0               [24] 1739 	movx	@dptr,a
      000602 02r07r7F         [24] 1740 	ljmp	00211$
      000605                       1741 00164$:
                                   1742 ;	i2c.c:286: else if((get_data[i]>=65) && (get_data[i]<=70))
      000605 8B 82            [24] 1743 	mov	dpl,r3
      000607 8C 83            [24] 1744 	mov	dph,r4
      000609 E0               [24] 1745 	movx	a,@dptr
      00060A FA               [12] 1746 	mov	r2,a
      00060B BA 41 00         [24] 1747 	cjne	r2,#0x41,00524$
      00060E                       1748 00524$:
      00060E 40 28            [24] 1749 	jc	00160$
      000610 EA               [12] 1750 	mov	a,r2
      000611 24 B9            [12] 1751 	add	a,#0xff - 0x46
      000613 40 23            [24] 1752 	jc	00160$
                                   1753 ;	i2c.c:288: get_data_int[i]=get_data[i]-55;
      000615 EF               [12] 1754 	mov	a,r7
      000616 75 F0 02         [24] 1755 	mov	b,#0x02
      000619 A4               [48] 1756 	mul	ab
      00061A 24r13            [12] 1757 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      00061C F5 82            [12] 1758 	mov	dpl,a
      00061E 74s00            [12] 1759 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      000620 35 F0            [12] 1760 	addc	a,b
      000622 F5 83            [12] 1761 	mov	dph,a
      000624 8A 01            [24] 1762 	mov	ar1,r2
      000626 7A 00            [12] 1763 	mov	r2,#0x00
      000628 E9               [12] 1764 	mov	a,r1
      000629 24 C9            [12] 1765 	add	a,#0xc9
      00062B F9               [12] 1766 	mov	r1,a
      00062C EA               [12] 1767 	mov	a,r2
      00062D 34 FF            [12] 1768 	addc	a,#0xff
      00062F FA               [12] 1769 	mov	r2,a
      000630 E9               [12] 1770 	mov	a,r1
      000631 F0               [24] 1771 	movx	@dptr,a
      000632 EA               [12] 1772 	mov	a,r2
      000633 A3               [24] 1773 	inc	dptr
      000634 F0               [24] 1774 	movx	@dptr,a
      000635 02r07r7F         [24] 1775 	ljmp	00211$
      000638                       1776 00160$:
                                   1777 ;	i2c.c:290: else if((get_data[i]>=97) && (get_data[i]<=102))
      000638 8B 82            [24] 1778 	mov	dpl,r3
      00063A 8C 83            [24] 1779 	mov	dph,r4
      00063C E0               [24] 1780 	movx	a,@dptr
      00063D FC               [12] 1781 	mov	r4,a
      00063E BC 61 00         [24] 1782 	cjne	r4,#0x61,00527$
      000641                       1783 00527$:
      000641 50 03            [24] 1784 	jnc	00528$
      000643 02r07r7F         [24] 1785 	ljmp	00211$
      000646                       1786 00528$:
      000646 EC               [12] 1787 	mov	a,r4
      000647 24 99            [12] 1788 	add	a,#0xff - 0x66
      000649 50 03            [24] 1789 	jnc	00529$
      00064B 02r07r7F         [24] 1790 	ljmp	00211$
      00064E                       1791 00529$:
                                   1792 ;	i2c.c:292: get_data_int[i]=get_data[i]-87;
      00064E EF               [12] 1793 	mov	a,r7
      00064F 75 F0 02         [24] 1794 	mov	b,#0x02
      000652 A4               [48] 1795 	mul	ab
      000653 24r13            [12] 1796 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      000655 F5 82            [12] 1797 	mov	dpl,a
      000657 74s00            [12] 1798 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      000659 35 F0            [12] 1799 	addc	a,b
      00065B F5 83            [12] 1800 	mov	dph,a
      00065D 7B 00            [12] 1801 	mov	r3,#0x00
      00065F EC               [12] 1802 	mov	a,r4
      000660 24 A9            [12] 1803 	add	a,#0xa9
      000662 FC               [12] 1804 	mov	r4,a
      000663 EB               [12] 1805 	mov	a,r3
      000664 34 FF            [12] 1806 	addc	a,#0xff
      000666 FB               [12] 1807 	mov	r3,a
      000667 EC               [12] 1808 	mov	a,r4
      000668 F0               [24] 1809 	movx	@dptr,a
      000669 EB               [12] 1810 	mov	a,r3
      00066A A3               [24] 1811 	inc	dptr
      00066B F0               [24] 1812 	movx	@dptr,a
      00066C 02r07r7F         [24] 1813 	ljmp	00211$
      00066F                       1814 00168$:
                                   1815 ;	i2c.c:297: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      00066F C0 07            [24] 1816 	push	ar7
      000671 C0 06            [24] 1817 	push	ar6
      000673 74r29            [12] 1818 	mov	a,#___str_1
      000675 C0 E0            [24] 1819 	push	acc
      000677 74s00            [12] 1820 	mov	a,#(___str_1 >> 8)
      000679 C0 E0            [24] 1821 	push	acc
      00067B 12r00r00         [24] 1822 	lcall	_printf_tiny
      00067E 15 81            [12] 1823 	dec	sp
      000680 15 81            [12] 1824 	dec	sp
      000682 D0 06            [24] 1825 	pop	ar6
      000684 D0 07            [24] 1826 	pop	ar7
                                   1827 ;	i2c.c:298: flag1=1;
      000686 90r00r03         [24] 1828 	mov	dptr,#_i2c_EEPROM_Write_flag1_65536_123
      000689 74 01            [12] 1829 	mov	a,#0x01
      00068B F0               [24] 1830 	movx	@dptr,a
                                   1831 ;	i2c.c:300: break;
      00068C 02r07r7F         [24] 1832 	ljmp	00211$
                                   1833 ;	i2c.c:302: case 1:
      00068F                       1834 00175$:
                                   1835 ;	i2c.c:303: if(((get_data[i]>='0') && (get_data[i]<='9')) ||  ((get_data[i]>='A') && (get_data[i]<='F')) || ((get_data[i]>='a') && (get_data[i]<='f')))
      00068F EF               [12] 1836 	mov	a,r7
      000690 24r11            [12] 1837 	add	a,#_i2c_EEPROM_Write_get_data_65536_123
      000692 FB               [12] 1838 	mov	r3,a
      000693 E4               [12] 1839 	clr	a
      000694 34s00            [12] 1840 	addc	a,#(_i2c_EEPROM_Write_get_data_65536_123 >> 8)
      000696 FC               [12] 1841 	mov	r4,a
      000697 8B 82            [24] 1842 	mov	dpl,r3
      000699 8C 83            [24] 1843 	mov	dph,r4
      00069B E0               [24] 1844 	movx	a,@dptr
      00069C FA               [12] 1845 	mov	r2,a
      00069D BA 30 00         [24] 1846 	cjne	r2,#0x30,00530$
      0006A0                       1847 00530$:
      0006A0 40 05            [24] 1848 	jc	00192$
      0006A2 EA               [12] 1849 	mov	a,r2
      0006A3 24 C6            [12] 1850 	add	a,#0xff - 0x39
      0006A5 50 26            [24] 1851 	jnc	00187$
      0006A7                       1852 00192$:
      0006A7 8B 82            [24] 1853 	mov	dpl,r3
      0006A9 8C 83            [24] 1854 	mov	dph,r4
      0006AB E0               [24] 1855 	movx	a,@dptr
      0006AC FA               [12] 1856 	mov	r2,a
      0006AD BA 41 00         [24] 1857 	cjne	r2,#0x41,00533$
      0006B0                       1858 00533$:
      0006B0 40 05            [24] 1859 	jc	00194$
      0006B2 EA               [12] 1860 	mov	a,r2
      0006B3 24 B9            [12] 1861 	add	a,#0xff - 0x46
      0006B5 50 16            [24] 1862 	jnc	00187$
      0006B7                       1863 00194$:
      0006B7 8B 82            [24] 1864 	mov	dpl,r3
      0006B9 8C 83            [24] 1865 	mov	dph,r4
      0006BB E0               [24] 1866 	movx	a,@dptr
      0006BC FA               [12] 1867 	mov	r2,a
      0006BD BA 61 00         [24] 1868 	cjne	r2,#0x61,00536$
      0006C0                       1869 00536$:
      0006C0 50 03            [24] 1870 	jnc	00537$
      0006C2 02r07r62         [24] 1871 	ljmp	00188$
      0006C5                       1872 00537$:
      0006C5 EA               [12] 1873 	mov	a,r2
      0006C6 24 99            [12] 1874 	add	a,#0xff - 0x66
      0006C8 50 03            [24] 1875 	jnc	00538$
      0006CA 02r07r62         [24] 1876 	ljmp	00188$
      0006CD                       1877 00538$:
      0006CD                       1878 00187$:
                                   1879 ;	i2c.c:305: if((get_data[i]>=48) && (get_data[i]<=57))
      0006CD 8B 82            [24] 1880 	mov	dpl,r3
      0006CF 8C 83            [24] 1881 	mov	dph,r4
      0006D1 E0               [24] 1882 	movx	a,@dptr
      0006D2 FA               [12] 1883 	mov	r2,a
      0006D3 BA 30 00         [24] 1884 	cjne	r2,#0x30,00539$
      0006D6                       1885 00539$:
      0006D6 40 28            [24] 1886 	jc	00184$
      0006D8 EA               [12] 1887 	mov	a,r2
      0006D9 24 C6            [12] 1888 	add	a,#0xff - 0x39
      0006DB 40 23            [24] 1889 	jc	00184$
                                   1890 ;	i2c.c:307: get_data_int[i]=get_data[i]-48;
      0006DD EF               [12] 1891 	mov	a,r7
      0006DE 75 F0 02         [24] 1892 	mov	b,#0x02
      0006E1 A4               [48] 1893 	mul	ab
      0006E2 24r13            [12] 1894 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      0006E4 F5 82            [12] 1895 	mov	dpl,a
      0006E6 74s00            [12] 1896 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      0006E8 35 F0            [12] 1897 	addc	a,b
      0006EA F5 83            [12] 1898 	mov	dph,a
      0006EC 8A 01            [24] 1899 	mov	ar1,r2
      0006EE 7A 00            [12] 1900 	mov	r2,#0x00
      0006F0 E9               [12] 1901 	mov	a,r1
      0006F1 24 D0            [12] 1902 	add	a,#0xd0
      0006F3 F9               [12] 1903 	mov	r1,a
      0006F4 EA               [12] 1904 	mov	a,r2
      0006F5 34 FF            [12] 1905 	addc	a,#0xff
      0006F7 FA               [12] 1906 	mov	r2,a
      0006F8 E9               [12] 1907 	mov	a,r1
      0006F9 F0               [24] 1908 	movx	@dptr,a
      0006FA EA               [12] 1909 	mov	a,r2
      0006FB A3               [24] 1910 	inc	dptr
      0006FC F0               [24] 1911 	movx	@dptr,a
      0006FD 02r07r7F         [24] 1912 	ljmp	00211$
      000700                       1913 00184$:
                                   1914 ;	i2c.c:309: else if((get_data[i]>=65) && (get_data[i]<=70))
      000700 8B 82            [24] 1915 	mov	dpl,r3
      000702 8C 83            [24] 1916 	mov	dph,r4
      000704 E0               [24] 1917 	movx	a,@dptr
      000705 FA               [12] 1918 	mov	r2,a
      000706 BA 41 00         [24] 1919 	cjne	r2,#0x41,00542$
      000709                       1920 00542$:
      000709 40 27            [24] 1921 	jc	00180$
      00070B EA               [12] 1922 	mov	a,r2
      00070C 24 B9            [12] 1923 	add	a,#0xff - 0x46
      00070E 40 22            [24] 1924 	jc	00180$
                                   1925 ;	i2c.c:311: get_data_int[i]=get_data[i]-55;
      000710 EF               [12] 1926 	mov	a,r7
      000711 75 F0 02         [24] 1927 	mov	b,#0x02
      000714 A4               [48] 1928 	mul	ab
      000715 24r13            [12] 1929 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      000717 F5 82            [12] 1930 	mov	dpl,a
      000719 74s00            [12] 1931 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      00071B 35 F0            [12] 1932 	addc	a,b
      00071D F5 83            [12] 1933 	mov	dph,a
      00071F 8A 01            [24] 1934 	mov	ar1,r2
      000721 7A 00            [12] 1935 	mov	r2,#0x00
      000723 E9               [12] 1936 	mov	a,r1
      000724 24 C9            [12] 1937 	add	a,#0xc9
      000726 F9               [12] 1938 	mov	r1,a
      000727 EA               [12] 1939 	mov	a,r2
      000728 34 FF            [12] 1940 	addc	a,#0xff
      00072A FA               [12] 1941 	mov	r2,a
      00072B E9               [12] 1942 	mov	a,r1
      00072C F0               [24] 1943 	movx	@dptr,a
      00072D EA               [12] 1944 	mov	a,r2
      00072E A3               [24] 1945 	inc	dptr
      00072F F0               [24] 1946 	movx	@dptr,a
      000730 80 4D            [24] 1947 	sjmp	00211$
      000732                       1948 00180$:
                                   1949 ;	i2c.c:313: else if((get_data[i]>=97) && (get_data[i]<=102))
      000732 8B 82            [24] 1950 	mov	dpl,r3
      000734 8C 83            [24] 1951 	mov	dph,r4
      000736 E0               [24] 1952 	movx	a,@dptr
      000737 FC               [12] 1953 	mov	r4,a
      000738 BC 61 00         [24] 1954 	cjne	r4,#0x61,00545$
      00073B                       1955 00545$:
      00073B 40 42            [24] 1956 	jc	00211$
      00073D EC               [12] 1957 	mov	a,r4
      00073E 24 99            [12] 1958 	add	a,#0xff - 0x66
      000740 40 3D            [24] 1959 	jc	00211$
                                   1960 ;	i2c.c:315: get_data_int[i]=get_data[i]-87;
      000742 EF               [12] 1961 	mov	a,r7
      000743 75 F0 02         [24] 1962 	mov	b,#0x02
      000746 A4               [48] 1963 	mul	ab
      000747 24r13            [12] 1964 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      000749 F5 82            [12] 1965 	mov	dpl,a
      00074B 74s00            [12] 1966 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      00074D 35 F0            [12] 1967 	addc	a,b
      00074F F5 83            [12] 1968 	mov	dph,a
      000751 7B 00            [12] 1969 	mov	r3,#0x00
      000753 EC               [12] 1970 	mov	a,r4
      000754 24 A9            [12] 1971 	add	a,#0xa9
      000756 FC               [12] 1972 	mov	r4,a
      000757 EB               [12] 1973 	mov	a,r3
      000758 34 FF            [12] 1974 	addc	a,#0xff
      00075A FB               [12] 1975 	mov	r3,a
      00075B EC               [12] 1976 	mov	a,r4
      00075C F0               [24] 1977 	movx	@dptr,a
      00075D EB               [12] 1978 	mov	a,r3
      00075E A3               [24] 1979 	inc	dptr
      00075F F0               [24] 1980 	movx	@dptr,a
      000760 80 1D            [24] 1981 	sjmp	00211$
      000762                       1982 00188$:
                                   1983 ;	i2c.c:320: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      000762 C0 07            [24] 1984 	push	ar7
      000764 C0 06            [24] 1985 	push	ar6
      000766 74r29            [12] 1986 	mov	a,#___str_1
      000768 C0 E0            [24] 1987 	push	acc
      00076A 74s00            [12] 1988 	mov	a,#(___str_1 >> 8)
      00076C C0 E0            [24] 1989 	push	acc
      00076E 12r00r00         [24] 1990 	lcall	_printf_tiny
      000771 15 81            [12] 1991 	dec	sp
      000773 15 81            [12] 1992 	dec	sp
      000775 D0 06            [24] 1993 	pop	ar6
      000777 D0 07            [24] 1994 	pop	ar7
                                   1995 ;	i2c.c:321: flag1=1;
      000779 90r00r03         [24] 1996 	mov	dptr,#_i2c_EEPROM_Write_flag1_65536_123
      00077C 74 01            [12] 1997 	mov	a,#0x01
      00077E F0               [24] 1998 	movx	@dptr,a
                                   1999 ;	i2c.c:326: }
      00077F                       2000 00211$:
                                   2001 ;	i2c.c:275: for(i=0;i<2;i++)
      00077F 0F               [12] 2002 	inc	r7
      000780 BF 02 00         [24] 2003 	cjne	r7,#0x02,00548$
      000783                       2004 00548$:
      000783 50 03            [24] 2005 	jnc	00549$
      000785 02r05r86         [24] 2006 	ljmp	00210$
      000788                       2007 00549$:
      000788 02r05r2F         [24] 2008 	ljmp	00198$
                                   2009 ;	i2c.c:331: for(i=0;i<2;i++)
      00078B                       2010 00273$:
      00078B 7F 00            [12] 2011 	mov	r7,#0x00
      00078D                       2012 00212$:
                                   2013 ;	i2c.c:333: data = data +((get_data_int[i])*powf(16,1-i));
      00078D C0 06            [24] 2014 	push	ar6
      00078F EF               [12] 2015 	mov	a,r7
      000790 75 F0 02         [24] 2016 	mov	b,#0x02
      000793 A4               [48] 2017 	mul	ab
      000794 24r13            [12] 2018 	add	a,#_i2c_EEPROM_Write_get_data_int_65536_123
      000796 F5 82            [12] 2019 	mov	dpl,a
      000798 74s00            [12] 2020 	mov	a,#(_i2c_EEPROM_Write_get_data_int_65536_123 >> 8)
      00079A 35 F0            [12] 2021 	addc	a,b
      00079C F5 83            [12] 2022 	mov	dph,a
      00079E E0               [24] 2023 	movx	a,@dptr
      00079F FB               [12] 2024 	mov	r3,a
      0007A0 A3               [24] 2025 	inc	dptr
      0007A1 E0               [24] 2026 	movx	a,@dptr
      0007A2 FC               [12] 2027 	mov	r4,a
      0007A3 8F 01            [24] 2028 	mov	ar1,r7
      0007A5 7A 00            [12] 2029 	mov	r2,#0x00
      0007A7 74 01            [12] 2030 	mov	a,#0x01
      0007A9 C3               [12] 2031 	clr	c
      0007AA 99               [12] 2032 	subb	a,r1
      0007AB F9               [12] 2033 	mov	r1,a
      0007AC E4               [12] 2034 	clr	a
      0007AD 9A               [12] 2035 	subb	a,r2
      0007AE FA               [12] 2036 	mov	r2,a
      0007AF 89 82            [24] 2037 	mov	dpl,r1
      0007B1 8A 83            [24] 2038 	mov	dph,r2
      0007B3 C0 07            [24] 2039 	push	ar7
      0007B5 C0 04            [24] 2040 	push	ar4
      0007B7 C0 03            [24] 2041 	push	ar3
      0007B9 12r00r00         [24] 2042 	lcall	___sint2fs
      0007BC A8 82            [24] 2043 	mov	r0,dpl
      0007BE A9 83            [24] 2044 	mov	r1,dph
      0007C0 AA F0            [24] 2045 	mov	r2,b
      0007C2 FE               [12] 2046 	mov	r6,a
      0007C3 D0 03            [24] 2047 	pop	ar3
      0007C5 D0 04            [24] 2048 	pop	ar4
      0007C7 90r00r00         [24] 2049 	mov	dptr,#_powf_PARM_2
      0007CA E8               [12] 2050 	mov	a,r0
      0007CB F0               [24] 2051 	movx	@dptr,a
      0007CC E9               [12] 2052 	mov	a,r1
      0007CD A3               [24] 2053 	inc	dptr
      0007CE F0               [24] 2054 	movx	@dptr,a
      0007CF EA               [12] 2055 	mov	a,r2
      0007D0 A3               [24] 2056 	inc	dptr
      0007D1 F0               [24] 2057 	movx	@dptr,a
      0007D2 EE               [12] 2058 	mov	a,r6
      0007D3 A3               [24] 2059 	inc	dptr
      0007D4 F0               [24] 2060 	movx	@dptr,a
      0007D5 90 00 00         [24] 2061 	mov	dptr,#0x0000
      0007D8 75 F0 80         [24] 2062 	mov	b,#0x80
      0007DB 74 41            [12] 2063 	mov	a,#0x41
      0007DD C0 06            [24] 2064 	push	ar6
      0007DF C0 04            [24] 2065 	push	ar4
      0007E1 C0 03            [24] 2066 	push	ar3
      0007E3 12r00r00         [24] 2067 	lcall	_powf
      0007E6 85 82*04         [24] 2068 	mov	_i2c_EEPROM_Write_sloc1_1_0,dpl
      0007E9 85 83*05         [24] 2069 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 1),dph
      0007EC 85 F0*06         [24] 2070 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 2),b
      0007EF F5*07            [12] 2071 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 3),a
      0007F1 D0 03            [24] 2072 	pop	ar3
      0007F3 D0 04            [24] 2073 	pop	ar4
      0007F5 D0 06            [24] 2074 	pop	ar6
      0007F7 8B 82            [24] 2075 	mov	dpl,r3
      0007F9 8C 83            [24] 2076 	mov	dph,r4
      0007FB 12r00r00         [24] 2077 	lcall	___uint2fs
      0007FE AB 82            [24] 2078 	mov	r3,dpl
      000800 AC 83            [24] 2079 	mov	r4,dph
      000802 AD F0            [24] 2080 	mov	r5,b
      000804 FE               [12] 2081 	mov	r6,a
      000805 C0 06            [24] 2082 	push	ar6
      000807 C0*04            [24] 2083 	push	_i2c_EEPROM_Write_sloc1_1_0
      000809 C0*05            [24] 2084 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 1)
      00080B C0*06            [24] 2085 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 2)
      00080D C0*07            [24] 2086 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 3)
      00080F 8B 82            [24] 2087 	mov	dpl,r3
      000811 8C 83            [24] 2088 	mov	dph,r4
      000813 8D F0            [24] 2089 	mov	b,r5
      000815 EE               [12] 2090 	mov	a,r6
      000816 12r00r00         [24] 2091 	lcall	___fsmul
      000819 85 82*04         [24] 2092 	mov	_i2c_EEPROM_Write_sloc1_1_0,dpl
      00081C 85 83*05         [24] 2093 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 1),dph
      00081F 85 F0*06         [24] 2094 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 2),b
      000822 F5*07            [12] 2095 	mov	(_i2c_EEPROM_Write_sloc1_1_0 + 3),a
      000824 E5 81            [12] 2096 	mov	a,sp
      000826 24 FC            [12] 2097 	add	a,#0xfc
      000828 F5 81            [12] 2098 	mov	sp,a
      00082A D0 06            [24] 2099 	pop	ar6
      00082C 90r00r0F         [24] 2100 	mov	dptr,#_i2c_EEPROM_Write_data_65536_123
      00082F E0               [24] 2101 	movx	a,@dptr
      000830 F9               [12] 2102 	mov	r1,a
      000831 A3               [24] 2103 	inc	dptr
      000832 E0               [24] 2104 	movx	a,@dptr
      000833 FA               [12] 2105 	mov	r2,a
      000834 89 82            [24] 2106 	mov	dpl,r1
      000836 8A 83            [24] 2107 	mov	dph,r2
      000838 12r00r00         [24] 2108 	lcall	___uint2fs
      00083B A8 82            [24] 2109 	mov	r0,dpl
      00083D A9 83            [24] 2110 	mov	r1,dph
      00083F AA F0            [24] 2111 	mov	r2,b
      000841 FE               [12] 2112 	mov	r6,a
      000842 C0*04            [24] 2113 	push	_i2c_EEPROM_Write_sloc1_1_0
      000844 C0*05            [24] 2114 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 1)
      000846 C0*06            [24] 2115 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 2)
      000848 C0*07            [24] 2116 	push	(_i2c_EEPROM_Write_sloc1_1_0 + 3)
      00084A 88 82            [24] 2117 	mov	dpl,r0
      00084C 89 83            [24] 2118 	mov	dph,r1
      00084E 8A F0            [24] 2119 	mov	b,r2
      000850 EE               [12] 2120 	mov	a,r6
      000851 12r00r00         [24] 2121 	lcall	___fsadd
      000854 AB 82            [24] 2122 	mov	r3,dpl
      000856 AC 83            [24] 2123 	mov	r4,dph
      000858 AD F0            [24] 2124 	mov	r5,b
      00085A FE               [12] 2125 	mov	r6,a
      00085B E5 81            [12] 2126 	mov	a,sp
      00085D 24 FC            [12] 2127 	add	a,#0xfc
      00085F F5 81            [12] 2128 	mov	sp,a
      000861 8B 82            [24] 2129 	mov	dpl,r3
      000863 8C 83            [24] 2130 	mov	dph,r4
      000865 8D F0            [24] 2131 	mov	b,r5
      000867 EE               [12] 2132 	mov	a,r6
      000868 C0 06            [24] 2133 	push	ar6
      00086A 12r00r00         [24] 2134 	lcall	___fs2uint
      00086D E5 82            [12] 2135 	mov	a,dpl
      00086F 85 83 F0         [24] 2136 	mov	b,dph
      000872 D0 06            [24] 2137 	pop	ar6
      000874 D0 07            [24] 2138 	pop	ar7
      000876 90r00r0F         [24] 2139 	mov	dptr,#_i2c_EEPROM_Write_data_65536_123
      000879 F0               [24] 2140 	movx	@dptr,a
      00087A E5 F0            [12] 2141 	mov	a,b
      00087C A3               [24] 2142 	inc	dptr
      00087D F0               [24] 2143 	movx	@dptr,a
                                   2144 ;	i2c.c:331: for(i=0;i<2;i++)
      00087E 0F               [12] 2145 	inc	r7
      00087F BF 02 00         [24] 2146 	cjne	r7,#0x02,00550$
      000882                       2147 00550$:
      000882 D0 06            [24] 2148 	pop	ar6
      000884 50 03            [24] 2149 	jnc	00551$
      000886 02r07r8D         [24] 2150 	ljmp	00212$
      000889                       2151 00551$:
                                   2152 ;	i2c.c:336: i2c_start();            // 1. Master issues START condition
      000889 C0 06            [24] 2153 	push	ar6
      00088B 12r00r05         [24] 2154 	lcall	_i2c_start
                                   2155 ;	i2c.c:337: i2c_Write_Byte(control_byte);
      00088E 85*00 82         [24] 2156 	mov	dpl,_i2c_EEPROM_Write_sloc0_1_0
      000891 12r00rB6         [24] 2157 	lcall	_i2c_Write_Byte
      000894 D0 06            [24] 2158 	pop	ar6
                                   2159 ;	i2c.c:338: i2c_Write_Byte(address_byte); // 4. Master sends memory address
      000896 8E 82            [24] 2160 	mov	dpl,r6
      000898 12r00rB6         [24] 2161 	lcall	_i2c_Write_Byte
                                   2162 ;	i2c.c:339: i2c_Write_Byte(data);        // 6. Master sends data to be written to memory
      00089B 90r00r0F         [24] 2163 	mov	dptr,#_i2c_EEPROM_Write_data_65536_123
      00089E E0               [24] 2164 	movx	a,@dptr
      00089F FE               [12] 2165 	mov	r6,a
      0008A0 A3               [24] 2166 	inc	dptr
      0008A1 E0               [24] 2167 	movx	a,@dptr
      0008A2 8E 82            [24] 2168 	mov	dpl,r6
      0008A4 12r00rB6         [24] 2169 	lcall	_i2c_Write_Byte
                                   2170 ;	i2c.c:340: i2c_stop();             // 8. Master issues STOP condition
                                   2171 ;	i2c.c:341: }
      0008A7 02r00r17         [24] 2172 	ljmp	_i2c_stop
                                   2173 ;------------------------------------------------------------
                                   2174 ;Allocation info for local variables in function 'i2c_EEPROM_Read'
                                   2175 ;------------------------------------------------------------
                                   2176 ;sloc0                     Allocated with name '_i2c_EEPROM_Read_sloc0_1_0'
                                   2177 ;flag                      Allocated with name '_i2c_EEPROM_Read_flag_65536_162'
                                   2178 ;address                   Allocated with name '_i2c_EEPROM_Read_address_65536_162'
                                   2179 ;byte_received             Allocated with name '_i2c_EEPROM_Read_byte_received_65536_162'
                                   2180 ;get_address               Allocated with name '_i2c_EEPROM_Read_get_address_65536_162'
                                   2181 ;get_address_int           Allocated with name '_i2c_EEPROM_Read_get_address_int_65536_162'
                                   2182 ;i                         Allocated with name '_i2c_EEPROM_Read_i_65536_162'
                                   2183 ;control_byte              Allocated with name '_i2c_EEPROM_Read_control_byte_65536_162'
                                   2184 ;address_byte              Allocated with name '_i2c_EEPROM_Read_address_byte_65536_162'
                                   2185 ;write_readbyte            Allocated with name '_i2c_EEPROM_Read_write_readbyte_65536_162'
                                   2186 ;------------------------------------------------------------
                                   2187 ;	i2c.c:348: void i2c_EEPROM_Read()
                                   2188 ;	-----------------------------------------
                                   2189 ;	 function i2c_EEPROM_Read
                                   2190 ;	-----------------------------------------
      0008AA                       2191 _i2c_EEPROM_Read:
                                   2192 ;	i2c.c:350: uint8_t flag=1;
      0008AA 90r00r17         [24] 2193 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      0008AD 74 01            [12] 2194 	mov	a,#0x01
      0008AF F0               [24] 2195 	movx	@dptr,a
                                   2196 ;	i2c.c:351: uint16_t address=0;
      0008B0 90r00r18         [24] 2197 	mov	dptr,#_i2c_EEPROM_Read_address_65536_162
      0008B3 E4               [12] 2198 	clr	a
      0008B4 F0               [24] 2199 	movx	@dptr,a
      0008B5 A3               [24] 2200 	inc	dptr
      0008B6 F0               [24] 2201 	movx	@dptr,a
                                   2202 ;	i2c.c:361: while(flag)
      0008B7                       2203 00150$:
      0008B7 90r00r17         [24] 2204 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      0008BA E0               [24] 2205 	movx	a,@dptr
      0008BB 70 03            [24] 2206 	jnz	00289$
      0008BD 02r0Br52         [24] 2207 	ljmp	00191$
      0008C0                       2208 00289$:
                                   2209 ;	i2c.c:363: flag=0;
      0008C0 90r00r17         [24] 2210 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      0008C3 E4               [12] 2211 	clr	a
      0008C4 F0               [24] 2212 	movx	@dptr,a
                                   2213 ;	i2c.c:364: printf_tiny("\n\rEnter the address between 0x00-0x7ff\n\r");
      0008C5 74r00            [12] 2214 	mov	a,#___str_0
      0008C7 C0 E0            [24] 2215 	push	acc
      0008C9 74s00            [12] 2216 	mov	a,#(___str_0 >> 8)
      0008CB C0 E0            [24] 2217 	push	acc
      0008CD 12r00r00         [24] 2218 	lcall	_printf_tiny
      0008D0 15 81            [12] 2219 	dec	sp
      0008D2 15 81            [12] 2220 	dec	sp
                                   2221 ;	i2c.c:365: for(i=0;i<3;i++)
      0008D4 7F 00            [12] 2222 	mov	r7,#0x00
      0008D6                       2223 00154$:
                                   2224 ;	i2c.c:367: get_address[i]=getchar();
      0008D6 EF               [12] 2225 	mov	a,r7
      0008D7 24r1A            [12] 2226 	add	a,#_i2c_EEPROM_Read_get_address_65536_162
      0008D9 FD               [12] 2227 	mov	r5,a
      0008DA E4               [12] 2228 	clr	a
      0008DB 34s00            [12] 2229 	addc	a,#(_i2c_EEPROM_Read_get_address_65536_162 >> 8)
      0008DD FE               [12] 2230 	mov	r6,a
      0008DE C0 07            [24] 2231 	push	ar7
      0008E0 C0 06            [24] 2232 	push	ar6
      0008E2 C0 05            [24] 2233 	push	ar5
      0008E4 12r00r00         [24] 2234 	lcall	_getchar
      0008E7 AB 82            [24] 2235 	mov	r3,dpl
      0008E9 D0 05            [24] 2236 	pop	ar5
      0008EB D0 06            [24] 2237 	pop	ar6
      0008ED 8D 82            [24] 2238 	mov	dpl,r5
      0008EF 8E 83            [24] 2239 	mov	dph,r6
      0008F1 EB               [12] 2240 	mov	a,r3
      0008F2 F0               [24] 2241 	movx	@dptr,a
                                   2242 ;	i2c.c:368: putchar(get_address[i]);
      0008F3 7E 00            [12] 2243 	mov	r6,#0x00
      0008F5 8B 82            [24] 2244 	mov	dpl,r3
      0008F7 8E 83            [24] 2245 	mov	dph,r6
      0008F9 12r00r00         [24] 2246 	lcall	_putchar
      0008FC D0 07            [24] 2247 	pop	ar7
                                   2248 ;	i2c.c:365: for(i=0;i<3;i++)
      0008FE 0F               [12] 2249 	inc	r7
      0008FF BF 03 00         [24] 2250 	cjne	r7,#0x03,00290$
      000902                       2251 00290$:
      000902 40 D2            [24] 2252 	jc	00154$
                                   2253 ;	i2c.c:371: for(i=0;i<3;i++)
      000904 7F 00            [12] 2254 	mov	r7,#0x00
      000906                       2255 00156$:
                                   2256 ;	i2c.c:373: switch(i)
      000906 BF 00 02         [24] 2257 	cjne	r7,#0x00,00292$
      000909 80 0E            [24] 2258 	sjmp	00102$
      00090B                       2259 00292$:
      00090B BF 01 02         [24] 2260 	cjne	r7,#0x01,00293$
      00090E 80 5C            [24] 2261 	sjmp	00107$
      000910                       2262 00293$:
      000910 BF 02 03         [24] 2263 	cjne	r7,#0x02,00294$
      000913 02r0Ar5F         [24] 2264 	ljmp	00127$
      000916                       2265 00294$:
      000916 02r0Br46         [24] 2266 	ljmp	00157$
                                   2267 ;	i2c.c:375: case 0:
      000919                       2268 00102$:
                                   2269 ;	i2c.c:376: if((get_address[i]>=48) && (get_address[i]<=55))
      000919 EF               [12] 2270 	mov	a,r7
      00091A 24r1A            [12] 2271 	add	a,#_i2c_EEPROM_Read_get_address_65536_162
      00091C F5 82            [12] 2272 	mov	dpl,a
      00091E E4               [12] 2273 	clr	a
      00091F 34s00            [12] 2274 	addc	a,#(_i2c_EEPROM_Read_get_address_65536_162 >> 8)
      000921 F5 83            [12] 2275 	mov	dph,a
      000923 E0               [24] 2276 	movx	a,@dptr
      000924 FE               [12] 2277 	mov	r6,a
      000925 BE 30 00         [24] 2278 	cjne	r6,#0x30,00295$
      000928                       2279 00295$:
      000928 40 26            [24] 2280 	jc	00104$
      00092A EE               [12] 2281 	mov	a,r6
      00092B 24 C8            [12] 2282 	add	a,#0xff - 0x37
      00092D 40 21            [24] 2283 	jc	00104$
                                   2284 ;	i2c.c:378: get_address_int[i]= get_address[i]-48;
      00092F EF               [12] 2285 	mov	a,r7
      000930 75 F0 02         [24] 2286 	mov	b,#0x02
      000933 A4               [48] 2287 	mul	ab
      000934 24r1D            [12] 2288 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000936 F5 82            [12] 2289 	mov	dpl,a
      000938 74s00            [12] 2290 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      00093A 35 F0            [12] 2291 	addc	a,b
      00093C F5 83            [12] 2292 	mov	dph,a
      00093E 7D 00            [12] 2293 	mov	r5,#0x00
      000940 EE               [12] 2294 	mov	a,r6
      000941 24 D0            [12] 2295 	add	a,#0xd0
      000943 FE               [12] 2296 	mov	r6,a
      000944 ED               [12] 2297 	mov	a,r5
      000945 34 FF            [12] 2298 	addc	a,#0xff
      000947 FD               [12] 2299 	mov	r5,a
      000948 EE               [12] 2300 	mov	a,r6
      000949 F0               [24] 2301 	movx	@dptr,a
      00094A ED               [12] 2302 	mov	a,r5
      00094B A3               [24] 2303 	inc	dptr
      00094C F0               [24] 2304 	movx	@dptr,a
      00094D 02r0Br46         [24] 2305 	ljmp	00157$
      000950                       2306 00104$:
                                   2307 ;	i2c.c:382: printf_tiny("\n\rInvalid Input! Please enter again\n\r");
      000950 C0 07            [24] 2308 	push	ar7
      000952 74rA8            [12] 2309 	mov	a,#___str_3
      000954 C0 E0            [24] 2310 	push	acc
      000956 74s00            [12] 2311 	mov	a,#(___str_3 >> 8)
      000958 C0 E0            [24] 2312 	push	acc
      00095A 12r00r00         [24] 2313 	lcall	_printf_tiny
      00095D 15 81            [12] 2314 	dec	sp
      00095F 15 81            [12] 2315 	dec	sp
      000961 D0 07            [24] 2316 	pop	ar7
                                   2317 ;	i2c.c:383: flag=1;
      000963 90r00r17         [24] 2318 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      000966 74 01            [12] 2319 	mov	a,#0x01
      000968 F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	i2c.c:385: break;
      000969 02r0Br46         [24] 2322 	ljmp	00157$
                                   2323 ;	i2c.c:387: case 1:
      00096C                       2324 00107$:
                                   2325 ;	i2c.c:388: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      00096C EF               [12] 2326 	mov	a,r7
      00096D 24r1A            [12] 2327 	add	a,#_i2c_EEPROM_Read_get_address_65536_162
      00096F FD               [12] 2328 	mov	r5,a
      000970 E4               [12] 2329 	clr	a
      000971 34s00            [12] 2330 	addc	a,#(_i2c_EEPROM_Read_get_address_65536_162 >> 8)
      000973 FE               [12] 2331 	mov	r6,a
      000974 8D 82            [24] 2332 	mov	dpl,r5
      000976 8E 83            [24] 2333 	mov	dph,r6
      000978 E0               [24] 2334 	movx	a,@dptr
      000979 FC               [12] 2335 	mov	r4,a
      00097A BC 30 00         [24] 2336 	cjne	r4,#0x30,00298$
      00097D                       2337 00298$:
      00097D 40 05            [24] 2338 	jc	00124$
      00097F EC               [12] 2339 	mov	a,r4
      000980 24 C6            [12] 2340 	add	a,#0xff - 0x39
      000982 50 26            [24] 2341 	jnc	00119$
      000984                       2342 00124$:
      000984 8D 82            [24] 2343 	mov	dpl,r5
      000986 8E 83            [24] 2344 	mov	dph,r6
      000988 E0               [24] 2345 	movx	a,@dptr
      000989 FC               [12] 2346 	mov	r4,a
      00098A BC 41 00         [24] 2347 	cjne	r4,#0x41,00301$
      00098D                       2348 00301$:
      00098D 40 05            [24] 2349 	jc	00126$
      00098F EC               [12] 2350 	mov	a,r4
      000990 24 B9            [12] 2351 	add	a,#0xff - 0x46
      000992 50 16            [24] 2352 	jnc	00119$
      000994                       2353 00126$:
      000994 8D 82            [24] 2354 	mov	dpl,r5
      000996 8E 83            [24] 2355 	mov	dph,r6
      000998 E0               [24] 2356 	movx	a,@dptr
      000999 FC               [12] 2357 	mov	r4,a
      00099A BC 61 00         [24] 2358 	cjne	r4,#0x61,00304$
      00099D                       2359 00304$:
      00099D 50 03            [24] 2360 	jnc	00305$
      00099F 02r0Ar43         [24] 2361 	ljmp	00120$
      0009A2                       2362 00305$:
      0009A2 EC               [12] 2363 	mov	a,r4
      0009A3 24 99            [12] 2364 	add	a,#0xff - 0x66
      0009A5 50 03            [24] 2365 	jnc	00306$
      0009A7 02r0Ar43         [24] 2366 	ljmp	00120$
      0009AA                       2367 00306$:
      0009AA                       2368 00119$:
                                   2369 ;	i2c.c:390: if((get_address[i]>=48) && (get_address[i]<=57))
      0009AA 8D 82            [24] 2370 	mov	dpl,r5
      0009AC 8E 83            [24] 2371 	mov	dph,r6
      0009AE E0               [24] 2372 	movx	a,@dptr
      0009AF FC               [12] 2373 	mov	r4,a
      0009B0 BC 30 00         [24] 2374 	cjne	r4,#0x30,00307$
      0009B3                       2375 00307$:
      0009B3 40 26            [24] 2376 	jc	00116$
      0009B5 EC               [12] 2377 	mov	a,r4
      0009B6 24 C6            [12] 2378 	add	a,#0xff - 0x39
      0009B8 40 21            [24] 2379 	jc	00116$
                                   2380 ;	i2c.c:392: get_address_int[i]=get_address[i]-48;
      0009BA EF               [12] 2381 	mov	a,r7
      0009BB 75 F0 02         [24] 2382 	mov	b,#0x02
      0009BE A4               [48] 2383 	mul	ab
      0009BF 24r1D            [12] 2384 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      0009C1 F5 82            [12] 2385 	mov	dpl,a
      0009C3 74s00            [12] 2386 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      0009C5 35 F0            [12] 2387 	addc	a,b
      0009C7 F5 83            [12] 2388 	mov	dph,a
      0009C9 7B 00            [12] 2389 	mov	r3,#0x00
      0009CB EC               [12] 2390 	mov	a,r4
      0009CC 24 D0            [12] 2391 	add	a,#0xd0
      0009CE FC               [12] 2392 	mov	r4,a
      0009CF EB               [12] 2393 	mov	a,r3
      0009D0 34 FF            [12] 2394 	addc	a,#0xff
      0009D2 FB               [12] 2395 	mov	r3,a
      0009D3 EC               [12] 2396 	mov	a,r4
      0009D4 F0               [24] 2397 	movx	@dptr,a
      0009D5 EB               [12] 2398 	mov	a,r3
      0009D6 A3               [24] 2399 	inc	dptr
      0009D7 F0               [24] 2400 	movx	@dptr,a
      0009D8 02r0Br46         [24] 2401 	ljmp	00157$
      0009DB                       2402 00116$:
                                   2403 ;	i2c.c:394: else if((get_address[i]>=65) && (get_address[i]<=70))
      0009DB 8D 82            [24] 2404 	mov	dpl,r5
      0009DD 8E 83            [24] 2405 	mov	dph,r6
      0009DF E0               [24] 2406 	movx	a,@dptr
      0009E0 FC               [12] 2407 	mov	r4,a
      0009E1 BC 41 00         [24] 2408 	cjne	r4,#0x41,00310$
      0009E4                       2409 00310$:
      0009E4 40 26            [24] 2410 	jc	00112$
      0009E6 EC               [12] 2411 	mov	a,r4
      0009E7 24 B9            [12] 2412 	add	a,#0xff - 0x46
      0009E9 40 21            [24] 2413 	jc	00112$
                                   2414 ;	i2c.c:396: get_address_int[i]=get_address[i]-55;
      0009EB EF               [12] 2415 	mov	a,r7
      0009EC 75 F0 02         [24] 2416 	mov	b,#0x02
      0009EF A4               [48] 2417 	mul	ab
      0009F0 24r1D            [12] 2418 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      0009F2 F5 82            [12] 2419 	mov	dpl,a
      0009F4 74s00            [12] 2420 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      0009F6 35 F0            [12] 2421 	addc	a,b
      0009F8 F5 83            [12] 2422 	mov	dph,a
      0009FA 7B 00            [12] 2423 	mov	r3,#0x00
      0009FC EC               [12] 2424 	mov	a,r4
      0009FD 24 C9            [12] 2425 	add	a,#0xc9
      0009FF FC               [12] 2426 	mov	r4,a
      000A00 EB               [12] 2427 	mov	a,r3
      000A01 34 FF            [12] 2428 	addc	a,#0xff
      000A03 FB               [12] 2429 	mov	r3,a
      000A04 EC               [12] 2430 	mov	a,r4
      000A05 F0               [24] 2431 	movx	@dptr,a
      000A06 EB               [12] 2432 	mov	a,r3
      000A07 A3               [24] 2433 	inc	dptr
      000A08 F0               [24] 2434 	movx	@dptr,a
      000A09 02r0Br46         [24] 2435 	ljmp	00157$
      000A0C                       2436 00112$:
                                   2437 ;	i2c.c:398: else if((get_address[i]>=97) && (get_address[i]<=102))
      000A0C 8D 82            [24] 2438 	mov	dpl,r5
      000A0E 8E 83            [24] 2439 	mov	dph,r6
      000A10 E0               [24] 2440 	movx	a,@dptr
      000A11 FE               [12] 2441 	mov	r6,a
      000A12 BE 61 00         [24] 2442 	cjne	r6,#0x61,00313$
      000A15                       2443 00313$:
      000A15 50 03            [24] 2444 	jnc	00314$
      000A17 02r0Br46         [24] 2445 	ljmp	00157$
      000A1A                       2446 00314$:
      000A1A EE               [12] 2447 	mov	a,r6
      000A1B 24 99            [12] 2448 	add	a,#0xff - 0x66
      000A1D 50 03            [24] 2449 	jnc	00315$
      000A1F 02r0Br46         [24] 2450 	ljmp	00157$
      000A22                       2451 00315$:
                                   2452 ;	i2c.c:400: get_address_int[i]=get_address[i]-87;
      000A22 EF               [12] 2453 	mov	a,r7
      000A23 75 F0 02         [24] 2454 	mov	b,#0x02
      000A26 A4               [48] 2455 	mul	ab
      000A27 24r1D            [12] 2456 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000A29 F5 82            [12] 2457 	mov	dpl,a
      000A2B 74s00            [12] 2458 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      000A2D 35 F0            [12] 2459 	addc	a,b
      000A2F F5 83            [12] 2460 	mov	dph,a
      000A31 7D 00            [12] 2461 	mov	r5,#0x00
      000A33 EE               [12] 2462 	mov	a,r6
      000A34 24 A9            [12] 2463 	add	a,#0xa9
      000A36 FE               [12] 2464 	mov	r6,a
      000A37 ED               [12] 2465 	mov	a,r5
      000A38 34 FF            [12] 2466 	addc	a,#0xff
      000A3A FD               [12] 2467 	mov	r5,a
      000A3B EE               [12] 2468 	mov	a,r6
      000A3C F0               [24] 2469 	movx	@dptr,a
      000A3D ED               [12] 2470 	mov	a,r5
      000A3E A3               [24] 2471 	inc	dptr
      000A3F F0               [24] 2472 	movx	@dptr,a
      000A40 02r0Br46         [24] 2473 	ljmp	00157$
      000A43                       2474 00120$:
                                   2475 ;	i2c.c:405: printf_tiny("\n\rInvalid Input! Please enter again\n\r");
      000A43 C0 07            [24] 2476 	push	ar7
      000A45 74rA8            [12] 2477 	mov	a,#___str_3
      000A47 C0 E0            [24] 2478 	push	acc
      000A49 74s00            [12] 2479 	mov	a,#(___str_3 >> 8)
      000A4B C0 E0            [24] 2480 	push	acc
      000A4D 12r00r00         [24] 2481 	lcall	_printf_tiny
      000A50 15 81            [12] 2482 	dec	sp
      000A52 15 81            [12] 2483 	dec	sp
      000A54 D0 07            [24] 2484 	pop	ar7
                                   2485 ;	i2c.c:406: flag=1;
      000A56 90r00r17         [24] 2486 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      000A59 74 01            [12] 2487 	mov	a,#0x01
      000A5B F0               [24] 2488 	movx	@dptr,a
                                   2489 ;	i2c.c:408: break;
      000A5C 02r0Br46         [24] 2490 	ljmp	00157$
                                   2491 ;	i2c.c:410: case 2:
      000A5F                       2492 00127$:
                                   2493 ;	i2c.c:411: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      000A5F EF               [12] 2494 	mov	a,r7
      000A60 24r1A            [12] 2495 	add	a,#_i2c_EEPROM_Read_get_address_65536_162
      000A62 FD               [12] 2496 	mov	r5,a
      000A63 E4               [12] 2497 	clr	a
      000A64 34s00            [12] 2498 	addc	a,#(_i2c_EEPROM_Read_get_address_65536_162 >> 8)
      000A66 FE               [12] 2499 	mov	r6,a
      000A67 8D 82            [24] 2500 	mov	dpl,r5
      000A69 8E 83            [24] 2501 	mov	dph,r6
      000A6B E0               [24] 2502 	movx	a,@dptr
      000A6C FC               [12] 2503 	mov	r4,a
      000A6D BC 30 00         [24] 2504 	cjne	r4,#0x30,00316$
      000A70                       2505 00316$:
      000A70 40 05            [24] 2506 	jc	00144$
      000A72 EC               [12] 2507 	mov	a,r4
      000A73 24 C6            [12] 2508 	add	a,#0xff - 0x39
      000A75 50 26            [24] 2509 	jnc	00139$
      000A77                       2510 00144$:
      000A77 8D 82            [24] 2511 	mov	dpl,r5
      000A79 8E 83            [24] 2512 	mov	dph,r6
      000A7B E0               [24] 2513 	movx	a,@dptr
      000A7C FC               [12] 2514 	mov	r4,a
      000A7D BC 41 00         [24] 2515 	cjne	r4,#0x41,00319$
      000A80                       2516 00319$:
      000A80 40 05            [24] 2517 	jc	00146$
      000A82 EC               [12] 2518 	mov	a,r4
      000A83 24 B9            [12] 2519 	add	a,#0xff - 0x46
      000A85 50 16            [24] 2520 	jnc	00139$
      000A87                       2521 00146$:
      000A87 8D 82            [24] 2522 	mov	dpl,r5
      000A89 8E 83            [24] 2523 	mov	dph,r6
      000A8B E0               [24] 2524 	movx	a,@dptr
      000A8C FC               [12] 2525 	mov	r4,a
      000A8D BC 61 00         [24] 2526 	cjne	r4,#0x61,00322$
      000A90                       2527 00322$:
      000A90 50 03            [24] 2528 	jnc	00323$
      000A92 02r0Br2D         [24] 2529 	ljmp	00140$
      000A95                       2530 00323$:
      000A95 EC               [12] 2531 	mov	a,r4
      000A96 24 99            [12] 2532 	add	a,#0xff - 0x66
      000A98 50 03            [24] 2533 	jnc	00324$
      000A9A 02r0Br2D         [24] 2534 	ljmp	00140$
      000A9D                       2535 00324$:
      000A9D                       2536 00139$:
                                   2537 ;	i2c.c:413: if((get_address[i]>=48) && (get_address[i]<=57))
      000A9D 8D 82            [24] 2538 	mov	dpl,r5
      000A9F 8E 83            [24] 2539 	mov	dph,r6
      000AA1 E0               [24] 2540 	movx	a,@dptr
      000AA2 FC               [12] 2541 	mov	r4,a
      000AA3 BC 30 00         [24] 2542 	cjne	r4,#0x30,00325$
      000AA6                       2543 00325$:
      000AA6 40 25            [24] 2544 	jc	00136$
      000AA8 EC               [12] 2545 	mov	a,r4
      000AA9 24 C6            [12] 2546 	add	a,#0xff - 0x39
      000AAB 40 20            [24] 2547 	jc	00136$
                                   2548 ;	i2c.c:415: get_address_int[i]=get_address[i]-48;
      000AAD EF               [12] 2549 	mov	a,r7
      000AAE 75 F0 02         [24] 2550 	mov	b,#0x02
      000AB1 A4               [48] 2551 	mul	ab
      000AB2 24r1D            [12] 2552 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000AB4 F5 82            [12] 2553 	mov	dpl,a
      000AB6 74s00            [12] 2554 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      000AB8 35 F0            [12] 2555 	addc	a,b
      000ABA F5 83            [12] 2556 	mov	dph,a
      000ABC 7B 00            [12] 2557 	mov	r3,#0x00
      000ABE EC               [12] 2558 	mov	a,r4
      000ABF 24 D0            [12] 2559 	add	a,#0xd0
      000AC1 FC               [12] 2560 	mov	r4,a
      000AC2 EB               [12] 2561 	mov	a,r3
      000AC3 34 FF            [12] 2562 	addc	a,#0xff
      000AC5 FB               [12] 2563 	mov	r3,a
      000AC6 EC               [12] 2564 	mov	a,r4
      000AC7 F0               [24] 2565 	movx	@dptr,a
      000AC8 EB               [12] 2566 	mov	a,r3
      000AC9 A3               [24] 2567 	inc	dptr
      000ACA F0               [24] 2568 	movx	@dptr,a
      000ACB 80 79            [24] 2569 	sjmp	00157$
      000ACD                       2570 00136$:
                                   2571 ;	i2c.c:417: else if((get_address[i]>=65) && (get_address[i]<=70))
      000ACD 8D 82            [24] 2572 	mov	dpl,r5
      000ACF 8E 83            [24] 2573 	mov	dph,r6
      000AD1 E0               [24] 2574 	movx	a,@dptr
      000AD2 FC               [12] 2575 	mov	r4,a
      000AD3 BC 41 00         [24] 2576 	cjne	r4,#0x41,00328$
      000AD6                       2577 00328$:
      000AD6 40 25            [24] 2578 	jc	00132$
      000AD8 EC               [12] 2579 	mov	a,r4
      000AD9 24 B9            [12] 2580 	add	a,#0xff - 0x46
      000ADB 40 20            [24] 2581 	jc	00132$
                                   2582 ;	i2c.c:419: get_address_int[i]=get_address[i]-55;
      000ADD EF               [12] 2583 	mov	a,r7
      000ADE 75 F0 02         [24] 2584 	mov	b,#0x02
      000AE1 A4               [48] 2585 	mul	ab
      000AE2 24r1D            [12] 2586 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000AE4 F5 82            [12] 2587 	mov	dpl,a
      000AE6 74s00            [12] 2588 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      000AE8 35 F0            [12] 2589 	addc	a,b
      000AEA F5 83            [12] 2590 	mov	dph,a
      000AEC 7B 00            [12] 2591 	mov	r3,#0x00
      000AEE EC               [12] 2592 	mov	a,r4
      000AEF 24 C9            [12] 2593 	add	a,#0xc9
      000AF1 FC               [12] 2594 	mov	r4,a
      000AF2 EB               [12] 2595 	mov	a,r3
      000AF3 34 FF            [12] 2596 	addc	a,#0xff
      000AF5 FB               [12] 2597 	mov	r3,a
      000AF6 EC               [12] 2598 	mov	a,r4
      000AF7 F0               [24] 2599 	movx	@dptr,a
      000AF8 EB               [12] 2600 	mov	a,r3
      000AF9 A3               [24] 2601 	inc	dptr
      000AFA F0               [24] 2602 	movx	@dptr,a
      000AFB 80 49            [24] 2603 	sjmp	00157$
      000AFD                       2604 00132$:
                                   2605 ;	i2c.c:421: else if((get_address[i]>=97) && (get_address[i]<=102))
      000AFD 8D 82            [24] 2606 	mov	dpl,r5
      000AFF 8E 83            [24] 2607 	mov	dph,r6
      000B01 E0               [24] 2608 	movx	a,@dptr
      000B02 FE               [12] 2609 	mov	r6,a
      000B03 BE 61 00         [24] 2610 	cjne	r6,#0x61,00331$
      000B06                       2611 00331$:
      000B06 40 3E            [24] 2612 	jc	00157$
      000B08 EE               [12] 2613 	mov	a,r6
      000B09 24 99            [12] 2614 	add	a,#0xff - 0x66
      000B0B 40 39            [24] 2615 	jc	00157$
                                   2616 ;	i2c.c:423: get_address_int[i]=get_address[i]-87;
      000B0D EF               [12] 2617 	mov	a,r7
      000B0E 75 F0 02         [24] 2618 	mov	b,#0x02
      000B11 A4               [48] 2619 	mul	ab
      000B12 24r1D            [12] 2620 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000B14 F5 82            [12] 2621 	mov	dpl,a
      000B16 74s00            [12] 2622 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      000B18 35 F0            [12] 2623 	addc	a,b
      000B1A F5 83            [12] 2624 	mov	dph,a
      000B1C 7D 00            [12] 2625 	mov	r5,#0x00
      000B1E EE               [12] 2626 	mov	a,r6
      000B1F 24 A9            [12] 2627 	add	a,#0xa9
      000B21 FE               [12] 2628 	mov	r6,a
      000B22 ED               [12] 2629 	mov	a,r5
      000B23 34 FF            [12] 2630 	addc	a,#0xff
      000B25 FD               [12] 2631 	mov	r5,a
      000B26 EE               [12] 2632 	mov	a,r6
      000B27 F0               [24] 2633 	movx	@dptr,a
      000B28 ED               [12] 2634 	mov	a,r5
      000B29 A3               [24] 2635 	inc	dptr
      000B2A F0               [24] 2636 	movx	@dptr,a
      000B2B 80 19            [24] 2637 	sjmp	00157$
      000B2D                       2638 00140$:
                                   2639 ;	i2c.c:428: printf_tiny("\n\rInvalid Input! Please enter again\n\r");
      000B2D C0 07            [24] 2640 	push	ar7
      000B2F 74rA8            [12] 2641 	mov	a,#___str_3
      000B31 C0 E0            [24] 2642 	push	acc
      000B33 74s00            [12] 2643 	mov	a,#(___str_3 >> 8)
      000B35 C0 E0            [24] 2644 	push	acc
      000B37 12r00r00         [24] 2645 	lcall	_printf_tiny
      000B3A 15 81            [12] 2646 	dec	sp
      000B3C 15 81            [12] 2647 	dec	sp
      000B3E D0 07            [24] 2648 	pop	ar7
                                   2649 ;	i2c.c:429: flag=1;
      000B40 90r00r17         [24] 2650 	mov	dptr,#_i2c_EEPROM_Read_flag_65536_162
      000B43 74 01            [12] 2651 	mov	a,#0x01
      000B45 F0               [24] 2652 	movx	@dptr,a
                                   2653 ;	i2c.c:434: }
      000B46                       2654 00157$:
                                   2655 ;	i2c.c:371: for(i=0;i<3;i++)
      000B46 0F               [12] 2656 	inc	r7
      000B47 BF 03 00         [24] 2657 	cjne	r7,#0x03,00334$
      000B4A                       2658 00334$:
      000B4A 50 03            [24] 2659 	jnc	00335$
      000B4C 02r09r06         [24] 2660 	ljmp	00156$
      000B4F                       2661 00335$:
      000B4F 02r08rB7         [24] 2662 	ljmp	00150$
                                   2663 ;	i2c.c:439: for(i=0;i<3;i++)
      000B52                       2664 00191$:
      000B52 7F 00            [12] 2665 	mov	r7,#0x00
      000B54                       2666 00158$:
                                   2667 ;	i2c.c:441: address = address+((get_address_int[i])*powf(16,2-i));
      000B54 EF               [12] 2668 	mov	a,r7
      000B55 75 F0 02         [24] 2669 	mov	b,#0x02
      000B58 A4               [48] 2670 	mul	ab
      000B59 24r1D            [12] 2671 	add	a,#_i2c_EEPROM_Read_get_address_int_65536_162
      000B5B F5 82            [12] 2672 	mov	dpl,a
      000B5D 74s00            [12] 2673 	mov	a,#(_i2c_EEPROM_Read_get_address_int_65536_162 >> 8)
      000B5F 35 F0            [12] 2674 	addc	a,b
      000B61 F5 83            [12] 2675 	mov	dph,a
      000B63 E0               [24] 2676 	movx	a,@dptr
      000B64 FD               [12] 2677 	mov	r5,a
      000B65 A3               [24] 2678 	inc	dptr
      000B66 E0               [24] 2679 	movx	a,@dptr
      000B67 FE               [12] 2680 	mov	r6,a
      000B68 8F 03            [24] 2681 	mov	ar3,r7
      000B6A 7C 00            [12] 2682 	mov	r4,#0x00
      000B6C 74 02            [12] 2683 	mov	a,#0x02
      000B6E C3               [12] 2684 	clr	c
      000B6F 9B               [12] 2685 	subb	a,r3
      000B70 FB               [12] 2686 	mov	r3,a
      000B71 E4               [12] 2687 	clr	a
      000B72 9C               [12] 2688 	subb	a,r4
      000B73 FC               [12] 2689 	mov	r4,a
      000B74 8B 82            [24] 2690 	mov	dpl,r3
      000B76 8C 83            [24] 2691 	mov	dph,r4
      000B78 C0 07            [24] 2692 	push	ar7
      000B7A C0 06            [24] 2693 	push	ar6
      000B7C C0 05            [24] 2694 	push	ar5
      000B7E 12r00r00         [24] 2695 	lcall	___sint2fs
      000B81 A9 82            [24] 2696 	mov	r1,dpl
      000B83 AA 83            [24] 2697 	mov	r2,dph
      000B85 AB F0            [24] 2698 	mov	r3,b
      000B87 FC               [12] 2699 	mov	r4,a
      000B88 90r00r00         [24] 2700 	mov	dptr,#_powf_PARM_2
      000B8B E9               [12] 2701 	mov	a,r1
      000B8C F0               [24] 2702 	movx	@dptr,a
      000B8D EA               [12] 2703 	mov	a,r2
      000B8E A3               [24] 2704 	inc	dptr
      000B8F F0               [24] 2705 	movx	@dptr,a
      000B90 EB               [12] 2706 	mov	a,r3
      000B91 A3               [24] 2707 	inc	dptr
      000B92 F0               [24] 2708 	movx	@dptr,a
      000B93 EC               [12] 2709 	mov	a,r4
      000B94 A3               [24] 2710 	inc	dptr
      000B95 F0               [24] 2711 	movx	@dptr,a
      000B96 90 00 00         [24] 2712 	mov	dptr,#0x0000
      000B99 75 F0 80         [24] 2713 	mov	b,#0x80
      000B9C 74 41            [12] 2714 	mov	a,#0x41
      000B9E 12r00r00         [24] 2715 	lcall	_powf
      000BA1 85 82*08         [24] 2716 	mov	_i2c_EEPROM_Read_sloc0_1_0,dpl
      000BA4 85 83*09         [24] 2717 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 1),dph
      000BA7 85 F0*0A         [24] 2718 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 2),b
      000BAA F5*0B            [12] 2719 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 3),a
      000BAC D0 05            [24] 2720 	pop	ar5
      000BAE D0 06            [24] 2721 	pop	ar6
      000BB0 8D 82            [24] 2722 	mov	dpl,r5
      000BB2 8E 83            [24] 2723 	mov	dph,r6
      000BB4 12r00r00         [24] 2724 	lcall	___uint2fs
      000BB7 A8 82            [24] 2725 	mov	r0,dpl
      000BB9 AC 83            [24] 2726 	mov	r4,dph
      000BBB AD F0            [24] 2727 	mov	r5,b
      000BBD FE               [12] 2728 	mov	r6,a
      000BBE C0*08            [24] 2729 	push	_i2c_EEPROM_Read_sloc0_1_0
      000BC0 C0*09            [24] 2730 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 1)
      000BC2 C0*0A            [24] 2731 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 2)
      000BC4 C0*0B            [24] 2732 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 3)
      000BC6 88 82            [24] 2733 	mov	dpl,r0
      000BC8 8C 83            [24] 2734 	mov	dph,r4
      000BCA 8D F0            [24] 2735 	mov	b,r5
      000BCC EE               [12] 2736 	mov	a,r6
      000BCD 12r00r00         [24] 2737 	lcall	___fsmul
      000BD0 85 82*08         [24] 2738 	mov	_i2c_EEPROM_Read_sloc0_1_0,dpl
      000BD3 85 83*09         [24] 2739 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 1),dph
      000BD6 85 F0*0A         [24] 2740 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 2),b
      000BD9 F5*0B            [12] 2741 	mov	(_i2c_EEPROM_Read_sloc0_1_0 + 3),a
      000BDB E5 81            [12] 2742 	mov	a,sp
      000BDD 24 FC            [12] 2743 	add	a,#0xfc
      000BDF F5 81            [12] 2744 	mov	sp,a
      000BE1 90r00r18         [24] 2745 	mov	dptr,#_i2c_EEPROM_Read_address_65536_162
      000BE4 E0               [24] 2746 	movx	a,@dptr
      000BE5 F9               [12] 2747 	mov	r1,a
      000BE6 A3               [24] 2748 	inc	dptr
      000BE7 E0               [24] 2749 	movx	a,@dptr
      000BE8 FA               [12] 2750 	mov	r2,a
      000BE9 89 82            [24] 2751 	mov	dpl,r1
      000BEB 8A 83            [24] 2752 	mov	dph,r2
      000BED 12r00r00         [24] 2753 	lcall	___uint2fs
      000BF0 A8 82            [24] 2754 	mov	r0,dpl
      000BF2 A9 83            [24] 2755 	mov	r1,dph
      000BF4 AA F0            [24] 2756 	mov	r2,b
      000BF6 FE               [12] 2757 	mov	r6,a
      000BF7 C0*08            [24] 2758 	push	_i2c_EEPROM_Read_sloc0_1_0
      000BF9 C0*09            [24] 2759 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 1)
      000BFB C0*0A            [24] 2760 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 2)
      000BFD C0*0B            [24] 2761 	push	(_i2c_EEPROM_Read_sloc0_1_0 + 3)
      000BFF 88 82            [24] 2762 	mov	dpl,r0
      000C01 89 83            [24] 2763 	mov	dph,r1
      000C03 8A F0            [24] 2764 	mov	b,r2
      000C05 EE               [12] 2765 	mov	a,r6
      000C06 12r00r00         [24] 2766 	lcall	___fsadd
      000C09 AB 82            [24] 2767 	mov	r3,dpl
      000C0B AC 83            [24] 2768 	mov	r4,dph
      000C0D AD F0            [24] 2769 	mov	r5,b
      000C0F FE               [12] 2770 	mov	r6,a
      000C10 E5 81            [12] 2771 	mov	a,sp
      000C12 24 FC            [12] 2772 	add	a,#0xfc
      000C14 F5 81            [12] 2773 	mov	sp,a
      000C16 8B 82            [24] 2774 	mov	dpl,r3
      000C18 8C 83            [24] 2775 	mov	dph,r4
      000C1A 8D F0            [24] 2776 	mov	b,r5
      000C1C EE               [12] 2777 	mov	a,r6
      000C1D 12r00r00         [24] 2778 	lcall	___fs2uint
      000C20 E5 82            [12] 2779 	mov	a,dpl
      000C22 85 83 F0         [24] 2780 	mov	b,dph
      000C25 D0 07            [24] 2781 	pop	ar7
      000C27 90r00r18         [24] 2782 	mov	dptr,#_i2c_EEPROM_Read_address_65536_162
      000C2A F0               [24] 2783 	movx	@dptr,a
      000C2B E5 F0            [12] 2784 	mov	a,b
      000C2D A3               [24] 2785 	inc	dptr
      000C2E F0               [24] 2786 	movx	@dptr,a
                                   2787 ;	i2c.c:439: for(i=0;i<3;i++)
      000C2F 0F               [12] 2788 	inc	r7
      000C30 BF 03 00         [24] 2789 	cjne	r7,#0x03,00336$
      000C33                       2790 00336$:
      000C33 50 03            [24] 2791 	jnc	00337$
      000C35 02r0Br54         [24] 2792 	ljmp	00158$
      000C38                       2793 00337$:
                                   2794 ;	i2c.c:444: control_byte = ((0xA0)|(address >> 7)&(0xfe));
      000C38 90r00r18         [24] 2795 	mov	dptr,#_i2c_EEPROM_Read_address_65536_162
      000C3B E0               [24] 2796 	movx	a,@dptr
      000C3C FE               [12] 2797 	mov	r6,a
      000C3D A3               [24] 2798 	inc	dptr
      000C3E E0               [24] 2799 	movx	a,@dptr
      000C3F 8E 04            [24] 2800 	mov	ar4,r6
      000C41 A2 E7            [12] 2801 	mov	c,acc.7
      000C43 CC               [12] 2802 	xch	a,r4
      000C44 33               [12] 2803 	rlc	a
      000C45 CC               [12] 2804 	xch	a,r4
      000C46 33               [12] 2805 	rlc	a
      000C47 CC               [12] 2806 	xch	a,r4
      000C48 54 01            [12] 2807 	anl	a,#0x01
      000C4A 74 FE            [12] 2808 	mov	a,#0xfe
      000C4C 5C               [12] 2809 	anl	a,r4
      000C4D 44 A0            [12] 2810 	orl	a,#0xa0
      000C4F FD               [12] 2811 	mov	r5,a
                                   2812 ;	i2c.c:445: write_readbyte = ((0xA0)|(address >> 7)|(0x01));
      000C50 43 04 A1         [24] 2813 	orl	ar4,#0xa1
                                   2814 ;	i2c.c:448: address_byte = (uint8_t)address;
                                   2815 ;	i2c.c:451: i2c_start(); // 1. Master issues START condition
      000C53 C0 06            [24] 2816 	push	ar6
      000C55 C0 05            [24] 2817 	push	ar5
      000C57 C0 04            [24] 2818 	push	ar4
      000C59 12r00r05         [24] 2819 	lcall	_i2c_start
      000C5C D0 04            [24] 2820 	pop	ar4
      000C5E D0 05            [24] 2821 	pop	ar5
                                   2822 ;	i2c.c:454: i2c_Write_Byte(control_byte); // 2. Master sends Device Address with Write option (0xA0)
      000C60 8D 82            [24] 2823 	mov	dpl,r5
      000C62 C0 04            [24] 2824 	push	ar4
      000C64 12r00rB6         [24] 2825 	lcall	_i2c_Write_Byte
      000C67 D0 04            [24] 2826 	pop	ar4
      000C69 D0 06            [24] 2827 	pop	ar6
                                   2828 ;	i2c.c:457: i2c_Write_Byte(address_byte); // 4. Master sends Buffer/Register Address
      000C6B 8E 82            [24] 2829 	mov	dpl,r6
      000C6D C0 04            [24] 2830 	push	ar4
      000C6F 12r00rB6         [24] 2831 	lcall	_i2c_Write_Byte
                                   2832 ;	i2c.c:459: i2c_Restart(); // 6. Master issues RESTART condition
      000C72 12r00r67         [24] 2833 	lcall	_i2c_Restart
      000C75 D0 04            [24] 2834 	pop	ar4
                                   2835 ;	i2c.c:462: i2c_Write_Byte(write_readbyte); // 7. Master issues Slave Address with Read Option (0xA1)
      000C77 8C 82            [24] 2836 	mov	dpl,r4
      000C79 12r00rB6         [24] 2837 	lcall	_i2c_Write_Byte
                                   2838 ;	i2c.c:465: byte_received = i2c_Read_Byte(); // 9. Master reads data from Slave
      000C7C 12r01r27         [24] 2839 	lcall	_i2c_Read_Byte
                                   2840 ;	i2c.c:468: i2c_NoAck(); // 10. Master issues NACK
      000C7F 12r00r4F         [24] 2841 	lcall	_i2c_NoAck
                                   2842 ;	i2c.c:471: i2c_stop(); // 11. Master issues STOP condition
                                   2843 ;	i2c.c:473: }
      000C82 02r00r17         [24] 2844 	ljmp	_i2c_stop
                                   2845 ;------------------------------------------------------------
                                   2846 ;Allocation info for local variables in function 'hex_addresses'
                                   2847 ;------------------------------------------------------------
                                   2848 ;sloc0                     Allocated with name '_hex_addresses_sloc0_1_0'
                                   2849 ;flag                      Allocated with name '_hex_addresses_flag_65536_183'
                                   2850 ;i                         Allocated with name '_hex_addresses_i_65536_183'
                                   2851 ;address                   Allocated with name '_hex_addresses_address_65536_183'
                                   2852 ;get_address               Allocated with name '_hex_addresses_get_address_65536_183'
                                   2853 ;get_address_int           Allocated with name '_hex_addresses_get_address_int_65536_183'
                                   2854 ;------------------------------------------------------------
                                   2855 ;	i2c.c:477: uint16_t hex_addresses()
                                   2856 ;	-----------------------------------------
                                   2857 ;	 function hex_addresses
                                   2858 ;	-----------------------------------------
      000C85                       2859 _hex_addresses:
                                   2860 ;	i2c.c:479: int flag=1;
      000C85 90r00r23         [24] 2861 	mov	dptr,#_hex_addresses_flag_65536_183
      000C88 74 01            [12] 2862 	mov	a,#0x01
      000C8A F0               [24] 2863 	movx	@dptr,a
      000C8B E4               [12] 2864 	clr	a
      000C8C A3               [24] 2865 	inc	dptr
      000C8D F0               [24] 2866 	movx	@dptr,a
                                   2867 ;	i2c.c:481: uint16_t address=0;            //to store the inputed address from the user in a single integer form
      000C8E 90r00r25         [24] 2868 	mov	dptr,#_hex_addresses_address_65536_183
      000C91 F0               [24] 2869 	movx	@dptr,a
      000C92 A3               [24] 2870 	inc	dptr
      000C93 F0               [24] 2871 	movx	@dptr,a
                                   2872 ;	i2c.c:486: while(flag)
      000C94                       2873 00150$:
      000C94 90r00r23         [24] 2874 	mov	dptr,#_hex_addresses_flag_65536_183
      000C97 E0               [24] 2875 	movx	a,@dptr
      000C98 F5 F0            [12] 2876 	mov	b,a
      000C9A A3               [24] 2877 	inc	dptr
      000C9B E0               [24] 2878 	movx	a,@dptr
      000C9C 45 F0            [12] 2879 	orl	a,b
      000C9E 70 03            [24] 2880 	jnz	00289$
      000CA0 02r0Fr31         [24] 2881 	ljmp	00191$
      000CA3                       2882 00289$:
                                   2883 ;	i2c.c:488: flag=0;
      000CA3 90r00r23         [24] 2884 	mov	dptr,#_hex_addresses_flag_65536_183
      000CA6 E4               [12] 2885 	clr	a
      000CA7 F0               [24] 2886 	movx	@dptr,a
      000CA8 A3               [24] 2887 	inc	dptr
      000CA9 F0               [24] 2888 	movx	@dptr,a
                                   2889 ;	i2c.c:489: for(i=0;i<3;i++)
      000CAA 7F 00            [12] 2890 	mov	r7,#0x00
      000CAC                       2891 00154$:
                                   2892 ;	i2c.c:491: get_address[i]=getchar();
      000CAC EF               [12] 2893 	mov	a,r7
      000CAD 24r27            [12] 2894 	add	a,#_hex_addresses_get_address_65536_183
      000CAF FD               [12] 2895 	mov	r5,a
      000CB0 E4               [12] 2896 	clr	a
      000CB1 34s00            [12] 2897 	addc	a,#(_hex_addresses_get_address_65536_183 >> 8)
      000CB3 FE               [12] 2898 	mov	r6,a
      000CB4 C0 07            [24] 2899 	push	ar7
      000CB6 C0 06            [24] 2900 	push	ar6
      000CB8 C0 05            [24] 2901 	push	ar5
      000CBA 12r00r00         [24] 2902 	lcall	_getchar
      000CBD AB 82            [24] 2903 	mov	r3,dpl
      000CBF D0 05            [24] 2904 	pop	ar5
      000CC1 D0 06            [24] 2905 	pop	ar6
      000CC3 8D 82            [24] 2906 	mov	dpl,r5
      000CC5 8E 83            [24] 2907 	mov	dph,r6
      000CC7 EB               [12] 2908 	mov	a,r3
      000CC8 F0               [24] 2909 	movx	@dptr,a
                                   2910 ;	i2c.c:492: putchar(get_address[i]);
      000CC9 7E 00            [12] 2911 	mov	r6,#0x00
      000CCB 8B 82            [24] 2912 	mov	dpl,r3
      000CCD 8E 83            [24] 2913 	mov	dph,r6
      000CCF 12r00r00         [24] 2914 	lcall	_putchar
      000CD2 D0 07            [24] 2915 	pop	ar7
                                   2916 ;	i2c.c:489: for(i=0;i<3;i++)
      000CD4 0F               [12] 2917 	inc	r7
      000CD5 BF 03 00         [24] 2918 	cjne	r7,#0x03,00290$
      000CD8                       2919 00290$:
      000CD8 40 D2            [24] 2920 	jc	00154$
                                   2921 ;	i2c.c:495: for(i=0;i<3;i++)
      000CDA 7F 00            [12] 2922 	mov	r7,#0x00
      000CDC                       2923 00156$:
                                   2924 ;	i2c.c:497: switch(i)
      000CDC BF 00 02         [24] 2925 	cjne	r7,#0x00,00292$
      000CDF 80 0E            [24] 2926 	sjmp	00102$
      000CE1                       2927 00292$:
      000CE1 BF 01 02         [24] 2928 	cjne	r7,#0x01,00293$
      000CE4 80 5F            [24] 2929 	sjmp	00107$
      000CE6                       2930 00293$:
      000CE6 BF 02 03         [24] 2931 	cjne	r7,#0x02,00294$
      000CE9 02r0Er3B         [24] 2932 	ljmp	00127$
      000CEC                       2933 00294$:
      000CEC 02r0Fr25         [24] 2934 	ljmp	00157$
                                   2935 ;	i2c.c:499: case 0:
      000CEF                       2936 00102$:
                                   2937 ;	i2c.c:500: if((get_address[i]>=48) && (get_address[i]<=55))
      000CEF EF               [12] 2938 	mov	a,r7
      000CF0 24r27            [12] 2939 	add	a,#_hex_addresses_get_address_65536_183
      000CF2 F5 82            [12] 2940 	mov	dpl,a
      000CF4 E4               [12] 2941 	clr	a
      000CF5 34s00            [12] 2942 	addc	a,#(_hex_addresses_get_address_65536_183 >> 8)
      000CF7 F5 83            [12] 2943 	mov	dph,a
      000CF9 E0               [24] 2944 	movx	a,@dptr
      000CFA FE               [12] 2945 	mov	r6,a
      000CFB BE 30 00         [24] 2946 	cjne	r6,#0x30,00295$
      000CFE                       2947 00295$:
      000CFE 40 26            [24] 2948 	jc	00104$
      000D00 EE               [12] 2949 	mov	a,r6
      000D01 24 C8            [12] 2950 	add	a,#0xff - 0x37
      000D03 40 21            [24] 2951 	jc	00104$
                                   2952 ;	i2c.c:502: get_address_int[i]= get_address[i]-48;
      000D05 EF               [12] 2953 	mov	a,r7
      000D06 75 F0 02         [24] 2954 	mov	b,#0x02
      000D09 A4               [48] 2955 	mul	ab
      000D0A 24r2A            [12] 2956 	add	a,#_hex_addresses_get_address_int_65536_183
      000D0C F5 82            [12] 2957 	mov	dpl,a
      000D0E 74s00            [12] 2958 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000D10 35 F0            [12] 2959 	addc	a,b
      000D12 F5 83            [12] 2960 	mov	dph,a
      000D14 7D 00            [12] 2961 	mov	r5,#0x00
      000D16 EE               [12] 2962 	mov	a,r6
      000D17 24 D0            [12] 2963 	add	a,#0xd0
      000D19 FE               [12] 2964 	mov	r6,a
      000D1A ED               [12] 2965 	mov	a,r5
      000D1B 34 FF            [12] 2966 	addc	a,#0xff
      000D1D FD               [12] 2967 	mov	r5,a
      000D1E EE               [12] 2968 	mov	a,r6
      000D1F F0               [24] 2969 	movx	@dptr,a
      000D20 ED               [12] 2970 	mov	a,r5
      000D21 A3               [24] 2971 	inc	dptr
      000D22 F0               [24] 2972 	movx	@dptr,a
      000D23 02r0Fr25         [24] 2973 	ljmp	00157$
      000D26                       2974 00104$:
                                   2975 ;	i2c.c:506: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      000D26 C0 07            [24] 2976 	push	ar7
      000D28 74r29            [12] 2977 	mov	a,#___str_1
      000D2A C0 E0            [24] 2978 	push	acc
      000D2C 74s00            [12] 2979 	mov	a,#(___str_1 >> 8)
      000D2E C0 E0            [24] 2980 	push	acc
      000D30 12r00r00         [24] 2981 	lcall	_printf_tiny
      000D33 15 81            [12] 2982 	dec	sp
      000D35 15 81            [12] 2983 	dec	sp
      000D37 D0 07            [24] 2984 	pop	ar7
                                   2985 ;	i2c.c:507: flag=1;
      000D39 90r00r23         [24] 2986 	mov	dptr,#_hex_addresses_flag_65536_183
      000D3C 74 01            [12] 2987 	mov	a,#0x01
      000D3E F0               [24] 2988 	movx	@dptr,a
      000D3F E4               [12] 2989 	clr	a
      000D40 A3               [24] 2990 	inc	dptr
      000D41 F0               [24] 2991 	movx	@dptr,a
                                   2992 ;	i2c.c:509: break;
      000D42 02r0Fr25         [24] 2993 	ljmp	00157$
                                   2994 ;	i2c.c:511: case 1:
      000D45                       2995 00107$:
                                   2996 ;	i2c.c:512: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      000D45 EF               [12] 2997 	mov	a,r7
      000D46 24r27            [12] 2998 	add	a,#_hex_addresses_get_address_65536_183
      000D48 FD               [12] 2999 	mov	r5,a
      000D49 E4               [12] 3000 	clr	a
      000D4A 34s00            [12] 3001 	addc	a,#(_hex_addresses_get_address_65536_183 >> 8)
      000D4C FE               [12] 3002 	mov	r6,a
      000D4D 8D 82            [24] 3003 	mov	dpl,r5
      000D4F 8E 83            [24] 3004 	mov	dph,r6
      000D51 E0               [24] 3005 	movx	a,@dptr
      000D52 FC               [12] 3006 	mov	r4,a
      000D53 BC 30 00         [24] 3007 	cjne	r4,#0x30,00298$
      000D56                       3008 00298$:
      000D56 40 05            [24] 3009 	jc	00124$
      000D58 EC               [12] 3010 	mov	a,r4
      000D59 24 C6            [12] 3011 	add	a,#0xff - 0x39
      000D5B 50 26            [24] 3012 	jnc	00119$
      000D5D                       3013 00124$:
      000D5D 8D 82            [24] 3014 	mov	dpl,r5
      000D5F 8E 83            [24] 3015 	mov	dph,r6
      000D61 E0               [24] 3016 	movx	a,@dptr
      000D62 FC               [12] 3017 	mov	r4,a
      000D63 BC 41 00         [24] 3018 	cjne	r4,#0x41,00301$
      000D66                       3019 00301$:
      000D66 40 05            [24] 3020 	jc	00126$
      000D68 EC               [12] 3021 	mov	a,r4
      000D69 24 B9            [12] 3022 	add	a,#0xff - 0x46
      000D6B 50 16            [24] 3023 	jnc	00119$
      000D6D                       3024 00126$:
      000D6D 8D 82            [24] 3025 	mov	dpl,r5
      000D6F 8E 83            [24] 3026 	mov	dph,r6
      000D71 E0               [24] 3027 	movx	a,@dptr
      000D72 FC               [12] 3028 	mov	r4,a
      000D73 BC 61 00         [24] 3029 	cjne	r4,#0x61,00304$
      000D76                       3030 00304$:
      000D76 50 03            [24] 3031 	jnc	00305$
      000D78 02r0Er1C         [24] 3032 	ljmp	00120$
      000D7B                       3033 00305$:
      000D7B EC               [12] 3034 	mov	a,r4
      000D7C 24 99            [12] 3035 	add	a,#0xff - 0x66
      000D7E 50 03            [24] 3036 	jnc	00306$
      000D80 02r0Er1C         [24] 3037 	ljmp	00120$
      000D83                       3038 00306$:
      000D83                       3039 00119$:
                                   3040 ;	i2c.c:514: if((get_address[i]>=48) && (get_address[i]<=57))
      000D83 8D 82            [24] 3041 	mov	dpl,r5
      000D85 8E 83            [24] 3042 	mov	dph,r6
      000D87 E0               [24] 3043 	movx	a,@dptr
      000D88 FC               [12] 3044 	mov	r4,a
      000D89 BC 30 00         [24] 3045 	cjne	r4,#0x30,00307$
      000D8C                       3046 00307$:
      000D8C 40 26            [24] 3047 	jc	00116$
      000D8E EC               [12] 3048 	mov	a,r4
      000D8F 24 C6            [12] 3049 	add	a,#0xff - 0x39
      000D91 40 21            [24] 3050 	jc	00116$
                                   3051 ;	i2c.c:516: get_address_int[i]=get_address[i]-48;
      000D93 EF               [12] 3052 	mov	a,r7
      000D94 75 F0 02         [24] 3053 	mov	b,#0x02
      000D97 A4               [48] 3054 	mul	ab
      000D98 24r2A            [12] 3055 	add	a,#_hex_addresses_get_address_int_65536_183
      000D9A F5 82            [12] 3056 	mov	dpl,a
      000D9C 74s00            [12] 3057 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000D9E 35 F0            [12] 3058 	addc	a,b
      000DA0 F5 83            [12] 3059 	mov	dph,a
      000DA2 7B 00            [12] 3060 	mov	r3,#0x00
      000DA4 EC               [12] 3061 	mov	a,r4
      000DA5 24 D0            [12] 3062 	add	a,#0xd0
      000DA7 FC               [12] 3063 	mov	r4,a
      000DA8 EB               [12] 3064 	mov	a,r3
      000DA9 34 FF            [12] 3065 	addc	a,#0xff
      000DAB FB               [12] 3066 	mov	r3,a
      000DAC EC               [12] 3067 	mov	a,r4
      000DAD F0               [24] 3068 	movx	@dptr,a
      000DAE EB               [12] 3069 	mov	a,r3
      000DAF A3               [24] 3070 	inc	dptr
      000DB0 F0               [24] 3071 	movx	@dptr,a
      000DB1 02r0Fr25         [24] 3072 	ljmp	00157$
      000DB4                       3073 00116$:
                                   3074 ;	i2c.c:518: else if((get_address[i]>=65) && (get_address[i]<=70))
      000DB4 8D 82            [24] 3075 	mov	dpl,r5
      000DB6 8E 83            [24] 3076 	mov	dph,r6
      000DB8 E0               [24] 3077 	movx	a,@dptr
      000DB9 FC               [12] 3078 	mov	r4,a
      000DBA BC 41 00         [24] 3079 	cjne	r4,#0x41,00310$
      000DBD                       3080 00310$:
      000DBD 40 26            [24] 3081 	jc	00112$
      000DBF EC               [12] 3082 	mov	a,r4
      000DC0 24 B9            [12] 3083 	add	a,#0xff - 0x46
      000DC2 40 21            [24] 3084 	jc	00112$
                                   3085 ;	i2c.c:520: get_address_int[i]=get_address[i]-55;
      000DC4 EF               [12] 3086 	mov	a,r7
      000DC5 75 F0 02         [24] 3087 	mov	b,#0x02
      000DC8 A4               [48] 3088 	mul	ab
      000DC9 24r2A            [12] 3089 	add	a,#_hex_addresses_get_address_int_65536_183
      000DCB F5 82            [12] 3090 	mov	dpl,a
      000DCD 74s00            [12] 3091 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000DCF 35 F0            [12] 3092 	addc	a,b
      000DD1 F5 83            [12] 3093 	mov	dph,a
      000DD3 7B 00            [12] 3094 	mov	r3,#0x00
      000DD5 EC               [12] 3095 	mov	a,r4
      000DD6 24 C9            [12] 3096 	add	a,#0xc9
      000DD8 FC               [12] 3097 	mov	r4,a
      000DD9 EB               [12] 3098 	mov	a,r3
      000DDA 34 FF            [12] 3099 	addc	a,#0xff
      000DDC FB               [12] 3100 	mov	r3,a
      000DDD EC               [12] 3101 	mov	a,r4
      000DDE F0               [24] 3102 	movx	@dptr,a
      000DDF EB               [12] 3103 	mov	a,r3
      000DE0 A3               [24] 3104 	inc	dptr
      000DE1 F0               [24] 3105 	movx	@dptr,a
      000DE2 02r0Fr25         [24] 3106 	ljmp	00157$
      000DE5                       3107 00112$:
                                   3108 ;	i2c.c:522: else if((get_address[i]>=97) && (get_address[i]<=102))
      000DE5 8D 82            [24] 3109 	mov	dpl,r5
      000DE7 8E 83            [24] 3110 	mov	dph,r6
      000DE9 E0               [24] 3111 	movx	a,@dptr
      000DEA FE               [12] 3112 	mov	r6,a
      000DEB BE 61 00         [24] 3113 	cjne	r6,#0x61,00313$
      000DEE                       3114 00313$:
      000DEE 50 03            [24] 3115 	jnc	00314$
      000DF0 02r0Fr25         [24] 3116 	ljmp	00157$
      000DF3                       3117 00314$:
      000DF3 EE               [12] 3118 	mov	a,r6
      000DF4 24 99            [12] 3119 	add	a,#0xff - 0x66
      000DF6 50 03            [24] 3120 	jnc	00315$
      000DF8 02r0Fr25         [24] 3121 	ljmp	00157$
      000DFB                       3122 00315$:
                                   3123 ;	i2c.c:524: get_address_int[i]=get_address[i]-87;
      000DFB EF               [12] 3124 	mov	a,r7
      000DFC 75 F0 02         [24] 3125 	mov	b,#0x02
      000DFF A4               [48] 3126 	mul	ab
      000E00 24r2A            [12] 3127 	add	a,#_hex_addresses_get_address_int_65536_183
      000E02 F5 82            [12] 3128 	mov	dpl,a
      000E04 74s00            [12] 3129 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000E06 35 F0            [12] 3130 	addc	a,b
      000E08 F5 83            [12] 3131 	mov	dph,a
      000E0A 7D 00            [12] 3132 	mov	r5,#0x00
      000E0C EE               [12] 3133 	mov	a,r6
      000E0D 24 A9            [12] 3134 	add	a,#0xa9
      000E0F FE               [12] 3135 	mov	r6,a
      000E10 ED               [12] 3136 	mov	a,r5
      000E11 34 FF            [12] 3137 	addc	a,#0xff
      000E13 FD               [12] 3138 	mov	r5,a
      000E14 EE               [12] 3139 	mov	a,r6
      000E15 F0               [24] 3140 	movx	@dptr,a
      000E16 ED               [12] 3141 	mov	a,r5
      000E17 A3               [24] 3142 	inc	dptr
      000E18 F0               [24] 3143 	movx	@dptr,a
      000E19 02r0Fr25         [24] 3144 	ljmp	00157$
      000E1C                       3145 00120$:
                                   3146 ;	i2c.c:529: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      000E1C C0 07            [24] 3147 	push	ar7
      000E1E 74r29            [12] 3148 	mov	a,#___str_1
      000E20 C0 E0            [24] 3149 	push	acc
      000E22 74s00            [12] 3150 	mov	a,#(___str_1 >> 8)
      000E24 C0 E0            [24] 3151 	push	acc
      000E26 12r00r00         [24] 3152 	lcall	_printf_tiny
      000E29 15 81            [12] 3153 	dec	sp
      000E2B 15 81            [12] 3154 	dec	sp
      000E2D D0 07            [24] 3155 	pop	ar7
                                   3156 ;	i2c.c:530: flag=1;
      000E2F 90r00r23         [24] 3157 	mov	dptr,#_hex_addresses_flag_65536_183
      000E32 74 01            [12] 3158 	mov	a,#0x01
      000E34 F0               [24] 3159 	movx	@dptr,a
      000E35 E4               [12] 3160 	clr	a
      000E36 A3               [24] 3161 	inc	dptr
      000E37 F0               [24] 3162 	movx	@dptr,a
                                   3163 ;	i2c.c:532: break;
      000E38 02r0Fr25         [24] 3164 	ljmp	00157$
                                   3165 ;	i2c.c:534: case 2:
      000E3B                       3166 00127$:
                                   3167 ;	i2c.c:535: if(((get_address[i]>='0') && (get_address[i]<='9')) ||  ((get_address[i]>='A') && (get_address[i]<='F')) || ((get_address[i]>='a') && (get_address[i]<='f')))
      000E3B EF               [12] 3168 	mov	a,r7
      000E3C 24r27            [12] 3169 	add	a,#_hex_addresses_get_address_65536_183
      000E3E FD               [12] 3170 	mov	r5,a
      000E3F E4               [12] 3171 	clr	a
      000E40 34s00            [12] 3172 	addc	a,#(_hex_addresses_get_address_65536_183 >> 8)
      000E42 FE               [12] 3173 	mov	r6,a
      000E43 8D 82            [24] 3174 	mov	dpl,r5
      000E45 8E 83            [24] 3175 	mov	dph,r6
      000E47 E0               [24] 3176 	movx	a,@dptr
      000E48 FC               [12] 3177 	mov	r4,a
      000E49 BC 30 00         [24] 3178 	cjne	r4,#0x30,00316$
      000E4C                       3179 00316$:
      000E4C 40 05            [24] 3180 	jc	00144$
      000E4E EC               [12] 3181 	mov	a,r4
      000E4F 24 C6            [12] 3182 	add	a,#0xff - 0x39
      000E51 50 26            [24] 3183 	jnc	00139$
      000E53                       3184 00144$:
      000E53 8D 82            [24] 3185 	mov	dpl,r5
      000E55 8E 83            [24] 3186 	mov	dph,r6
      000E57 E0               [24] 3187 	movx	a,@dptr
      000E58 FC               [12] 3188 	mov	r4,a
      000E59 BC 41 00         [24] 3189 	cjne	r4,#0x41,00319$
      000E5C                       3190 00319$:
      000E5C 40 05            [24] 3191 	jc	00146$
      000E5E EC               [12] 3192 	mov	a,r4
      000E5F 24 B9            [12] 3193 	add	a,#0xff - 0x46
      000E61 50 16            [24] 3194 	jnc	00139$
      000E63                       3195 00146$:
      000E63 8D 82            [24] 3196 	mov	dpl,r5
      000E65 8E 83            [24] 3197 	mov	dph,r6
      000E67 E0               [24] 3198 	movx	a,@dptr
      000E68 FC               [12] 3199 	mov	r4,a
      000E69 BC 61 00         [24] 3200 	cjne	r4,#0x61,00322$
      000E6C                       3201 00322$:
      000E6C 50 03            [24] 3202 	jnc	00323$
      000E6E 02r0Fr09         [24] 3203 	ljmp	00140$
      000E71                       3204 00323$:
      000E71 EC               [12] 3205 	mov	a,r4
      000E72 24 99            [12] 3206 	add	a,#0xff - 0x66
      000E74 50 03            [24] 3207 	jnc	00324$
      000E76 02r0Fr09         [24] 3208 	ljmp	00140$
      000E79                       3209 00324$:
      000E79                       3210 00139$:
                                   3211 ;	i2c.c:537: if((get_address[i]>=48) && (get_address[i]<=57))
      000E79 8D 82            [24] 3212 	mov	dpl,r5
      000E7B 8E 83            [24] 3213 	mov	dph,r6
      000E7D E0               [24] 3214 	movx	a,@dptr
      000E7E FC               [12] 3215 	mov	r4,a
      000E7F BC 30 00         [24] 3216 	cjne	r4,#0x30,00325$
      000E82                       3217 00325$:
      000E82 40 25            [24] 3218 	jc	00136$
      000E84 EC               [12] 3219 	mov	a,r4
      000E85 24 C6            [12] 3220 	add	a,#0xff - 0x39
      000E87 40 20            [24] 3221 	jc	00136$
                                   3222 ;	i2c.c:539: get_address_int[i]=get_address[i]-48;
      000E89 EF               [12] 3223 	mov	a,r7
      000E8A 75 F0 02         [24] 3224 	mov	b,#0x02
      000E8D A4               [48] 3225 	mul	ab
      000E8E 24r2A            [12] 3226 	add	a,#_hex_addresses_get_address_int_65536_183
      000E90 F5 82            [12] 3227 	mov	dpl,a
      000E92 74s00            [12] 3228 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000E94 35 F0            [12] 3229 	addc	a,b
      000E96 F5 83            [12] 3230 	mov	dph,a
      000E98 7B 00            [12] 3231 	mov	r3,#0x00
      000E9A EC               [12] 3232 	mov	a,r4
      000E9B 24 D0            [12] 3233 	add	a,#0xd0
      000E9D FC               [12] 3234 	mov	r4,a
      000E9E EB               [12] 3235 	mov	a,r3
      000E9F 34 FF            [12] 3236 	addc	a,#0xff
      000EA1 FB               [12] 3237 	mov	r3,a
      000EA2 EC               [12] 3238 	mov	a,r4
      000EA3 F0               [24] 3239 	movx	@dptr,a
      000EA4 EB               [12] 3240 	mov	a,r3
      000EA5 A3               [24] 3241 	inc	dptr
      000EA6 F0               [24] 3242 	movx	@dptr,a
      000EA7 80 7C            [24] 3243 	sjmp	00157$
      000EA9                       3244 00136$:
                                   3245 ;	i2c.c:541: else if((get_address[i]>=65) && (get_address[i]<=70))
      000EA9 8D 82            [24] 3246 	mov	dpl,r5
      000EAB 8E 83            [24] 3247 	mov	dph,r6
      000EAD E0               [24] 3248 	movx	a,@dptr
      000EAE FC               [12] 3249 	mov	r4,a
      000EAF BC 41 00         [24] 3250 	cjne	r4,#0x41,00328$
      000EB2                       3251 00328$:
      000EB2 40 25            [24] 3252 	jc	00132$
      000EB4 EC               [12] 3253 	mov	a,r4
      000EB5 24 B9            [12] 3254 	add	a,#0xff - 0x46
      000EB7 40 20            [24] 3255 	jc	00132$
                                   3256 ;	i2c.c:543: get_address_int[i]=get_address[i]-55;
      000EB9 EF               [12] 3257 	mov	a,r7
      000EBA 75 F0 02         [24] 3258 	mov	b,#0x02
      000EBD A4               [48] 3259 	mul	ab
      000EBE 24r2A            [12] 3260 	add	a,#_hex_addresses_get_address_int_65536_183
      000EC0 F5 82            [12] 3261 	mov	dpl,a
      000EC2 74s00            [12] 3262 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000EC4 35 F0            [12] 3263 	addc	a,b
      000EC6 F5 83            [12] 3264 	mov	dph,a
      000EC8 7B 00            [12] 3265 	mov	r3,#0x00
      000ECA EC               [12] 3266 	mov	a,r4
      000ECB 24 C9            [12] 3267 	add	a,#0xc9
      000ECD FC               [12] 3268 	mov	r4,a
      000ECE EB               [12] 3269 	mov	a,r3
      000ECF 34 FF            [12] 3270 	addc	a,#0xff
      000ED1 FB               [12] 3271 	mov	r3,a
      000ED2 EC               [12] 3272 	mov	a,r4
      000ED3 F0               [24] 3273 	movx	@dptr,a
      000ED4 EB               [12] 3274 	mov	a,r3
      000ED5 A3               [24] 3275 	inc	dptr
      000ED6 F0               [24] 3276 	movx	@dptr,a
      000ED7 80 4C            [24] 3277 	sjmp	00157$
      000ED9                       3278 00132$:
                                   3279 ;	i2c.c:545: else if((get_address[i]>=97) && (get_address[i]<=102))
      000ED9 8D 82            [24] 3280 	mov	dpl,r5
      000EDB 8E 83            [24] 3281 	mov	dph,r6
      000EDD E0               [24] 3282 	movx	a,@dptr
      000EDE FE               [12] 3283 	mov	r6,a
      000EDF BE 61 00         [24] 3284 	cjne	r6,#0x61,00331$
      000EE2                       3285 00331$:
      000EE2 40 41            [24] 3286 	jc	00157$
      000EE4 EE               [12] 3287 	mov	a,r6
      000EE5 24 99            [12] 3288 	add	a,#0xff - 0x66
      000EE7 40 3C            [24] 3289 	jc	00157$
                                   3290 ;	i2c.c:547: get_address_int[i]=get_address[i]-87;
      000EE9 EF               [12] 3291 	mov	a,r7
      000EEA 75 F0 02         [24] 3292 	mov	b,#0x02
      000EED A4               [48] 3293 	mul	ab
      000EEE 24r2A            [12] 3294 	add	a,#_hex_addresses_get_address_int_65536_183
      000EF0 F5 82            [12] 3295 	mov	dpl,a
      000EF2 74s00            [12] 3296 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000EF4 35 F0            [12] 3297 	addc	a,b
      000EF6 F5 83            [12] 3298 	mov	dph,a
      000EF8 7D 00            [12] 3299 	mov	r5,#0x00
      000EFA EE               [12] 3300 	mov	a,r6
      000EFB 24 A9            [12] 3301 	add	a,#0xa9
      000EFD FE               [12] 3302 	mov	r6,a
      000EFE ED               [12] 3303 	mov	a,r5
      000EFF 34 FF            [12] 3304 	addc	a,#0xff
      000F01 FD               [12] 3305 	mov	r5,a
      000F02 EE               [12] 3306 	mov	a,r6
      000F03 F0               [24] 3307 	movx	@dptr,a
      000F04 ED               [12] 3308 	mov	a,r5
      000F05 A3               [24] 3309 	inc	dptr
      000F06 F0               [24] 3310 	movx	@dptr,a
      000F07 80 1C            [24] 3311 	sjmp	00157$
      000F09                       3312 00140$:
                                   3313 ;	i2c.c:552: printf_tiny("\n\rInvalid Input by user! Please enter again\n\r");
      000F09 C0 07            [24] 3314 	push	ar7
      000F0B 74r29            [12] 3315 	mov	a,#___str_1
      000F0D C0 E0            [24] 3316 	push	acc
      000F0F 74s00            [12] 3317 	mov	a,#(___str_1 >> 8)
      000F11 C0 E0            [24] 3318 	push	acc
      000F13 12r00r00         [24] 3319 	lcall	_printf_tiny
      000F16 15 81            [12] 3320 	dec	sp
      000F18 15 81            [12] 3321 	dec	sp
      000F1A D0 07            [24] 3322 	pop	ar7
                                   3323 ;	i2c.c:553: flag=1;
      000F1C 90r00r23         [24] 3324 	mov	dptr,#_hex_addresses_flag_65536_183
      000F1F 74 01            [12] 3325 	mov	a,#0x01
      000F21 F0               [24] 3326 	movx	@dptr,a
      000F22 E4               [12] 3327 	clr	a
      000F23 A3               [24] 3328 	inc	dptr
      000F24 F0               [24] 3329 	movx	@dptr,a
                                   3330 ;	i2c.c:558: }
      000F25                       3331 00157$:
                                   3332 ;	i2c.c:495: for(i=0;i<3;i++)
      000F25 0F               [12] 3333 	inc	r7
      000F26 BF 03 00         [24] 3334 	cjne	r7,#0x03,00334$
      000F29                       3335 00334$:
      000F29 50 03            [24] 3336 	jnc	00335$
      000F2B 02r0CrDC         [24] 3337 	ljmp	00156$
      000F2E                       3338 00335$:
      000F2E 02r0Cr94         [24] 3339 	ljmp	00150$
                                   3340 ;	i2c.c:565: for(i=0;i<3;i++)
      000F31                       3341 00191$:
      000F31 7F 00            [12] 3342 	mov	r7,#0x00
      000F33                       3343 00158$:
                                   3344 ;	i2c.c:567: address = address +((get_address_int[i])*powf(16,2-i));
      000F33 EF               [12] 3345 	mov	a,r7
      000F34 75 F0 02         [24] 3346 	mov	b,#0x02
      000F37 A4               [48] 3347 	mul	ab
      000F38 24r2A            [12] 3348 	add	a,#_hex_addresses_get_address_int_65536_183
      000F3A F5 82            [12] 3349 	mov	dpl,a
      000F3C 74s00            [12] 3350 	mov	a,#(_hex_addresses_get_address_int_65536_183 >> 8)
      000F3E 35 F0            [12] 3351 	addc	a,b
      000F40 F5 83            [12] 3352 	mov	dph,a
      000F42 E0               [24] 3353 	movx	a,@dptr
      000F43 FD               [12] 3354 	mov	r5,a
      000F44 A3               [24] 3355 	inc	dptr
      000F45 E0               [24] 3356 	movx	a,@dptr
      000F46 FE               [12] 3357 	mov	r6,a
      000F47 8F 03            [24] 3358 	mov	ar3,r7
      000F49 7C 00            [12] 3359 	mov	r4,#0x00
      000F4B 74 02            [12] 3360 	mov	a,#0x02
      000F4D C3               [12] 3361 	clr	c
      000F4E 9B               [12] 3362 	subb	a,r3
      000F4F FB               [12] 3363 	mov	r3,a
      000F50 E4               [12] 3364 	clr	a
      000F51 9C               [12] 3365 	subb	a,r4
      000F52 FC               [12] 3366 	mov	r4,a
      000F53 8B 82            [24] 3367 	mov	dpl,r3
      000F55 8C 83            [24] 3368 	mov	dph,r4
      000F57 C0 07            [24] 3369 	push	ar7
      000F59 C0 06            [24] 3370 	push	ar6
      000F5B C0 05            [24] 3371 	push	ar5
      000F5D 12r00r00         [24] 3372 	lcall	___sint2fs
      000F60 A9 82            [24] 3373 	mov	r1,dpl
      000F62 AA 83            [24] 3374 	mov	r2,dph
      000F64 AB F0            [24] 3375 	mov	r3,b
      000F66 FC               [12] 3376 	mov	r4,a
      000F67 90r00r00         [24] 3377 	mov	dptr,#_powf_PARM_2
      000F6A E9               [12] 3378 	mov	a,r1
      000F6B F0               [24] 3379 	movx	@dptr,a
      000F6C EA               [12] 3380 	mov	a,r2
      000F6D A3               [24] 3381 	inc	dptr
      000F6E F0               [24] 3382 	movx	@dptr,a
      000F6F EB               [12] 3383 	mov	a,r3
      000F70 A3               [24] 3384 	inc	dptr
      000F71 F0               [24] 3385 	movx	@dptr,a
      000F72 EC               [12] 3386 	mov	a,r4
      000F73 A3               [24] 3387 	inc	dptr
      000F74 F0               [24] 3388 	movx	@dptr,a
      000F75 90 00 00         [24] 3389 	mov	dptr,#0x0000
      000F78 75 F0 80         [24] 3390 	mov	b,#0x80
      000F7B 74 41            [12] 3391 	mov	a,#0x41
      000F7D 12r00r00         [24] 3392 	lcall	_powf
      000F80 85 82*0C         [24] 3393 	mov	_hex_addresses_sloc0_1_0,dpl
      000F83 85 83*0D         [24] 3394 	mov	(_hex_addresses_sloc0_1_0 + 1),dph
      000F86 85 F0*0E         [24] 3395 	mov	(_hex_addresses_sloc0_1_0 + 2),b
      000F89 F5*0F            [12] 3396 	mov	(_hex_addresses_sloc0_1_0 + 3),a
      000F8B D0 05            [24] 3397 	pop	ar5
      000F8D D0 06            [24] 3398 	pop	ar6
      000F8F 8D 82            [24] 3399 	mov	dpl,r5
      000F91 8E 83            [24] 3400 	mov	dph,r6
      000F93 12r00r00         [24] 3401 	lcall	___uint2fs
      000F96 A8 82            [24] 3402 	mov	r0,dpl
      000F98 AC 83            [24] 3403 	mov	r4,dph
      000F9A AD F0            [24] 3404 	mov	r5,b
      000F9C FE               [12] 3405 	mov	r6,a
      000F9D C0*0C            [24] 3406 	push	_hex_addresses_sloc0_1_0
      000F9F C0*0D            [24] 3407 	push	(_hex_addresses_sloc0_1_0 + 1)
      000FA1 C0*0E            [24] 3408 	push	(_hex_addresses_sloc0_1_0 + 2)
      000FA3 C0*0F            [24] 3409 	push	(_hex_addresses_sloc0_1_0 + 3)
      000FA5 88 82            [24] 3410 	mov	dpl,r0
      000FA7 8C 83            [24] 3411 	mov	dph,r4
      000FA9 8D F0            [24] 3412 	mov	b,r5
      000FAB EE               [12] 3413 	mov	a,r6
      000FAC 12r00r00         [24] 3414 	lcall	___fsmul
      000FAF 85 82*0C         [24] 3415 	mov	_hex_addresses_sloc0_1_0,dpl
      000FB2 85 83*0D         [24] 3416 	mov	(_hex_addresses_sloc0_1_0 + 1),dph
      000FB5 85 F0*0E         [24] 3417 	mov	(_hex_addresses_sloc0_1_0 + 2),b
      000FB8 F5*0F            [12] 3418 	mov	(_hex_addresses_sloc0_1_0 + 3),a
      000FBA E5 81            [12] 3419 	mov	a,sp
      000FBC 24 FC            [12] 3420 	add	a,#0xfc
      000FBE F5 81            [12] 3421 	mov	sp,a
      000FC0 90r00r25         [24] 3422 	mov	dptr,#_hex_addresses_address_65536_183
      000FC3 E0               [24] 3423 	movx	a,@dptr
      000FC4 F9               [12] 3424 	mov	r1,a
      000FC5 A3               [24] 3425 	inc	dptr
      000FC6 E0               [24] 3426 	movx	a,@dptr
      000FC7 FA               [12] 3427 	mov	r2,a
      000FC8 89 82            [24] 3428 	mov	dpl,r1
      000FCA 8A 83            [24] 3429 	mov	dph,r2
      000FCC 12r00r00         [24] 3430 	lcall	___uint2fs
      000FCF A8 82            [24] 3431 	mov	r0,dpl
      000FD1 A9 83            [24] 3432 	mov	r1,dph
      000FD3 AA F0            [24] 3433 	mov	r2,b
      000FD5 FE               [12] 3434 	mov	r6,a
      000FD6 C0*0C            [24] 3435 	push	_hex_addresses_sloc0_1_0
      000FD8 C0*0D            [24] 3436 	push	(_hex_addresses_sloc0_1_0 + 1)
      000FDA C0*0E            [24] 3437 	push	(_hex_addresses_sloc0_1_0 + 2)
      000FDC C0*0F            [24] 3438 	push	(_hex_addresses_sloc0_1_0 + 3)
      000FDE 88 82            [24] 3439 	mov	dpl,r0
      000FE0 89 83            [24] 3440 	mov	dph,r1
      000FE2 8A F0            [24] 3441 	mov	b,r2
      000FE4 EE               [12] 3442 	mov	a,r6
      000FE5 12r00r00         [24] 3443 	lcall	___fsadd
      000FE8 AB 82            [24] 3444 	mov	r3,dpl
      000FEA AC 83            [24] 3445 	mov	r4,dph
      000FEC AD F0            [24] 3446 	mov	r5,b
      000FEE FE               [12] 3447 	mov	r6,a
      000FEF E5 81            [12] 3448 	mov	a,sp
      000FF1 24 FC            [12] 3449 	add	a,#0xfc
      000FF3 F5 81            [12] 3450 	mov	sp,a
      000FF5 8B 82            [24] 3451 	mov	dpl,r3
      000FF7 8C 83            [24] 3452 	mov	dph,r4
      000FF9 8D F0            [24] 3453 	mov	b,r5
      000FFB EE               [12] 3454 	mov	a,r6
      000FFC 12r00r00         [24] 3455 	lcall	___fs2uint
      000FFF E5 82            [12] 3456 	mov	a,dpl
      001001 85 83 F0         [24] 3457 	mov	b,dph
      001004 D0 07            [24] 3458 	pop	ar7
      001006 90r00r25         [24] 3459 	mov	dptr,#_hex_addresses_address_65536_183
      001009 F0               [24] 3460 	movx	@dptr,a
      00100A E5 F0            [12] 3461 	mov	a,b
      00100C A3               [24] 3462 	inc	dptr
      00100D F0               [24] 3463 	movx	@dptr,a
                                   3464 ;	i2c.c:565: for(i=0;i<3;i++)
      00100E 0F               [12] 3465 	inc	r7
      00100F BF 03 00         [24] 3466 	cjne	r7,#0x03,00336$
      001012                       3467 00336$:
      001012 50 03            [24] 3468 	jnc	00337$
      001014 02r0Fr33         [24] 3469 	ljmp	00158$
      001017                       3470 00337$:
                                   3471 ;	i2c.c:569: return (address);
      001017 90r00r25         [24] 3472 	mov	dptr,#_hex_addresses_address_65536_183
      00101A E0               [24] 3473 	movx	a,@dptr
      00101B FE               [12] 3474 	mov	r6,a
      00101C A3               [24] 3475 	inc	dptr
      00101D E0               [24] 3476 	movx	a,@dptr
                                   3477 ;	i2c.c:570: }
      00101E 8E 82            [24] 3478 	mov	dpl,r6
      001020 F5 83            [12] 3479 	mov	dph,a
      001022 22               [24] 3480 	ret
                                   3481 ;------------------------------------------------------------
                                   3482 ;Allocation info for local variables in function 'hex_data'
                                   3483 ;------------------------------------------------------------
                                   3484 ;rec_addr                  Allocated with name '_hex_data_rec_addr_65536_204'
                                   3485 ;byte_received             Allocated with name '_hex_data_byte_received_65536_205'
                                   3486 ;control_byte              Allocated with name '_hex_data_control_byte_65536_205'
                                   3487 ;address_byte              Allocated with name '_hex_data_address_byte_65536_205'
                                   3488 ;write_readbyte            Allocated with name '_hex_data_write_readbyte_65536_205'
                                   3489 ;------------------------------------------------------------
                                   3490 ;	i2c.c:572: uint16_t hex_data(uint16_t rec_addr)
                                   3491 ;	-----------------------------------------
                                   3492 ;	 function hex_data
                                   3493 ;	-----------------------------------------
      001023                       3494 _hex_data:
      001023 AF 83            [24] 3495 	mov	r7,dph
      001025 E5 82            [12] 3496 	mov	a,dpl
      001027 90r00r30         [24] 3497 	mov	dptr,#_hex_data_rec_addr_65536_204
      00102A F0               [24] 3498 	movx	@dptr,a
      00102B EF               [12] 3499 	mov	a,r7
      00102C A3               [24] 3500 	inc	dptr
      00102D F0               [24] 3501 	movx	@dptr,a
                                   3502 ;	i2c.c:580: control_byte = ((0xA0)|(rec_addr >> 7)&(0xfe));
      00102E 90r00r30         [24] 3503 	mov	dptr,#_hex_data_rec_addr_65536_204
      001031 E0               [24] 3504 	movx	a,@dptr
      001032 FE               [12] 3505 	mov	r6,a
      001033 A3               [24] 3506 	inc	dptr
      001034 E0               [24] 3507 	movx	a,@dptr
      001035 8E 04            [24] 3508 	mov	ar4,r6
      001037 A2 E7            [12] 3509 	mov	c,acc.7
      001039 CC               [12] 3510 	xch	a,r4
      00103A 33               [12] 3511 	rlc	a
      00103B CC               [12] 3512 	xch	a,r4
      00103C 33               [12] 3513 	rlc	a
      00103D CC               [12] 3514 	xch	a,r4
      00103E 54 01            [12] 3515 	anl	a,#0x01
      001040 74 FE            [12] 3516 	mov	a,#0xfe
      001042 5C               [12] 3517 	anl	a,r4
      001043 44 A0            [12] 3518 	orl	a,#0xa0
      001045 FD               [12] 3519 	mov	r5,a
                                   3520 ;	i2c.c:581: write_readbyte = ((0xA0)|(rec_addr >> 7)|(0x01));
      001046 43 04 A1         [24] 3521 	orl	ar4,#0xa1
                                   3522 ;	i2c.c:584: address_byte = (uint8_t)rec_addr;
                                   3523 ;	i2c.c:586: i2c_start();
      001049 C0 06            [24] 3524 	push	ar6
      00104B C0 05            [24] 3525 	push	ar5
      00104D C0 04            [24] 3526 	push	ar4
      00104F 12r00r05         [24] 3527 	lcall	_i2c_start
      001052 D0 04            [24] 3528 	pop	ar4
      001054 D0 05            [24] 3529 	pop	ar5
                                   3530 ;	i2c.c:588: i2c_Write_Byte(control_byte);
      001056 8D 82            [24] 3531 	mov	dpl,r5
      001058 C0 04            [24] 3532 	push	ar4
      00105A 12r00rB6         [24] 3533 	lcall	_i2c_Write_Byte
      00105D D0 04            [24] 3534 	pop	ar4
      00105F D0 06            [24] 3535 	pop	ar6
                                   3536 ;	i2c.c:590: i2c_Write_Byte(address_byte);
      001061 8E 82            [24] 3537 	mov	dpl,r6
      001063 C0 04            [24] 3538 	push	ar4
      001065 12r00rB6         [24] 3539 	lcall	_i2c_Write_Byte
                                   3540 ;	i2c.c:592: i2c_Restart();
      001068 12r00r67         [24] 3541 	lcall	_i2c_Restart
      00106B D0 04            [24] 3542 	pop	ar4
                                   3543 ;	i2c.c:594: i2c_Write_Byte(write_readbyte);
      00106D 8C 82            [24] 3544 	mov	dpl,r4
      00106F 12r00rB6         [24] 3545 	lcall	_i2c_Write_Byte
                                   3546 ;	i2c.c:596: byte_received = i2c_Read_Byte();
      001072 12r01r27         [24] 3547 	lcall	_i2c_Read_Byte
      001075 AF 82            [24] 3548 	mov	r7,dpl
      001077 7E 00            [12] 3549 	mov	r6,#0x00
                                   3550 ;	i2c.c:598: i2c_NoAck();
      001079 C0 07            [24] 3551 	push	ar7
      00107B C0 06            [24] 3552 	push	ar6
      00107D 12r00r4F         [24] 3553 	lcall	_i2c_NoAck
                                   3554 ;	i2c.c:600: i2c_stop();
      001080 12r00r17         [24] 3555 	lcall	_i2c_stop
      001083 D0 06            [24] 3556 	pop	ar6
      001085 D0 07            [24] 3557 	pop	ar7
                                   3558 ;	i2c.c:602: return(byte_received);
      001087 8F 82            [24] 3559 	mov	dpl,r7
      001089 8E 83            [24] 3560 	mov	dph,r6
                                   3561 ;	i2c.c:603: }
      00108B 22               [24] 3562 	ret
                                   3563 ;------------------------------------------------------------
                                   3564 ;Allocation info for local variables in function 'hex_dump'
                                   3565 ;------------------------------------------------------------
                                   3566 ;sloc0                     Allocated with name '_hex_dump_sloc0_1_0'
                                   3567 ;first_address             Allocated with name '_hex_dump_first_address_65536_206'
                                   3568 ;second_address            Allocated with name '_hex_dump_second_address_65536_206'
                                   3569 ;counter                   Allocated with name '_hex_dump_counter_65536_206'
                                   3570 ;count                     Allocated with name '_hex_dump_count_65536_206'
                                   3571 ;flag                      Allocated with name '_hex_dump_flag_65536_206'
                                   3572 ;temp_data                 Allocated with name '_hex_dump_temp_data_65536_206'
                                   3573 ;------------------------------------------------------------
                                   3574 ;	i2c.c:609: void hex_dump()
                                   3575 ;	-----------------------------------------
                                   3576 ;	 function hex_dump
                                   3577 ;	-----------------------------------------
      00108C                       3578 _hex_dump:
                                   3579 ;	i2c.c:614: int count=0;
      00108C 90r00r32         [24] 3580 	mov	dptr,#_hex_dump_count_65536_206
      00108F E4               [12] 3581 	clr	a
      001090 F0               [24] 3582 	movx	@dptr,a
      001091 A3               [24] 3583 	inc	dptr
      001092 F0               [24] 3584 	movx	@dptr,a
                                   3585 ;	i2c.c:615: int flag=0;
      001093 90r00r34         [24] 3586 	mov	dptr,#_hex_dump_flag_65536_206
      001096 F0               [24] 3587 	movx	@dptr,a
      001097 A3               [24] 3588 	inc	dptr
      001098 F0               [24] 3589 	movx	@dptr,a
                                   3590 ;	i2c.c:618: printf_tiny("\n\rEnter the FIRST address between 0x00-0x7ff\n\r");
      001099 74rCE            [12] 3591 	mov	a,#___str_4
      00109B C0 E0            [24] 3592 	push	acc
      00109D 74s00            [12] 3593 	mov	a,#(___str_4 >> 8)
      00109F C0 E0            [24] 3594 	push	acc
      0010A1 12r00r00         [24] 3595 	lcall	_printf_tiny
      0010A4 15 81            [12] 3596 	dec	sp
      0010A6 15 81            [12] 3597 	dec	sp
                                   3598 ;	i2c.c:619: first_address=hex_addresses();
      0010A8 12r0Cr85         [24] 3599 	lcall	_hex_addresses
      0010AB AE 82            [24] 3600 	mov	r6,dpl
      0010AD AF 83            [24] 3601 	mov	r7,dph
                                   3602 ;	i2c.c:620: printf_tiny("\n\rEnter the SECOND address between 0x00-0x7ff\n\r");
      0010AF C0 07            [24] 3603 	push	ar7
      0010B1 C0 06            [24] 3604 	push	ar6
      0010B3 74rFD            [12] 3605 	mov	a,#___str_5
      0010B5 C0 E0            [24] 3606 	push	acc
      0010B7 74s00            [12] 3607 	mov	a,#(___str_5 >> 8)
      0010B9 C0 E0            [24] 3608 	push	acc
      0010BB 12r00r00         [24] 3609 	lcall	_printf_tiny
      0010BE 15 81            [12] 3610 	dec	sp
      0010C0 15 81            [12] 3611 	dec	sp
                                   3612 ;	i2c.c:621: second_address=hex_addresses();
      0010C2 12r0Cr85         [24] 3613 	lcall	_hex_addresses
      0010C5 AC 82            [24] 3614 	mov	r4,dpl
      0010C7 AD 83            [24] 3615 	mov	r5,dph
      0010C9 D0 06            [24] 3616 	pop	ar6
      0010CB D0 07            [24] 3617 	pop	ar7
                                   3618 ;	i2c.c:623: if(first_address <= second_address)
      0010CD C3               [12] 3619 	clr	c
      0010CE EC               [12] 3620 	mov	a,r4
      0010CF 9E               [12] 3621 	subb	a,r6
      0010D0 ED               [12] 3622 	mov	a,r5
      0010D1 9F               [12] 3623 	subb	a,r7
      0010D2 40 2A            [24] 3624 	jc	00102$
                                   3625 ;	i2c.c:625: flag=1;
      0010D4 90r00r34         [24] 3626 	mov	dptr,#_hex_dump_flag_65536_206
      0010D7 74 01            [12] 3627 	mov	a,#0x01
      0010D9 F0               [24] 3628 	movx	@dptr,a
      0010DA E4               [12] 3629 	clr	a
      0010DB A3               [24] 3630 	inc	dptr
      0010DC F0               [24] 3631 	movx	@dptr,a
                                   3632 ;	i2c.c:626: printf_tiny("\n\rValid input\n\r");
      0010DD C0 07            [24] 3633 	push	ar7
      0010DF C0 06            [24] 3634 	push	ar6
      0010E1 C0 05            [24] 3635 	push	ar5
      0010E3 C0 04            [24] 3636 	push	ar4
      0010E5 74r2D            [12] 3637 	mov	a,#___str_6
      0010E7 C0 E0            [24] 3638 	push	acc
      0010E9 74s01            [12] 3639 	mov	a,#(___str_6 >> 8)
      0010EB C0 E0            [24] 3640 	push	acc
      0010ED 12r00r00         [24] 3641 	lcall	_printf_tiny
      0010F0 15 81            [12] 3642 	dec	sp
      0010F2 15 81            [12] 3643 	dec	sp
      0010F4 D0 04            [24] 3644 	pop	ar4
      0010F6 D0 05            [24] 3645 	pop	ar5
      0010F8 D0 06            [24] 3646 	pop	ar6
      0010FA D0 07            [24] 3647 	pop	ar7
      0010FC 80 1F            [24] 3648 	sjmp	00103$
      0010FE                       3649 00102$:
                                   3650 ;	i2c.c:631: printf_tiny("\n\rInvalid Entries! Please enter address for hex dump again\n\r");
      0010FE C0 07            [24] 3651 	push	ar7
      001100 C0 06            [24] 3652 	push	ar6
      001102 C0 05            [24] 3653 	push	ar5
      001104 C0 04            [24] 3654 	push	ar4
      001106 74r3D            [12] 3655 	mov	a,#___str_7
      001108 C0 E0            [24] 3656 	push	acc
      00110A 74s01            [12] 3657 	mov	a,#(___str_7 >> 8)
      00110C C0 E0            [24] 3658 	push	acc
      00110E 12r00r00         [24] 3659 	lcall	_printf_tiny
      001111 15 81            [12] 3660 	dec	sp
      001113 15 81            [12] 3661 	dec	sp
      001115 D0 04            [24] 3662 	pop	ar4
      001117 D0 05            [24] 3663 	pop	ar5
      001119 D0 06            [24] 3664 	pop	ar6
      00111B D0 07            [24] 3665 	pop	ar7
      00111D                       3666 00103$:
                                   3667 ;	i2c.c:634: if(flag == 1)
      00111D 90r00r34         [24] 3668 	mov	dptr,#_hex_dump_flag_65536_206
      001120 E0               [24] 3669 	movx	a,@dptr
      001121 FA               [12] 3670 	mov	r2,a
      001122 A3               [24] 3671 	inc	dptr
      001123 E0               [24] 3672 	movx	a,@dptr
      001124 FB               [12] 3673 	mov	r3,a
      001125 BA 01 05         [24] 3674 	cjne	r2,#0x01,00150$
      001128 BB 00 02         [24] 3675 	cjne	r3,#0x00,00150$
      00112B 80 01            [24] 3676 	sjmp	00151$
      00112D                       3677 00150$:
      00112D 22               [24] 3678 	ret
      00112E                       3679 00151$:
                                   3680 ;	i2c.c:636: for(counter =(first_address);counter <= (second_address); (counter)++)
      00112E 8E 02            [24] 3681 	mov	ar2,r6
      001130 8F 03            [24] 3682 	mov	ar3,r7
      001132                       3683 00116$:
      001132 8A 00            [24] 3684 	mov	ar0,r2
      001134 8B 01            [24] 3685 	mov	ar1,r3
      001136 C3               [12] 3686 	clr	c
      001137 EC               [12] 3687 	mov	a,r4
      001138 98               [12] 3688 	subb	a,r0
      001139 ED               [12] 3689 	mov	a,r5
      00113A 99               [12] 3690 	subb	a,r1
      00113B 50 01            [24] 3691 	jnc	00152$
      00113D 22               [24] 3692 	ret
      00113E                       3693 00152$:
                                   3694 ;	i2c.c:638: if(counter==first_address)
      00113E E8               [12] 3695 	mov	a,r0
      00113F B5 06 5B         [24] 3696 	cjne	a,ar6,00110$
      001142 E9               [12] 3697 	mov	a,r1
      001143 B5 07 57         [24] 3698 	cjne	a,ar7,00110$
                                   3699 ;	i2c.c:640: temp_data=hex_data(first_address);
      001146 C0 04            [24] 3700 	push	ar4
      001148 C0 05            [24] 3701 	push	ar5
      00114A 8E 82            [24] 3702 	mov	dpl,r6
      00114C 8F 83            [24] 3703 	mov	dph,r7
      00114E C0 07            [24] 3704 	push	ar7
      001150 C0 06            [24] 3705 	push	ar6
      001152 C0 03            [24] 3706 	push	ar3
      001154 C0 02            [24] 3707 	push	ar2
      001156 12r10r23         [24] 3708 	lcall	_hex_data
      001159 AC 82            [24] 3709 	mov	r4,dpl
      00115B AD 83            [24] 3710 	mov	r5,dph
      00115D D0 02            [24] 3711 	pop	ar2
      00115F D0 03            [24] 3712 	pop	ar3
      001161 D0 06            [24] 3713 	pop	ar6
      001163 D0 07            [24] 3714 	pop	ar7
                                   3715 ;	i2c.c:641: printf_tiny("\n\r%x\>>   %x",first_address,temp_data);
      001165 C0 07            [24] 3716 	push	ar7
      001167 C0 06            [24] 3717 	push	ar6
      001169 C0 05            [24] 3718 	push	ar5
      00116B C0 04            [24] 3719 	push	ar4
      00116D C0 03            [24] 3720 	push	ar3
      00116F C0 02            [24] 3721 	push	ar2
      001171 C0 04            [24] 3722 	push	ar4
      001173 C0 05            [24] 3723 	push	ar5
      001175 C0 06            [24] 3724 	push	ar6
      001177 C0 07            [24] 3725 	push	ar7
      001179 74r7A            [12] 3726 	mov	a,#___str_8
      00117B C0 E0            [24] 3727 	push	acc
      00117D 74s01            [12] 3728 	mov	a,#(___str_8 >> 8)
      00117F C0 E0            [24] 3729 	push	acc
      001181 12r00r00         [24] 3730 	lcall	_printf_tiny
      001184 E5 81            [12] 3731 	mov	a,sp
      001186 24 FA            [12] 3732 	add	a,#0xfa
      001188 F5 81            [12] 3733 	mov	sp,a
      00118A D0 02            [24] 3734 	pop	ar2
      00118C D0 03            [24] 3735 	pop	ar3
      00118E D0 04            [24] 3736 	pop	ar4
      001190 D0 05            [24] 3737 	pop	ar5
      001192 D0 06            [24] 3738 	pop	ar6
      001194 D0 07            [24] 3739 	pop	ar7
      001196 D0 05            [24] 3740 	pop	ar5
      001198 D0 04            [24] 3741 	pop	ar4
      00119A 02r12r61         [24] 3742 	ljmp	00117$
      00119D                       3743 00110$:
                                   3744 ;	i2c.c:643: else if(count != 15)
      00119D 90r00r32         [24] 3745 	mov	dptr,#_hex_dump_count_65536_206
      0011A0 E0               [24] 3746 	movx	a,@dptr
      0011A1 F5*10            [12] 3747 	mov	_hex_dump_sloc0_1_0,a
      0011A3 A3               [24] 3748 	inc	dptr
      0011A4 E0               [24] 3749 	movx	a,@dptr
      0011A5 F5*11            [12] 3750 	mov	(_hex_dump_sloc0_1_0 + 1),a
      0011A7 74 0F            [12] 3751 	mov	a,#0x0f
      0011A9 B5*10 06         [24] 3752 	cjne	a,_hex_dump_sloc0_1_0,00155$
      0011AC E4               [12] 3753 	clr	a
      0011AD B5*11 02         [24] 3754 	cjne	a,(_hex_dump_sloc0_1_0 + 1),00155$
      0011B0 80 57            [24] 3755 	sjmp	00107$
      0011B2                       3756 00155$:
                                   3757 ;	i2c.c:645: temp_data=hex_data(counter);
      0011B2 C0 04            [24] 3758 	push	ar4
      0011B4 C0 05            [24] 3759 	push	ar5
      0011B6 88 82            [24] 3760 	mov	dpl,r0
      0011B8 89 83            [24] 3761 	mov	dph,r1
      0011BA C0 07            [24] 3762 	push	ar7
      0011BC C0 06            [24] 3763 	push	ar6
      0011BE C0 03            [24] 3764 	push	ar3
      0011C0 C0 02            [24] 3765 	push	ar2
      0011C2 12r10r23         [24] 3766 	lcall	_hex_data
      0011C5 AC 82            [24] 3767 	mov	r4,dpl
      0011C7 AD 83            [24] 3768 	mov	r5,dph
      0011C9 D0 02            [24] 3769 	pop	ar2
      0011CB D0 03            [24] 3770 	pop	ar3
                                   3771 ;	i2c.c:646: printf_tiny("   %x",temp_data);
      0011CD C0 05            [24] 3772 	push	ar5
      0011CF C0 04            [24] 3773 	push	ar4
      0011D1 C0 03            [24] 3774 	push	ar3
      0011D3 C0 02            [24] 3775 	push	ar2
      0011D5 C0 04            [24] 3776 	push	ar4
      0011D7 C0 05            [24] 3777 	push	ar5
      0011D9 74r86            [12] 3778 	mov	a,#___str_9
      0011DB C0 E0            [24] 3779 	push	acc
      0011DD 74s01            [12] 3780 	mov	a,#(___str_9 >> 8)
      0011DF C0 E0            [24] 3781 	push	acc
      0011E1 12r00r00         [24] 3782 	lcall	_printf_tiny
      0011E4 E5 81            [12] 3783 	mov	a,sp
      0011E6 24 FC            [12] 3784 	add	a,#0xfc
      0011E8 F5 81            [12] 3785 	mov	sp,a
      0011EA D0 02            [24] 3786 	pop	ar2
      0011EC D0 03            [24] 3787 	pop	ar3
      0011EE D0 04            [24] 3788 	pop	ar4
      0011F0 D0 05            [24] 3789 	pop	ar5
      0011F2 D0 06            [24] 3790 	pop	ar6
      0011F4 D0 07            [24] 3791 	pop	ar7
                                   3792 ;	i2c.c:647: count++;
      0011F6 90r00r32         [24] 3793 	mov	dptr,#_hex_dump_count_65536_206
      0011F9 74 01            [12] 3794 	mov	a,#0x01
      0011FB 25*10            [12] 3795 	add	a,_hex_dump_sloc0_1_0
      0011FD F0               [24] 3796 	movx	@dptr,a
      0011FE E4               [12] 3797 	clr	a
      0011FF 35*11            [12] 3798 	addc	a,(_hex_dump_sloc0_1_0 + 1)
      001201 A3               [24] 3799 	inc	dptr
      001202 F0               [24] 3800 	movx	@dptr,a
      001203 D0 05            [24] 3801 	pop	ar5
      001205 D0 04            [24] 3802 	pop	ar4
      001207 80 58            [24] 3803 	sjmp	00117$
      001209                       3804 00107$:
                                   3805 ;	i2c.c:649: else if(count == 15)
      001209 74 0F            [12] 3806 	mov	a,#0x0f
      00120B B5*10 06         [24] 3807 	cjne	a,_hex_dump_sloc0_1_0,00156$
      00120E E4               [12] 3808 	clr	a
      00120F B5*11 02         [24] 3809 	cjne	a,(_hex_dump_sloc0_1_0 + 1),00156$
      001212 80 02            [24] 3810 	sjmp	00157$
      001214                       3811 00156$:
      001214 80 4B            [24] 3812 	sjmp	00117$
      001216                       3813 00157$:
                                   3814 ;	i2c.c:651: temp_data=hex_data(counter);
      001216 88 82            [24] 3815 	mov	dpl,r0
      001218 89 83            [24] 3816 	mov	dph,r1
      00121A C0 07            [24] 3817 	push	ar7
      00121C C0 06            [24] 3818 	push	ar6
      00121E C0 05            [24] 3819 	push	ar5
      001220 C0 04            [24] 3820 	push	ar4
      001222 C0 03            [24] 3821 	push	ar3
      001224 C0 02            [24] 3822 	push	ar2
      001226 12r10r23         [24] 3823 	lcall	_hex_data
      001229 A8 82            [24] 3824 	mov	r0,dpl
      00122B A9 83            [24] 3825 	mov	r1,dph
      00122D D0 02            [24] 3826 	pop	ar2
      00122F D0 03            [24] 3827 	pop	ar3
                                   3828 ;	i2c.c:652: printf_tiny("\n\r%x>>   %x",counter,temp_data);
      001231 C0 03            [24] 3829 	push	ar3
      001233 C0 02            [24] 3830 	push	ar2
      001235 C0 00            [24] 3831 	push	ar0
      001237 C0 01            [24] 3832 	push	ar1
      001239 C0 02            [24] 3833 	push	ar2
      00123B C0 03            [24] 3834 	push	ar3
      00123D 74r7A            [12] 3835 	mov	a,#___str_8
      00123F C0 E0            [24] 3836 	push	acc
      001241 74s01            [12] 3837 	mov	a,#(___str_8 >> 8)
      001243 C0 E0            [24] 3838 	push	acc
      001245 12r00r00         [24] 3839 	lcall	_printf_tiny
      001248 E5 81            [12] 3840 	mov	a,sp
      00124A 24 FA            [12] 3841 	add	a,#0xfa
      00124C F5 81            [12] 3842 	mov	sp,a
      00124E D0 02            [24] 3843 	pop	ar2
      001250 D0 03            [24] 3844 	pop	ar3
      001252 D0 04            [24] 3845 	pop	ar4
      001254 D0 05            [24] 3846 	pop	ar5
      001256 D0 06            [24] 3847 	pop	ar6
      001258 D0 07            [24] 3848 	pop	ar7
                                   3849 ;	i2c.c:653: count=0;
      00125A 90r00r32         [24] 3850 	mov	dptr,#_hex_dump_count_65536_206
      00125D E4               [12] 3851 	clr	a
      00125E F0               [24] 3852 	movx	@dptr,a
      00125F A3               [24] 3853 	inc	dptr
      001260 F0               [24] 3854 	movx	@dptr,a
      001261                       3855 00117$:
                                   3856 ;	i2c.c:636: for(counter =(first_address);counter <= (second_address); (counter)++)
      001261 0A               [12] 3857 	inc	r2
      001262 BA 00 01         [24] 3858 	cjne	r2,#0x00,00158$
      001265 0B               [12] 3859 	inc	r3
      001266                       3860 00158$:
                                   3861 ;	i2c.c:659: }
      001266 02r11r32         [24] 3862 	ljmp	00116$
                                   3863 	.area CSEG    (CODE)
                                   3864 	.area CONST   (CODE)
                                   3865 	.area CONST   (CODE)
      000000                       3866 ___str_0:
      000000 0A                    3867 	.db 0x0a
      000001 0D                    3868 	.db 0x0d
      000002 45 6E 74 65 72 20 74  3869 	.ascii "Enter the address between 0x00-0x7ff"
             68 65 20 61 64 64 72
             65 73 73 20 62 65 74
             77 65 65 6E 20 30 78
             30 30 2D 30 78 37 66
             66
      000026 0A                    3870 	.db 0x0a
      000027 0D                    3871 	.db 0x0d
      000028 00                    3872 	.db 0x00
                                   3873 	.area CSEG    (CODE)
                                   3874 	.area CONST   (CODE)
      000029                       3875 ___str_1:
      000029 0A                    3876 	.db 0x0a
      00002A 0D                    3877 	.db 0x0d
      00002B 49 6E 76 61 6C 69 64  3878 	.ascii "Invalid Input by user! Please enter again"
             20 49 6E 70 75 74 20
             62 79 20 75 73 65 72
             21 20 50 6C 65 61 73
             65 20 65 6E 74 65 72
             20 61 67 61 69 6E
      000054 0A                    3879 	.db 0x0a
      000055 0D                    3880 	.db 0x0d
      000056 00                    3881 	.db 0x00
                                   3882 	.area CSEG    (CODE)
                                   3883 	.area CONST   (CODE)
      000057                       3884 ___str_2:
      000057 0A                    3885 	.db 0x0a
      000058 0D                    3886 	.db 0x0d
      000059 45 6E 74 65 72 20 74  3887 	.ascii "Enter the data you want to write(*Note:DATA SHOULD BE BETWEE"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 28 2A 4E
             6F 74 65 3A 44 41 54
             41 20 53 48 4F 55 4C
             44 20 42 45 20 42 45
             54 57 45 45
      000095 4E 20 30 78 30 30 20  3888 	.ascii "N 0x00 and 0xFF)"
             61 6E 64 20 30 78 46
             46 29
      0000A5 0A                    3889 	.db 0x0a
      0000A6 0D                    3890 	.db 0x0d
      0000A7 00                    3891 	.db 0x00
                                   3892 	.area CSEG    (CODE)
                                   3893 	.area CONST   (CODE)
      0000A8                       3894 ___str_3:
      0000A8 0A                    3895 	.db 0x0a
      0000A9 0D                    3896 	.db 0x0d
      0000AA 49 6E 76 61 6C 69 64  3897 	.ascii "Invalid Input! Please enter again"
             20 49 6E 70 75 74 21
             20 50 6C 65 61 73 65
             20 65 6E 74 65 72 20
             61 67 61 69 6E
      0000CB 0A                    3898 	.db 0x0a
      0000CC 0D                    3899 	.db 0x0d
      0000CD 00                    3900 	.db 0x00
                                   3901 	.area CSEG    (CODE)
                                   3902 	.area CONST   (CODE)
      0000CE                       3903 ___str_4:
      0000CE 0A                    3904 	.db 0x0a
      0000CF 0D                    3905 	.db 0x0d
      0000D0 45 6E 74 65 72 20 74  3906 	.ascii "Enter the FIRST address between 0x00-0x7ff"
             68 65 20 46 49 52 53
             54 20 61 64 64 72 65
             73 73 20 62 65 74 77
             65 65 6E 20 30 78 30
             30 2D 30 78 37 66 66
      0000FA 0A                    3907 	.db 0x0a
      0000FB 0D                    3908 	.db 0x0d
      0000FC 00                    3909 	.db 0x00
                                   3910 	.area CSEG    (CODE)
                                   3911 	.area CONST   (CODE)
      0000FD                       3912 ___str_5:
      0000FD 0A                    3913 	.db 0x0a
      0000FE 0D                    3914 	.db 0x0d
      0000FF 45 6E 74 65 72 20 74  3915 	.ascii "Enter the SECOND address between 0x00-0x7ff"
             68 65 20 53 45 43 4F
             4E 44 20 61 64 64 72
             65 73 73 20 62 65 74
             77 65 65 6E 20 30 78
             30 30 2D 30 78 37 66
             66
      00012A 0A                    3916 	.db 0x0a
      00012B 0D                    3917 	.db 0x0d
      00012C 00                    3918 	.db 0x00
                                   3919 	.area CSEG    (CODE)
                                   3920 	.area CONST   (CODE)
      00012D                       3921 ___str_6:
      00012D 0A                    3922 	.db 0x0a
      00012E 0D                    3923 	.db 0x0d
      00012F 56 61 6C 69 64 20 69  3924 	.ascii "Valid input"
             6E 70 75 74
      00013A 0A                    3925 	.db 0x0a
      00013B 0D                    3926 	.db 0x0d
      00013C 00                    3927 	.db 0x00
                                   3928 	.area CSEG    (CODE)
                                   3929 	.area CONST   (CODE)
      00013D                       3930 ___str_7:
      00013D 0A                    3931 	.db 0x0a
      00013E 0D                    3932 	.db 0x0d
      00013F 49 6E 76 61 6C 69 64  3933 	.ascii "Invalid Entries! Please enter address for hex dump again"
             20 45 6E 74 72 69 65
             73 21 20 50 6C 65 61
             73 65 20 65 6E 74 65
             72 20 61 64 64 72 65
             73 73 20 66 6F 72 20
             68 65 78 20 64 75 6D
             70 20 61 67 61 69 6E
      000177 0A                    3934 	.db 0x0a
      000178 0D                    3935 	.db 0x0d
      000179 00                    3936 	.db 0x00
                                   3937 	.area CSEG    (CODE)
                                   3938 	.area CONST   (CODE)
      00017A                       3939 ___str_8:
      00017A 0A                    3940 	.db 0x0a
      00017B 0D                    3941 	.db 0x0d
      00017C 25 78 3E 3E 20 20 20  3942 	.ascii "%x>>   %x"
             25 78
      000185 00                    3943 	.db 0x00
                                   3944 	.area CSEG    (CODE)
                                   3945 	.area CONST   (CODE)
      000186                       3946 ___str_9:
      000186 20 20 20 25 78        3947 	.ascii "   %x"
      00018B 00                    3948 	.db 0x00
                                   3949 	.area CSEG    (CODE)
                                   3950 	.area XINIT   (CODE)
                                   3951 	.area CABS    (ABS,CODE)
